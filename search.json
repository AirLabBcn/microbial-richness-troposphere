[
  {
    "objectID": "flights.html",
    "href": "flights.html",
    "title": "Microbial Richness in the Troposphere",
    "section": "",
    "text": "import os\nimport gpxpy\nimport requests\nimport numpy as np\nimport pandas as pd\nimport xarray as xr\nfrom glob import glob\nimport plotnine as p9\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom matplotlib_inline.backend_inline import set_matplotlib_formats\n\n\n# Matplotlib settings\n\nplt.rcParams['font.family'] = 'Georgia'\nplt.rcParams['svg.fonttype'] = 'none'\nset_matplotlib_formats('retina')\nplt.rcParams['figure.dpi'] = 300\n\n# Plotnine settings (for figures)\n\np9.options.set_option('base_family', 'Georgia')\n\np9.theme_set(\n    p9.theme_bw()\n    + p9.theme(panel_grid=p9.element_blank(),\n               legend_background=p9.element_blank(),\n               panel_grid_major=p9.element_line(size=.5, linetype='dashed',\n                                                alpha=.15, color='black'),\n               plot_title=p9.element_text(ha='center'),\n               dpi=300\n    )\n)\n\n&lt;plotnine.themes.theme_bw.theme_bw at 0x16412a7d0&gt;\n\n\n\ndfs = []\nfor file in glob('../data/flight_gps/*.gpx'):\n    if 'Track' in file:\n        flight = gpxpy.parse(open(file))\n        points = []\n        for segment in flight.tracks[0].segments:\n            for p in segment.points:\n                points.append({\n                    'time': p.time,\n                    'latitude': p.latitude,\n                    'longitude': p.longitude,\n                    'elevation': p.elevation,\n                })\n        dfs.append(pd.DataFrame.from_records(points).assign(flight=file))\ndfs = (pd.concat(dfs)\n      .assign(date=lambda dd: dd.time.dt.date)\n      .groupby('date', as_index=False)\n      .apply(lambda dd: dd.assign(timedelta=dd.time - dd.time.min()))\n)\n\n\ndfs.groupby('date')\n\ndate               \n2014-02-22  0  0           NaN\n               1           NaN\n               2           NaN\n               3           NaN\n               4           NaN\n                        ...   \n2014-04-07  8  2051    818.894\n               2052        NaN\n               2053        NaN\n               2054        NaN\n               2055        NaN\nName: elevation, Length: 16483, dtype: float64\n\n\n\n2150 * 1.03\n\n2214.5\n\n\n\n(dfs\n .groupby('date')\n .apply(lambda dd: dd.assign(elevation= dd.elevation.rolling(1, center=True).mean()))\n .query('elevation &gt;= 1000')\n .pipe(lambda dd: p9.ggplot(dd) \n    + p9.aes('timedelta', 'elevation') \n    + p9.geom_line(p9.aes(group='flight'))\n    + p9.theme(figure_size=(4, 3))\n    + p9.scale_y_continuous(limits=(0, None))\n    + p9.labs(x='Time of flight', y='Elevation (m)')\n    )\n\n)\n\n\n\n\n\n\n\n\n\n(dfs\n .query('elevation &gt;= 1000')\n .groupby(['timedelta'])\n .agg(\n     median=('elevation', 'median'),\n     q025=('elevation', lambda x: x.quantile(.025)),\n     q975=('elevation', lambda x: x.quantile(.975))\n )\n .apply(lambda x: x.rolling(30, center=True).mean())\n .dropna()\n .reset_index()\n  .pipe(lambda dd: p9.ggplot(dd) \n    + p9.aes('timedelta', 'median')\n    + p9.geom_ribbon(p9.aes(ymin='q025', ymax='q975'), alpha=.5)\n    + p9.geom_line()\n    + p9.theme(figure_size=(5, 3))\n    + p9.scale_y_continuous(limits=(0, None))\n    + p9.labs(x='Sampling time', y='Elevation (m)')\n    )\n\n)\n\n\n\n\n\n\n\n\n\n(dfs\n .query('elevation &gt;= 1000')\n .pipe(lambda dd: p9.ggplot(dd) \n    + p9.aes('timedelta', 'elevation', group='date')\n    + p9.stat_summary(fun_y=np.mean, geom='line', group=1)\n    + p9.theme(figure_size=(5, 3))\n    + p9.scale_y_continuous(limits=(0, None))\n    + p9.labs(x='Sampling time', y='Elevation (m)')\n    )\n\n)\n\n\n\n\n\n\n\n\n\n(dfs\n .groupby('flight', as_index=False)\n .apply(lambda dd: dd.assign(timedelta=dd.time - dd.time.min()))\n .assign(flight=lambda dd: dd.flight.str.split('.').str[0].str[6:])\n .assign(time_since_last=lambda dd: dd.time.diff())\n .loc[lambda dd: dd['time_since_last'] &lt; pd.to_timedelta(\"10 min\")]\n .sort_values('time_since_last')\n)\n\n\n\n\n\n\n\n\n\n\ntime\nlatitude\nlongitude\nelevation\nflight\ntimedelta\ntime_since_last\n\n\n\n\n4\n4\n0\n2014-02-22 04:23:10+00:00\n35.705112\n139.693024\n992.70\n22-FEB-14 055211\n0 days 00:00:00\n-45 days +22:24:36\n\n\n7\n7\n481\n2014-02-24 03:44:29+00:00\n36.378784\n139.046143\n1934.31\n24-FEB-14 060218\n0 days 00:40:04\n0 days 00:00:04\n\n\n1\n1\n803\n2014-04-05 03:56:13+00:00\n36.350403\n138.807526\n2614.44\n05-ABR-14 063542\n0 days 01:06:52\n0 days 00:00:04\n\n\n7\n7\n620\n2014-02-24 03:56:03+00:00\n36.285625\n138.851639\n2446.69\n24-FEB-14 060218\n0 days 00:51:38\n0 days 00:00:04\n\n\n8\n8\n380\n2014-02-25 03:50:39+00:00\n35.089394\n139.429077\n1738.68\n25-FEB-14 061343\n0 days 00:31:39\n0 days 00:00:04\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n9\n9\n2023\n2014-02-26 06:13:39+00:00\n35.719494\n139.641830\n584.14\n26-FEB-14 061335\n0 days 02:48:35\n0 days 00:00:05\n\n\n3\n3\n362\n2014-04-07 03:37:29+00:00\n36.137989\n139.313309\n1494.51\n07-ABR-14 065833\n0 days 00:30:11\n0 days 00:00:06\n\n\n8\n8\n1189\n2014-02-25 04:58:05+00:00\n34.563652\n139.066391\n2512.06\n25-FEB-14 061343\n0 days 01:39:05\n0 days 00:00:06\n\n\n1212\n2014-02-25 05:00:01+00:00\n34.608448\n139.053665\n2443.33\n25-FEB-14 061343\n0 days 01:41:01\n0 days 00:00:06\n\n\n6\n6\n0\n2014-02-23 04:27:08+00:00\n36.387970\n138.302109\n2888.90\n23-FEB-14 055646\n0 days 00:00:00\n0 days 00:00:11\n\n\n\n\n16474 rows × 7 columns\n\n\n\n\nfrom datetime import timedelta\n\n\n\n\ndatetime.timedelta(seconds=3600)\n\n\n\n(dfs\n  .assign(date=lambda dd: dd.time.dt.date)\n  .sort_values('time')\n  .timedelta.dt.total_seconds() / 60\n)\n\n4  0         0.000000\n   1         0.083333\n   2         0.166667\n   3         0.250000\n   4         0.333333\n              ...    \n3  2051    170.933333\n   2052    171.016667\n   2053    171.100000\n   2054    171.183333\n   2055    171.266667\nName: timedelta, Length: 16483, dtype: float64\n\n\n\ndates = ['2014-02-22', '2014-02-23', '2014-02-24', '2014-02-25', '2014-02-26',\n         '2014-04-01', '2014-04-05', '2014-04-06', '2014-04-07', '2014-04-08']\n\nsamples = ['S01', 'S03', 'S05', 'S07', 'S09', 'S13', 'S15', 'S17', 'S19', 'S21']\n\n\nsamples_df = pd.DataFrame(dict(date=dates, sample_id=samples)).assign(date=lambda dd: pd.to_datetime(dd.date))\n\n\n(dfs\n  .assign(date=lambda dd: pd.to_datetime(dd.time.dt.date))\n  .sort_values('time')\n .groupby('date', as_index=False)\n .apply(lambda dd: dd.assign(timedelta=(dd.time - dd.time.min()).dt.total_seconds() / 60)\n         .assign(time_since_last=lambda dd: dd.timedelta.diff())\n         .loc[lambda dd: dd['time_since_last'] &lt; 10]\n        )\n .assign(flight=lambda dd: dd.flight.str.split('.').str[0].str[6:])\n .merge(samples_df, on='date')\n .assign(label=lambda dd: dd.sample_id + ': ' + dd.date.astype(str))\n .pipe(lambda dd: p9.ggplot(dd) \n    + p9.aes('timedelta', 'elevation') \n    + p9.geom_line(p9.aes(group='flight'), linetype='dashed')\n    + p9.scale_x_continuous(breaks=[0, 60, 120, 180], labels=['0', '1h', '2h', '3h'])\n    + p9.geom_point(size=0, stroke=.4)\n    + p9.labs(x='Time of flight', y='Elevation (m)')\n    + p9.facet_wrap('label')\n    + p9.theme(figure_size=(5, 4))\n    )\n\n )\n\n\n\n\n\n\n\n\n\ndf.groupby('flight')\n\n\n\n\n\n\n\n\ntime\nlatitude\nlongitude\nelevation\nflight\n\n\n\n\n0\n2014-02-23 04:27:08+00:00\n36.387970\n138.302109\n2888.90\nTrack_23-FEB-14 055646.gpx\n\n\n1\n2014-02-23 04:27:13+00:00\n36.389973\n138.300217\n2888.90\nTrack_23-FEB-14 055646.gpx\n\n\n2\n2014-02-23 04:27:18+00:00\n36.392021\n138.298401\n2897.07\nTrack_23-FEB-14 055646.gpx\n\n\n3\n2014-02-23 04:27:23+00:00\n36.393791\n138.296173\n2889.38\nTrack_23-FEB-14 055646.gpx\n\n\n4\n2014-02-23 04:27:28+00:00\n36.395164\n138.293594\n2884.57\nTrack_23-FEB-14 055646.gpx\n\n\n...\n...\n...\n...\n...\n...\n\n\n1072\n2014-02-23 05:56:28+00:00\n35.697174\n139.566299\n272.19\nTrack_23-FEB-14 055646.gpx\n\n\n1073\n2014-02-23 05:56:33+00:00\n35.697247\n139.563370\n267.86\nTrack_23-FEB-14 055646.gpx\n\n\n1074\n2014-02-23 05:56:38+00:00\n35.697376\n139.560501\n263.06\nTrack_23-FEB-14 055646.gpx\n\n\n1075\n2014-02-23 05:56:43+00:00\n35.697498\n139.557770\n263.06\nTrack_23-FEB-14 055646.gpx\n\n\n1076\n2014-02-23 05:56:48+00:00\n35.697529\n139.555206\n263.06\nTrack_23-FEB-14 055646.gpx\n\n\n\n\n1077 rows × 5 columns\n\n\n\n\nflight.tracks\n\n[GPXTrack(name='Día 01-ABR-14 07:32:12', segments=[GPXTrackSegment(points=[...])])]\n\n\n\nimport os\n\n\n\n\n['Day 07-APR-14 06.58.42.gpx',\n 'Day 22-FEB-14 04.23.10.gpx',\n 'Track_07-ABR-14 065833.gpx',\n 'Day 05-APR-14 07.54.31.gpx',\n 'Day 01-APR-14 07.32.12.gpx',\n 'Track_23-FEB-14 042655.gpx',\n 'Day 20-FEB-14 03.28.50.gpx',\n 'Day 24-FEB-14 08.43.09.gpx',\n 'Day 20-FEB-14 07.27.46.gpx',\n 'Day 25-FEB-14 06.13.54.gpx',\n 'Day 26-FEB-14 06.13.44.gpx',\n 'Track_22-FEB-14 055211.gpx',\n 'Track_24-FEB-14 060218.gpx',\n 'Day 23-FEB-14 05.56.56.gpx',\n 'Day 20-FEB-14 06.05.05.gpx',\n 'Day 06-APR-14 05.14.06.gpx',\n 'Day 08-APR-14 04.06.00.gpx',\n 'Day 20-FEB-14 02.38.48.gpx',\n 'Track_26-FEB-14 061335.gpx',\n 'Track_06-ABR-14 051353.gpx',\n 'Track_25-FEB-14 061343.gpx',\n 'Track_05-ABR-14 063542.gpx',\n 'Track_01-ABR-14 073152.gpx',\n 'Track_23-FEB-14 055646.gpx']\n\n\n\ndf\n\n\n\n\n\n\n\n\ntime\nlatitude\nlongitude\nelevation\n\n\n\n\n0\n2014-02-20 07:27:46+00:00\n35.669064\n139.530518\n52.05\n\n\n1\n2014-02-20 07:27:47+00:00\n35.669064\n139.530518\n51.57\n\n\n2\n2014-02-20 07:27:48+00:00\n35.669064\n139.530518\n51.57\n\n\n3\n2014-02-20 07:27:49+00:00\n35.669064\n139.530518\n51.57\n\n\n4\n2014-02-20 07:27:50+00:00\n35.669064\n139.530518\n51.57\n\n\n...\n...\n...\n...\n...\n\n\n8963\n2014-02-20 19:38:23+00:00\n35.650902\n139.546219\n47.72\n\n\n8964\n2014-02-20 19:38:24+00:00\n35.650883\n139.546219\n47.72\n\n\n8965\n2014-02-20 19:38:25+00:00\n35.650864\n139.546219\n47.72\n\n\n8966\n2014-02-20 19:38:26+00:00\n35.650848\n139.546219\n47.72\n\n\n8967\n2014-02-20 19:38:27+00:00\n35.650829\n139.546219\n48.20\n\n\n\n\n8968 rows × 4 columns\n\n\n\n\nworld = gpd.read_file('../data/shapefiles/ne_50m_admin_0_countries.zip')\n\n\nworld.head()\n\n\n\n\n\n\n\n\nfeaturecla\nscalerank\nLABELRANK\nSOVEREIGNT\nSOV_A3\nADM0_DIF\nLEVEL\nTYPE\nTLC\nADMIN\n...\nFCLASS_TR\nFCLASS_ID\nFCLASS_PL\nFCLASS_GR\nFCLASS_IT\nFCLASS_NL\nFCLASS_SE\nFCLASS_BD\nFCLASS_UA\ngeometry\n\n\n\n\n0\nAdmin-0 country\n1\n3\nZimbabwe\nZWE\n0\n2\nSovereign country\n1\nZimbabwe\n...\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nPOLYGON ((31.28789 -22.40205, 31.19727 -22.344...\n\n\n1\nAdmin-0 country\n1\n3\nZambia\nZMB\n0\n2\nSovereign country\n1\nZambia\n...\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nPOLYGON ((30.39609 -15.64307, 30.25068 -15.643...\n\n\n2\nAdmin-0 country\n1\n3\nYemen\nYEM\n0\n2\nSovereign country\n1\nYemen\n...\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nMULTIPOLYGON (((53.08564 16.64839, 52.58145 16...\n\n\n3\nAdmin-0 country\n3\n2\nVietnam\nVNM\n0\n2\nSovereign country\n1\nVietnam\n...\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nMULTIPOLYGON (((104.06396 10.39082, 104.08301 ...\n\n\n4\nAdmin-0 country\n5\n3\nVenezuela\nVEN\n0\n2\nSovereign country\n1\nVenezuela\n...\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nMULTIPOLYGON (((-60.82119 9.13838, -60.94141 9...\n\n\n\n\n5 rows × 169 columns\n\n\n\n\n(p9.ggplot(world.query('SOV_A3==\"JPN\"'))\n + p9.geom_map()\n + p9.geom_point(p9.aes(x='longitude', y='latitude', color='elevation'), group=1, data=df)\n )\n\n\n\n\n\n\n\n\n\ndf\n\n\n\n\n\n\n\n\ntime\nlatitude\nlongitude\nelevation\n\n\n\n\n0\n2014-04-01 06:32:12+00:00\n35.669037\n139.530243\n37.15\n\n\n1\n2014-04-01 06:32:17+00:00\n35.669025\n139.530289\n37.63\n\n\n2\n2014-04-01 06:32:22+00:00\n35.669022\n139.530334\n37.15\n\n\n3\n2014-04-01 06:32:27+00:00\n35.669014\n139.530396\n37.15\n\n\n4\n2014-04-01 06:32:32+00:00\n35.668999\n139.530426\n37.15\n\n\n5\n2014-04-01 06:32:37+00:00\n35.668987\n139.530472\n37.15\n\n\n6\n2014-04-01 06:32:42+00:00\n35.668976\n139.530502\n36.67\n\n\n7\n2014-04-01 06:32:47+00:00\n35.668915\n139.530487\n37.15\n\n\n8\n2014-04-01 06:32:52+00:00\n35.668903\n139.530472\n36.67\n\n\n9\n2014-04-01 06:32:57+00:00\n35.668896\n139.530426\n36.67\n\n\n10\n2014-04-01 06:33:02+00:00\n35.668896\n139.530396\n37.15\n\n\n11\n2014-04-01 06:33:07+00:00\n35.668907\n139.530365\n36.67\n\n\n12\n2014-04-01 06:33:12+00:00\n35.668907\n139.530365\n36.67\n\n\n13\n2014-04-01 06:33:17+00:00\n35.668907\n139.530365\n37.15\n\n\n14\n2014-04-01 06:33:22+00:00\n35.668907\n139.530365\n36.67\n\n\n15\n2014-04-01 06:33:27+00:00\n35.668907\n139.530365\n36.67\n\n\n16\n2014-04-01 06:33:32+00:00\n35.668919\n139.530350\n36.67\n\n\n17\n2014-04-01 06:33:37+00:00\n35.668926\n139.530304\n36.67\n\n\n18\n2014-04-01 06:33:42+00:00\n35.668941\n139.530212\n36.67\n\n\n19\n2014-04-01 06:33:45+00:00\n35.668941\n139.530197\n36.67"
  },
  {
    "objectID": "microbial_diversity_analysis.html",
    "href": "microbial_diversity_analysis.html",
    "title": "Microbial Richness in the Troposphere: Appeal Reanalysis",
    "section": "",
    "text": "Click to show library imports and pre-sets\n\n\n\n\n\n\nimport numpy as np\nimport pandas as pd\nimport plotnine as p9\nfrom itertools import product\nimport skbio.diversity as div\nfrom skbio import DistanceMatrix\nfrom skbio.stats.distance import permanova\nfrom IPython.display import Image\nimport matplotlib.pyplot as plt\nfrom mizani.formatters import percent_format\nfrom matplotlib_inline.backend_inline import set_matplotlib_formats\n\n\n\n\n\n# Matplotlib settings\nfrom matplotlib_inline.backend_inline import set_matplotlib_formats\nplt.rcParams['svg.fonttype'] = 'none'\nset_matplotlib_formats('retina')\nplt.rcParams['figure.dpi'] = 300\n# Plotnine settings (for figures)\np9.theme_set(\n    p9.theme_bw()\n    + p9.theme(panel_grid=p9.element_blank(),\n               legend_background=p9.element_blank(),\n               panel_grid_major=p9.element_line(size=.5, linetype='dashed',\n                                                alpha=.15, color='black'),\n               dpi=300\n    )\n)\n\n\nbac_df = (pd.read_csv(\n    '../data/nov23/16S/Boostraping RDP_NBC_90/reduced_16S_genus_(ASV+taxonomy+S1-S22)_90_NB.csv')\n          .query('Order != \"Chloroplast\"')\n          .query('Kingdom.notna()')\n)\n\n\nsample_columns = bac_df.columns[6:]\nzfill_map = {s: 'S' + s[1:].zfill(2) for s in sample_columns}\nsample_columns = sample_columns.map(zfill_map)\n\n\ntaxon_names = [\n    'Kingdom', \n    'Phylum', \n    'Class', \n    'Order', \n    'Family', \n    'Genus']\n\ntaxon_plurals = {\n    'Phylum': 'Phyla',\n    'Class': 'Classes',\n    'Order': 'Orders',\n    'Family': 'Families',\n    'Genus': 'Genera'}\n\n\nbac_df = bac_df.rename(columns=zfill_map).fillna('unknown')\n\n\nfun_df = (pd.read_csv('../data/nov23/ITS/bootstrap90/reduced_ITS_genus_(ASV+taxonomy+S1-S22)_90_NB.csv')\n          .query('Kingdom == \"k__Fungi\"')\n)\nfun_df[taxon_names] = fun_df[taxon_names].apply(lambda x: x.str.split('__').str[-1])\nfun_df = fun_df.rename(columns=zfill_map).fillna('unknown')\n\n\nabundance_df_genera = pd.concat([bac_df, fun_df])\n\n\nsamples_info = (pd.read_csv('../data/samples_info.csv')\n        .assign(sample_id = lambda dd:  \"S\" + dd.sample_id.str[-2:])\n)\n\n\ninconclusive_list = ['unknown',\n                     'Cystobasidiomycetes_ord_Incertae_sedis',\n                     'uncultured bacterium', 'uncultured',\n                     'uncultured Armatimonadetes bacterium',\n                     'uncultured phototrophic eukaryote',\n                     'Ambiguous_taxa',\n                     'Hypocreales_fam_Incertae_sedis',\n                     'Polyporales_fam_Incertae_sedis',\n                     'Medicago truncatula (barrel medic)',\n                     'Cantharellales_fam_Incertae_sedis',\n                     'Russulales_fam_Incertae_sedis',\n                     'uncultured Chloroflexi bacterium',\n                     'uncultured soil bacterium',\n                     'uncultured Chlorophyta',\n                     'Pleosporales_fam_Incertae_sedis',\n                     'Xylariales_fam_Incertae_sedis',\n                     'Hymenochaetales_fam_Incertae_sedis',\n                     'Entylomatales_fam_Incertae_sedis',\n                     'Saccharomycetales_fam_Incertae_sedis',\n                     'Phytophthora lateralis MPF4',\n                     'Helotiales_fam_Incertae_sedis',\n                     'candidate division SR1 bacterium taxon 345',\n                     'Neo-b11',\n                     'gut',\n                     'candidate',\n                     'Chloroplast'\n                     ]\n\n\n(abundance_df_genera\n .replace('unknown', np.nan)\n .assign(total_counts=lambda dd: dd[sample_columns].sum(axis=1))\n .query('total_counts &gt; 0')\n .assign(Genus=lambda dd: \n         np.where(dd['Genus'].isin(inconclusive_list), np.nan, dd['Genus']))\n .drop(columns='total_counts')\n .melt(id_vars=taxon_names, var_name='sample_id')\n .merge(samples_info, on='sample_id')\n .assign(date=lambda dd: pd.to_datetime(dd.date))\n .assign(month=lambda dd: dd.date.dt.month_name())\n .query('value &gt; 0')\n .query('month==\"February\"')\n .groupby(['Kingdom'])\n .apply(lambda dd: dd[taxon_names[1:]].nunique())\n .T\n)\n\n\n\n\n\n\n\nKingdom\nBacteria\nFungi\n\n\n\n\nPhylum\n17\n2\n\n\nClass\n34\n19\n\n\nOrder\n72\n60\n\n\nFamily\n110\n155\n\n\nGenus\n160\n234\n\n\n\n\n\n\n\n\nabundance_df_phyla = (abundance_df_genera\n .groupby(['Kingdom', 'Phylum'])\n [sample_columns]\n .sum()\n .astype(int)\n .reset_index()\n)\n\n\nabundance_df_phyla\n\n\n\n\n\n\n\n\nKingdom\nPhylum\nS01\nS02\nS03\nS04\nS05\nS06\nS07\nS08\n...\nS12\nS13\nS15\nS16\nS17\nS18\nS19\nS20\nS21\nS22\n\n\n\n\n0\nBacteria\nAcidobacteriota\n9\n9\n423\n4\n6\n0\n0\n0\n...\n11\n11\n0\n0\n0\n0\n64\n0\n0\n0\n\n\n1\nBacteria\nActinobacteriota\n508\n282\n457\n101\n144\n138\n182\n39\n...\n168\n396\n78\n246\n45\n696\n438\n493\n678\n423\n\n\n2\nBacteria\nArmatimonadota\n5\n0\n77\n0\n0\n11\n0\n0\n...\n0\n0\n0\n5\n0\n0\n0\n0\n0\n0\n\n\n3\nBacteria\nBacteroidota\n401\n54\n385\n6\n13\n14\n0\n8\n...\n62\n3135\n1134\n2685\n664\n3930\n3635\n3338\n8735\n2549\n\n\n4\nBacteria\nCampylobacterota\n6\n4\n0\n0\n0\n0\n0\n0\n...\n0\n19\n0\n44\n0\n0\n33\n32\n98\n9\n\n\n5\nBacteria\nChloroflexi\n11\n0\n23\n0\n0\n0\n6\n0\n...\n0\n0\n0\n0\n0\n0\n38\n0\n0\n0\n\n\n6\nBacteria\nCyanobacteria\n0\n11\n0\n0\n0\n9\n0\n0\n...\n0\n49\n11\n33\n0\n0\n13\n36\n94\n0\n\n\n7\nBacteria\nDeinococcota\n6\n0\n0\n0\n0\n0\n0\n0\n...\n38\n19\n12\n0\n0\n0\n0\n0\n0\n0\n\n\n8\nBacteria\nDependentiae\n0\n0\n0\n0\n0\n10\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n9\nBacteria\nDesulfobacterota\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n59\n0\n66\n0\n177\n0\n25\n124\n25\n\n\n10\nBacteria\nFirmicutes\n1712\n449\n720\n189\n185\n191\n218\n120\n...\n190\n5332\n2430\n4700\n1165\n8791\n7617\n7467\n17434\n6486\n\n\n11\nBacteria\nFusobacteriota\n0\n13\n0\n0\n0\n10\n0\n0\n...\n0\n37\n30\n18\n9\n151\n54\n28\n167\n48\n\n\n12\nBacteria\nGemmatimonadota\n0\n16\n0\n0\n0\n0\n0\n0\n...\n0\n5\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n13\nBacteria\nMyxococcota\n0\n0\n0\n0\n0\n26\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n\n\n14\nBacteria\nPatescibacteria\n75\n0\n3\n0\n0\n2\n0\n6\n...\n3\n9\n0\n0\n0\n0\n9\n0\n3\n0\n\n\n15\nBacteria\nPlanctomycetota\n18\n0\n64\n6\n0\n7\n0\n5\n...\n4\n0\n0\n0\n0\n0\n0\n15\n0\n0\n\n\n16\nBacteria\nProteobacteria\n163942\n163508\n167209\n80363\n67083\n64785\n47424\n40914\n...\n63862\n51290\n42165\n54696\n27010\n86805\n77241\n42186\n33958\n64411\n\n\n17\nBacteria\nVerrucomicrobiota\n24\n0\n50\n0\n0\n7\n0\n0\n...\n0\n96\n0\n40\n0\n120\n93\n118\n201\n86\n\n\n18\nBacteria\nunknown\n6\n0\n2\n2\n5\n0\n2\n0\n...\n2\n258\n159\n300\n39\n369\n381\n257\n683\n237\n\n\n19\nFungi\nAscomycota\n161470\n168168\n259986\n104351\n111155\n0\n108411\n75315\n...\n49801\n45344\n146977\n73190\n41023\n41262\n62190\n66732\n114059\n109389\n\n\n20\nFungi\nBasidiomycota\n12998\n13292\n24392\n8527\n7078\n0\n4612\n12230\n...\n4712\n3255\n6415\n4777\n1346\n18650\n6893\n27544\n13425\n28489\n\n\n21\nFungi\nunknown\n403\n929\n1581\n0\n63\n0\n0\n0\n...\n424\n326\n3808\n0\n0\n0\n305\n482\n0\n0\n\n\n\n\n22 rows × 23 columns\n\n\n\n\nabundance_df_genera.to_csv('../data/nov23/16S/Boostraping RDP_NBC_90/full_abundance_genera.csv', index=False)\nabundance_df_phyla.to_csv('../data/nov23/16S/Boostraping RDP_NBC_90/full_abundance_phyla.csv', index=False)\n\n\nonly_assigned_bac_df = bac_df.query('Genus.notna()')\n\n\nshannon_only_assigned = (div.alpha_diversity(metric='shannon',\n                    counts=only_assigned_bac_df[sample_columns].T.values,\n                    ids=sample_columns\n                    ).rename('shannon_only_assigned')\n)\n\nshannon_all = (div.alpha_diversity(metric='shannon',\n                    counts=bac_df[sample_columns].T.values,\n                    ids=sample_columns\n                    ).rename('shannon_all')\n)\n\nchao_only_assigned = (div.alpha_diversity(metric='chao1',\n                    counts=only_assigned_bac_df[sample_columns].T.values,\n                    ids=sample_columns\n                    ).rename('chao_only_assigned')\n)\n\nchao_all = (div.alpha_diversity(metric='chao1',\n                    counts=bac_df[sample_columns].T.values,\n                    ids=sample_columns\n                    ).rename('chao_all')\n)\n\n\n(shannon_all\n .reset_index()\n .merge(shannon_only_assigned.reset_index())\n .assign(index=lambda df: 'S' + df['index'].str[1:].str.zfill(2))\n .melt(id_vars='index')\n .replace({'shannon_all': 'Keeping all unassigned as different',\n           'shannon_only_assigned': 'Dropping unassigned genera'})\n .pipe(lambda dd: p9.ggplot(dd) + p9.aes(x='index', y='value', fill='variable')\n       + p9.geom_col(position='dodge')\n       + p9.theme(legend_position=(.5, .875),\n                  figure_size=(6, 3)\n                  )\n       + p9.labs(x='', y='Shannon diversity', fill='')\n       )\n)\n\n\n\n\n\n\n\n\n\nshannon_16s = (abundance_df_genera\n .query('Kingdom==\"Bacteria\"')\n .query('Genus!=\"unknown\"')\n .pipe(lambda dd: div.alpha_diversity(metric='shannon',\n                                      counts=dd[sample_columns].T.values,\n                    ids=sample_columns\n                    ).rename('shannon')\n )\n .reset_index()\n .rename(columns={'index': 'sample_id'})\n .assign(source='16S')\n)\n\nshannon_its = (abundance_df_genera\n    .query('Kingdom==\"Fungi\"')\n    .query('Genus!=\"unknown\"')\n    .drop(columns='S06')\n    .pipe(lambda dd: div.alpha_diversity(metric='shannon',\n          counts=dd[[col for col in sample_columns if col != 'S06']].T.values,\n                        ids=[col for col in sample_columns if col != 'S06']\n                        ).rename('shannon')\n    )\n    .reset_index()\n    .rename(columns={'index': 'sample_id'})\n    .assign(source='ITS')\n    )\n\nchao_16s = (abundance_df_genera\n    .query('Kingdom==\"Bacteria\"')\n    .query('Genus!=\"unknown\"')\n    .pipe(lambda dd: div.alpha_diversity(metric='chao1',\n                                        counts=dd[sample_columns].T.values,\n                        ids=sample_columns\n                        ).rename('chao')\n    )\n    .reset_index()\n    .rename(columns={'index': 'sample_id'})\n    .assign(source='16S')\n    )\n\nchao_its = (abundance_df_genera\n    .query('Kingdom==\"Fungi\"')\n    .drop(columns='S06')\n    .query('Genus!=\"unknown\"')\n    .pipe(lambda dd: div.alpha_diversity(metric='chao1',\n            counts=dd[[col for col in sample_columns if col != 'S06']].T.values,\n                        ids=[col for col in sample_columns if col != 'S06']\n                        ).rename('chao')\n    )\n    .reset_index()\n    .rename(columns={'index': 'sample_id'})\n    .assign(source='ITS')\n    )\n\n\ndiversity_df = pd.concat(\n    [chao_16s.merge(shannon_16s),\n     chao_its.merge(shannon_its)]\n)     [['sample_id', 'chao', 'shannon', 'source']]\n\ndiversity_df.to_csv('../data/nov23/16S/Boostraping RDP_NBC_90/diversity_df.csv', index=False)\n\n\n(chao_all\n .reset_index()\n .merge(chao_only_assigned.reset_index())\n .assign(index=lambda df: 'S' + df['index'].str[1:].str.zfill(2))\n .melt(id_vars='index')\n .replace({'chao_all': 'Keeping all unassigned as different',\n           'chao_only_assigned': 'Dropping unassigned genera'})\n .pipe(lambda dd: p9.ggplot(dd) + p9.aes(x='index', y='value', fill='variable')\n       + p9.geom_col(position='dodge')\n       + p9.theme(legend_position=(.5, .9),\n                  figure_size=(6, 3)\n                  )\n       + p9.labs(x='', y='CHAO1 diversity', fill='')\n       )\n)"
  },
  {
    "objectID": "microbial_diversity_analysis.html#preamble",
    "href": "microbial_diversity_analysis.html#preamble",
    "title": "Microbial Richness in the Troposphere: Appeal Reanalysis",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport plotnine as p9\nfrom itertools import product\nimport skbio.diversity as div\nfrom skbio import DistanceMatrix\nfrom skbio.stats.distance import permanova\nfrom IPython.display import Image\nimport matplotlib.pyplot as plt\nfrom mizani.formatters import percent_format\nfrom matplotlib_inline.backend_inline import set_matplotlib_formats\n\n\n\n\n\n# Matplotlib settings\nfrom matplotlib_inline.backend_inline import set_matplotlib_formats\nplt.rcParams['svg.fonttype'] = 'none'\nset_matplotlib_formats('retina')\nplt.rcParams['figure.dpi'] = 300\n# Plotnine settings (for figures)\np9.theme_set(\n    p9.theme_bw()\n    + p9.theme(panel_grid=p9.element_blank(),\n               legend_background=p9.element_blank(),\n               panel_grid_major=p9.element_line(size=.5, linetype='dashed',\n                                                alpha=.15, color='black'),\n               dpi=300\n    )\n)\n\n\nbac_df = (pd.read_csv(\n    '../data/nov23/16S/Boostraping RDP_NBC_90/reduced_16S_genus_(ASV+taxonomy+S1-S22)_90_NB.csv')\n          .query('Order != \"Chloroplast\"')\n          .query('Kingdom.notna()')\n)\n\n\nsample_columns = bac_df.columns[6:]\nzfill_map = {s: 'S' + s[1:].zfill(2) for s in sample_columns}\nsample_columns = sample_columns.map(zfill_map)\n\n\ntaxon_names = [\n    'Kingdom', \n    'Phylum', \n    'Class', \n    'Order', \n    'Family', \n    'Genus']\n\ntaxon_plurals = {\n    'Phylum': 'Phyla',\n    'Class': 'Classes',\n    'Order': 'Orders',\n    'Family': 'Families',\n    'Genus': 'Genera'}\n\n\nbac_df = bac_df.rename(columns=zfill_map).fillna('unknown')\n\n\nfun_df = (pd.read_csv('../data/nov23/ITS/bootstrap90/reduced_ITS_genus_(ASV+taxonomy+S1-S22)_90_NB.csv')\n          .query('Kingdom == \"k__Fungi\"')\n)\nfun_df[taxon_names] = fun_df[taxon_names].apply(lambda x: x.str.split('__').str[-1])\nfun_df = fun_df.rename(columns=zfill_map).fillna('unknown')\n\n\nabundance_df_genera = pd.concat([bac_df, fun_df])\n\n\nsamples_info = (pd.read_csv('../data/samples_info.csv')\n        .assign(sample_id = lambda dd:  \"S\" + dd.sample_id.str[-2:])\n)\n\n\ninconclusive_list = ['unknown',\n                     'Cystobasidiomycetes_ord_Incertae_sedis',\n                     'uncultured bacterium', 'uncultured',\n                     'uncultured Armatimonadetes bacterium',\n                     'uncultured phototrophic eukaryote',\n                     'Ambiguous_taxa',\n                     'Hypocreales_fam_Incertae_sedis',\n                     'Polyporales_fam_Incertae_sedis',\n                     'Medicago truncatula (barrel medic)',\n                     'Cantharellales_fam_Incertae_sedis',\n                     'Russulales_fam_Incertae_sedis',\n                     'uncultured Chloroflexi bacterium',\n                     'uncultured soil bacterium',\n                     'uncultured Chlorophyta',\n                     'Pleosporales_fam_Incertae_sedis',\n                     'Xylariales_fam_Incertae_sedis',\n                     'Hymenochaetales_fam_Incertae_sedis',\n                     'Entylomatales_fam_Incertae_sedis',\n                     'Saccharomycetales_fam_Incertae_sedis',\n                     'Phytophthora lateralis MPF4',\n                     'Helotiales_fam_Incertae_sedis',\n                     'candidate division SR1 bacterium taxon 345',\n                     'Neo-b11',\n                     'gut',\n                     'candidate',\n                     'Chloroplast'\n                     ]\n\n\n(abundance_df_genera\n .replace('unknown', np.nan)\n .assign(total_counts=lambda dd: dd[sample_columns].sum(axis=1))\n .query('total_counts &gt; 0')\n .assign(Genus=lambda dd: \n         np.where(dd['Genus'].isin(inconclusive_list), np.nan, dd['Genus']))\n .drop(columns='total_counts')\n .melt(id_vars=taxon_names, var_name='sample_id')\n .merge(samples_info, on='sample_id')\n .assign(date=lambda dd: pd.to_datetime(dd.date))\n .assign(month=lambda dd: dd.date.dt.month_name())\n .query('value &gt; 0')\n .query('month==\"February\"')\n .groupby(['Kingdom'])\n .apply(lambda dd: dd[taxon_names[1:]].nunique())\n .T\n)\n\n\n\n\n\n\n\nKingdom\nBacteria\nFungi\n\n\n\n\nPhylum\n17\n2\n\n\nClass\n34\n19\n\n\nOrder\n72\n60\n\n\nFamily\n110\n155\n\n\nGenus\n160\n234\n\n\n\n\n\n\n\n\nabundance_df_phyla = (abundance_df_genera\n .groupby(['Kingdom', 'Phylum'])\n [sample_columns]\n .sum()\n .astype(int)\n .reset_index()\n)\n\n\nabundance_df_phyla\n\n\n\n\n\n\n\n\nKingdom\nPhylum\nS01\nS02\nS03\nS04\nS05\nS06\nS07\nS08\n...\nS12\nS13\nS15\nS16\nS17\nS18\nS19\nS20\nS21\nS22\n\n\n\n\n0\nBacteria\nAcidobacteriota\n9\n9\n423\n4\n6\n0\n0\n0\n...\n11\n11\n0\n0\n0\n0\n64\n0\n0\n0\n\n\n1\nBacteria\nActinobacteriota\n508\n282\n457\n101\n144\n138\n182\n39\n...\n168\n396\n78\n246\n45\n696\n438\n493\n678\n423\n\n\n2\nBacteria\nArmatimonadota\n5\n0\n77\n0\n0\n11\n0\n0\n...\n0\n0\n0\n5\n0\n0\n0\n0\n0\n0\n\n\n3\nBacteria\nBacteroidota\n401\n54\n385\n6\n13\n14\n0\n8\n...\n62\n3135\n1134\n2685\n664\n3930\n3635\n3338\n8735\n2549\n\n\n4\nBacteria\nCampylobacterota\n6\n4\n0\n0\n0\n0\n0\n0\n...\n0\n19\n0\n44\n0\n0\n33\n32\n98\n9\n\n\n5\nBacteria\nChloroflexi\n11\n0\n23\n0\n0\n0\n6\n0\n...\n0\n0\n0\n0\n0\n0\n38\n0\n0\n0\n\n\n6\nBacteria\nCyanobacteria\n0\n11\n0\n0\n0\n9\n0\n0\n...\n0\n49\n11\n33\n0\n0\n13\n36\n94\n0\n\n\n7\nBacteria\nDeinococcota\n6\n0\n0\n0\n0\n0\n0\n0\n...\n38\n19\n12\n0\n0\n0\n0\n0\n0\n0\n\n\n8\nBacteria\nDependentiae\n0\n0\n0\n0\n0\n10\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n9\nBacteria\nDesulfobacterota\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n59\n0\n66\n0\n177\n0\n25\n124\n25\n\n\n10\nBacteria\nFirmicutes\n1712\n449\n720\n189\n185\n191\n218\n120\n...\n190\n5332\n2430\n4700\n1165\n8791\n7617\n7467\n17434\n6486\n\n\n11\nBacteria\nFusobacteriota\n0\n13\n0\n0\n0\n10\n0\n0\n...\n0\n37\n30\n18\n9\n151\n54\n28\n167\n48\n\n\n12\nBacteria\nGemmatimonadota\n0\n16\n0\n0\n0\n0\n0\n0\n...\n0\n5\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n13\nBacteria\nMyxococcota\n0\n0\n0\n0\n0\n26\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n\n\n14\nBacteria\nPatescibacteria\n75\n0\n3\n0\n0\n2\n0\n6\n...\n3\n9\n0\n0\n0\n0\n9\n0\n3\n0\n\n\n15\nBacteria\nPlanctomycetota\n18\n0\n64\n6\n0\n7\n0\n5\n...\n4\n0\n0\n0\n0\n0\n0\n15\n0\n0\n\n\n16\nBacteria\nProteobacteria\n163942\n163508\n167209\n80363\n67083\n64785\n47424\n40914\n...\n63862\n51290\n42165\n54696\n27010\n86805\n77241\n42186\n33958\n64411\n\n\n17\nBacteria\nVerrucomicrobiota\n24\n0\n50\n0\n0\n7\n0\n0\n...\n0\n96\n0\n40\n0\n120\n93\n118\n201\n86\n\n\n18\nBacteria\nunknown\n6\n0\n2\n2\n5\n0\n2\n0\n...\n2\n258\n159\n300\n39\n369\n381\n257\n683\n237\n\n\n19\nFungi\nAscomycota\n161470\n168168\n259986\n104351\n111155\n0\n108411\n75315\n...\n49801\n45344\n146977\n73190\n41023\n41262\n62190\n66732\n114059\n109389\n\n\n20\nFungi\nBasidiomycota\n12998\n13292\n24392\n8527\n7078\n0\n4612\n12230\n...\n4712\n3255\n6415\n4777\n1346\n18650\n6893\n27544\n13425\n28489\n\n\n21\nFungi\nunknown\n403\n929\n1581\n0\n63\n0\n0\n0\n...\n424\n326\n3808\n0\n0\n0\n305\n482\n0\n0\n\n\n\n\n22 rows × 23 columns\n\n\n\n\nabundance_df_genera.to_csv('../data/nov23/16S/Boostraping RDP_NBC_90/full_abundance_genera.csv', index=False)\nabundance_df_phyla.to_csv('../data/nov23/16S/Boostraping RDP_NBC_90/full_abundance_phyla.csv', index=False)\n\n\nonly_assigned_bac_df = bac_df.query('Genus.notna()')\n\n\nshannon_only_assigned = (div.alpha_diversity(metric='shannon',\n                    counts=only_assigned_bac_df[sample_columns].T.values,\n                    ids=sample_columns\n                    ).rename('shannon_only_assigned')\n)\n\nshannon_all = (div.alpha_diversity(metric='shannon',\n                    counts=bac_df[sample_columns].T.values,\n                    ids=sample_columns\n                    ).rename('shannon_all')\n)\n\nchao_only_assigned = (div.alpha_diversity(metric='chao1',\n                    counts=only_assigned_bac_df[sample_columns].T.values,\n                    ids=sample_columns\n                    ).rename('chao_only_assigned')\n)\n\nchao_all = (div.alpha_diversity(metric='chao1',\n                    counts=bac_df[sample_columns].T.values,\n                    ids=sample_columns\n                    ).rename('chao_all')\n)\n\n\n(shannon_all\n .reset_index()\n .merge(shannon_only_assigned.reset_index())\n .assign(index=lambda df: 'S' + df['index'].str[1:].str.zfill(2))\n .melt(id_vars='index')\n .replace({'shannon_all': 'Keeping all unassigned as different',\n           'shannon_only_assigned': 'Dropping unassigned genera'})\n .pipe(lambda dd: p9.ggplot(dd) + p9.aes(x='index', y='value', fill='variable')\n       + p9.geom_col(position='dodge')\n       + p9.theme(legend_position=(.5, .875),\n                  figure_size=(6, 3)\n                  )\n       + p9.labs(x='', y='Shannon diversity', fill='')\n       )\n)\n\n\n\n\n\n\n\n\n\nshannon_16s = (abundance_df_genera\n .query('Kingdom==\"Bacteria\"')\n .query('Genus!=\"unknown\"')\n .pipe(lambda dd: div.alpha_diversity(metric='shannon',\n                                      counts=dd[sample_columns].T.values,\n                    ids=sample_columns\n                    ).rename('shannon')\n )\n .reset_index()\n .rename(columns={'index': 'sample_id'})\n .assign(source='16S')\n)\n\nshannon_its = (abundance_df_genera\n    .query('Kingdom==\"Fungi\"')\n    .query('Genus!=\"unknown\"')\n    .drop(columns='S06')\n    .pipe(lambda dd: div.alpha_diversity(metric='shannon',\n          counts=dd[[col for col in sample_columns if col != 'S06']].T.values,\n                        ids=[col for col in sample_columns if col != 'S06']\n                        ).rename('shannon')\n    )\n    .reset_index()\n    .rename(columns={'index': 'sample_id'})\n    .assign(source='ITS')\n    )\n\nchao_16s = (abundance_df_genera\n    .query('Kingdom==\"Bacteria\"')\n    .query('Genus!=\"unknown\"')\n    .pipe(lambda dd: div.alpha_diversity(metric='chao1',\n                                        counts=dd[sample_columns].T.values,\n                        ids=sample_columns\n                        ).rename('chao')\n    )\n    .reset_index()\n    .rename(columns={'index': 'sample_id'})\n    .assign(source='16S')\n    )\n\nchao_its = (abundance_df_genera\n    .query('Kingdom==\"Fungi\"')\n    .drop(columns='S06')\n    .query('Genus!=\"unknown\"')\n    .pipe(lambda dd: div.alpha_diversity(metric='chao1',\n            counts=dd[[col for col in sample_columns if col != 'S06']].T.values,\n                        ids=[col for col in sample_columns if col != 'S06']\n                        ).rename('chao')\n    )\n    .reset_index()\n    .rename(columns={'index': 'sample_id'})\n    .assign(source='ITS')\n    )\n\n\ndiversity_df = pd.concat(\n    [chao_16s.merge(shannon_16s),\n     chao_its.merge(shannon_its)]\n)     [['sample_id', 'chao', 'shannon', 'source']]\n\ndiversity_df.to_csv('../data/nov23/16S/Boostraping RDP_NBC_90/diversity_df.csv', index=False)\n\n\n(chao_all\n .reset_index()\n .merge(chao_only_assigned.reset_index())\n .assign(index=lambda df: 'S' + df['index'].str[1:].str.zfill(2))\n .melt(id_vars='index')\n .replace({'chao_all': 'Keeping all unassigned as different',\n           'chao_only_assigned': 'Dropping unassigned genera'})\n .pipe(lambda dd: p9.ggplot(dd) + p9.aes(x='index', y='value', fill='variable')\n       + p9.geom_col(position='dodge')\n       + p9.theme(legend_position=(.5, .9),\n                  figure_size=(6, 3)\n                  )\n       + p9.labs(x='', y='CHAO1 diversity', fill='')\n       )\n)"
  },
  {
    "objectID": "microbial_diversity_analysis.html#data-loading-and-wrangling",
    "href": "microbial_diversity_analysis.html#data-loading-and-wrangling",
    "title": "Microbial Richness in the Troposphere: Appeal Reanalysis",
    "section": "Data Loading and Wrangling",
    "text": "Data Loading and Wrangling\n\nabundance_long_genera = (abundance_df_genera\n      .melt(id_vars=taxon_names,\n            var_name='sample_id',\n            value_name='counts')\n)\n\nabundance_long_phyla = (abundance_df_phyla\n        .melt(id_vars=taxon_names[:2],\n                var_name='sample_id',\n                value_name='counts')\n)"
  },
  {
    "objectID": "microbial_diversity_analysis.html#analysis-figures",
    "href": "microbial_diversity_analysis.html#analysis-figures",
    "title": "Microbial Richness in the Troposphere: Appeal Reanalysis",
    "section": "Analysis & Figures",
    "text": "Analysis & Figures\n\nSampling Schedule\n\n\nShow Code\nf = (samples_info\n.assign(date=lambda dd: pd.to_datetime(dd.date))\n .assign(weekday=lambda dd: dd.date.dt.weekday)\n .assign(week=lambda dd: dd.date.dt.isocalendar().week)\n .assign(week=lambda dd: np.where(dd.sample_mode=='Flight', dd.week -.25, dd.week + .25))\n .assign(week=lambda dd: np.where(dd.sample_id=='S11', dd.week - .5, dd.week).astype(float))\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('weekday', 'week')\n       + p9.geom_tile(p9.aes(fill='sample_mode'), color='black')\n       + p9.geom_text(p9.aes(label='sample_id'), size=9, nudge_y=-.05)\n       + p9.scale_y_reverse(labels=['02/17-02/23', '02/24-03/02',\n                                    '03/03-03/09', '03/10-03/16',\n                                    '03/17-03/23', '03/24-03/30',\n                                    '03/31-04/06', '04/07-04/13'], \n                            breaks=range(8, 16))\n       + p9.scale_x_continuous(labels=['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n                               breaks=[0, 1, 2, 3, 4, 5, 6])\n       + p9.labs(x='', y='', title='Sampling Schedule (2014)', fill='')\n       + p9.theme(figure_size=(4, 3),\n                  plot_title=p9.element_text(ha='center'),\n                  legend_position=(.6, .51),\n                  )\n      )\n)\n\nf.save('../output/figures/sampling_schedule.svg')\nf\n\n\n\n\n\n\n\n\n\n\n\nAbundance comparisons\n\nRead Count boxplots (Flight vs Ground)\n\n\nShow Code\nf = (abundance_long_phyla\n .groupby(['Kingdom', 'sample_id'])\n ['counts']\n .sum()\n .reset_index()\n .merge(samples_info)\n .query('counts &gt; 0')\n .pipe(lambda dd: p9.ggplot(dd)\n    + p9.aes('sample_mode', 'counts.astype(float)', fill='sample_mode')\n    + p9.facet_wrap('Kingdom')\n    + p9.geom_boxplot(outlier_alpha=0, alpha=.7)\n    + p9.geom_point(alpha=.5, color='black', fill='black')\n    + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n    + p9.labs(x='', y='Read Counts')\n    + p9.guides(fill=False)\n    + p9.theme(figure_size=(5, 2))\n )\n )\nf.save('../output/figures/abundance_by_sample_type.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\n\n\nRead Counts per sample type and date\n\n\nShow Code\nf = (abundance_long_phyla\n .groupby(['Kingdom', 'sample_id'])\n ['counts']\n .sum()\n .reset_index()\n .merge(samples_info)\n .assign(date_label=lambda dd: pd.to_datetime(dd.date).dt.strftime('%m/%d'))\n    .pipe(lambda dd: p9.ggplot(dd)\n  + p9.aes('date_label', 'counts.astype(float)', fill='Kingdom')\n  + p9.facet_wrap('sample_mode', ncol=1)\n  + p9.geom_col(position='dodge')\n  + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n  + p9.labs(x='', y='Read Counts', fill='')\n  + p9.theme(legend_position=(.55, .8),\n             figure_size=(7, 3),\n             legend_key_size=8,\n             )\n    )\n)\n\nf.save('../output/figures/abundance_by_sample_type_time.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\n\n\nTotal counts per Phylum\n\n\nShow Code\n(abundance_long_phyla\n .groupby(['Kingdom', 'Phylum'])\n .counts\n .sum()\n .sort_values(ascending=False)\n .loc[lambda x: x &gt; 0]\n .reset_index()\n .style\n .hide(axis='index')\n .apply(lambda row: ['color: #435B97'] * len(row)   if 'Fungi' in row.Kingdom else\n        ['color: #D3894C'] * len(row), axis=1)\n .background_gradient(cmap='viridis')\n .applymap(lambda x: 'color: red' if x=='unknown' else '')\n)\n\n\n\n\n\n\n\nKingdom\nPhylum\ncounts\n\n\n\n\nFungi\nAscomycota\n1964855\n\n\nBacteria\nProteobacteria\n1562108\n\n\nFungi\nBasidiomycota\n222314\n\n\nBacteria\nFirmicutes\n66403\n\n\nBacteria\nBacteroidota\n30860\n\n\nFungi\nunknown\n9247\n\n\nBacteria\nActinobacteriota\n6048\n\n\nBacteria\nunknown\n2702\n\n\nBacteria\nVerrucomicrobiota\n835\n\n\nBacteria\nAcidobacteriota\n581\n\n\nBacteria\nFusobacteriota\n565\n\n\nBacteria\nDesulfobacterota\n476\n\n\nBacteria\nCyanobacteria\n273\n\n\nBacteria\nCampylobacterota\n245\n\n\nBacteria\nChloroflexi\n123\n\n\nBacteria\nPlanctomycetota\n119\n\n\nBacteria\nPatescibacteria\n110\n\n\nBacteria\nArmatimonadota\n98\n\n\nBacteria\nDeinococcota\n79\n\n\nBacteria\nMyxococcota\n28\n\n\nBacteria\nGemmatimonadota\n27\n\n\nBacteria\nDependentiae\n10\n\n\n\n\n\n\n\n\nMetagenomics identification rate\nHere we are going to take a look at the rate at which the different samples have been resolved up to the Genus level.\n\n\nShow Code\nreads_per_source = (abundance_long_genera\n .merge(samples_info)\n .query('counts &gt; 0')\n .groupby(['Kingdom' , 'sample_mode'], as_index=False)\n .counts.sum()\n)\n\nidentification_df = \\\n(abundance_long_genera\n .merge(samples_info)\n .query('counts &gt; 0')\n .groupby(taxon_names + ['sample_mode'], as_index=False)\n .counts.sum()\n .groupby(['Kingdom', 'sample_mode'])\n .apply(lambda dd: dd.assign(relative_abundance= dd.counts / dd.counts.sum()))\n .melt(['Kingdom', 'sample_mode', 'counts', 'relative_abundance'])\n .query('value == \"unknown\"')\n .assign(variable=lambda dd: pd.Categorical(dd.variable, categories=taxon_names, ordered=True))\n .groupby(['Kingdom', 'sample_mode', 'variable'])\n .relative_abundance.sum()\n .rename('freq')\n .astype(float)\n .reset_index()\n .assign(rate_discovered=lambda dd: 1 - dd.freq)\n .groupby(['Kingdom', 'sample_mode'])\n .apply(lambda dd: dd\n .assign(rate_diff=dd.rate_discovered.diff().shift(-1) * -1)\n .assign(rate_diff=lambda ddd: \n         np.where(ddd.rate_diff.isna(), ddd.rate_discovered, ddd.rate_diff)))\n )\n\n\nIf we go by maximum depth of identification, ordered by Genus &gt; Family &gt; Order &gt; Class &gt; Phylum &gt; Kingdom:\n\n\nShow Code\nf = (identification_df\n .assign(source_label=lambda dd: dd.sample_mode + '-' + dd.Kingdom)\n .assign(percent=lambda dd: (dd.rate_diff * 100).round(2).astype(str) + '%')\n .pipe(lambda dd: p9.ggplot(dd) \n       + p9.aes('source_label', 'rate_diff', fill='variable')\n       + p9.geom_col()\n       + p9.scale_y_continuous(labels=percent_format())\n       + p9.labs(x='', y='Percentage of all reads', fill='Taxonomic level',\n                 title='Maximum depth of identification for all reads')\n       + p9.coord_flip()\n       + p9.geom_text(p9.aes(label='percent', y=.025), ha='left', size=8,\n                      data=dd.loc[dd.variable=='Genus'])\n       + p9.theme(figure_size=(6, 3), title=p9.element_text(size=10))\n)\n)\nf.save('../output/figures/identification_depth.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\nWe see how the bacterial reads have really good resolution even at the Genus level. Fungal reads, from ITS, hover around the 94% rate at the Genus level.\nLet’s look at this the other way around, with the % of unidentified reads at each level per sample type and kingdom:\n\n\nShow Code\nreversed_taxon_names = taxon_names.copy()\nreversed_taxon_names.reverse()\nf = (identification_df\n .reset_index(drop=True)\n .assign(variable=lambda dd: \n         pd.Categorical(dd.variable,\n                        categories=reversed_taxon_names,\n                        ordered=True))\n  .pipe(lambda dd: p9.ggplot(dd)\n        + p9.aes('variable', 'freq')\n        + p9.geom_col()\n        + p9.coord_flip()\n        + p9.facet_grid('sample_mode ~ Kingdom')\n        + p9.scale_y_continuous(labels=percent_format())\n        + p9.labs(x='Taxonomic level', y='Unidentified reads (%)')\n        + p9.theme(figure_size=(5, 3.5))\n        )\n\n)\nf.save('../output/figures/unidentified_reads_bars.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\nAnd if we look at the numbers on a sample per sample basis, we can observe how there is quite a lot of variability, specially on the fungal side. This is probably a product of the higher diversity found in February samples compared to the April ones in the ITS database:\n\nsample_map = (samples_info\n              [['sample_id', 'sample_mode']]\n              .set_index('sample_id')\n              .to_dict()\n              ['sample_mode']\n             )\n\n\n\nShow Code\nsample_map = (samples_info\n              [['sample_id', 'sample_mode']]\n              .set_index('sample_id')\n              .to_dict()\n              ['sample_mode']\n             )\n\nunknown_per_sample = (abundance_long_genera\n .merge(samples_info)\n .query('counts &gt; 0')\n .groupby(taxon_names + ['sample_mode', 'sample_id'], as_index=False)\n .counts.sum()\n .groupby(['Kingdom', 'sample_mode', 'sample_id'])\n .apply(lambda df: df.assign(relative_abundance=df.counts / df.counts.sum()))\n .melt(['Kingdom', 'sample_mode', 'counts', 'relative_abundance', 'sample_id'])\n .query('value == \"unknown\"')\n .assign(variable=lambda dd: pd.Categorical(dd.variable, categories=taxon_names, ordered=True))\n .groupby(['Kingdom', 'sample_mode', 'variable', 'sample_id'])\n .relative_abundance.sum()\n .rename('freq')\n .reset_index()\n .loc[lambda dd: dd.variable!='Kingdom']\n  .replace(0, np.NaN)\n  .dropna()\n .drop(columns='sample_mode')\n .pivot(index=['variable', 'Kingdom'], columns='sample_id', values='freq')\n .fillna(0)\n .T\n .reset_index()\n .assign(sample_mode=lambda dd: dd.sample_id.map(sample_map))\n .set_index(['sample_id', 'sample_mode'])\n)\nunknown_per_sample.to_csv('../output/tables/unknown_per_sample.csv')\n\n(unknown_per_sample.pipe(lambda dd: dd\n     .style\n     .background_gradient(cmap='inferno', axis=None)\n     .format(\"{:.2%}\")\n     .set_caption('Percentage of reads that could not be identified')\n))\n\n\n\n\n\n\n\nTable 1: Percentage of reads that could not be identified\n\n\n\n\n\n \nvariable\nPhylum\nClass\nOrder\nFamily\nGenus\n\n\n \nKingdom\nBacteria\nFungi\nBacteria\nFungi\nBacteria\nFungi\nBacteria\nFungi\nBacteria\nFungi\n\n\nsample_id\nsample_mode\n \n \n \n \n \n \n \n \n \n \n\n\n\n\nS01\nFlight\n0.00%\n0.23%\n0.00%\n0.56%\n0.01%\n0.70%\n0.07%\n1.09%\n0.13%\n15.56%\n\n\nS02\nGround\n0.00%\n0.51%\n0.00%\n0.86%\n0.00%\n0.86%\n0.01%\n1.47%\n0.04%\n1.80%\n\n\nS03\nFlight\n0.00%\n0.55%\n0.00%\n2.88%\n0.02%\n3.85%\n0.10%\n5.79%\n0.33%\n10.46%\n\n\nS04\nGround\n0.00%\n0.00%\n0.00%\n0.01%\n0.00%\n0.01%\n0.00%\n0.82%\n0.01%\n10.36%\n\n\nS05\nFlight\n0.01%\n0.05%\n0.01%\n0.08%\n0.01%\n0.08%\n0.02%\n0.37%\n0.05%\n0.50%\n\n\nS06\nGround\n0.00%\n0.00%\n0.00%\n0.00%\n0.00%\n0.00%\n0.04%\n0.00%\n0.11%\n0.00%\n\n\nS07\nFlight\n0.00%\n0.00%\n0.00%\n0.00%\n0.00%\n0.18%\n0.00%\n0.74%\n0.06%\n0.74%\n\n\nS08\nGround\n0.00%\n0.00%\n0.00%\n2.99%\n0.00%\n2.99%\n0.00%\n3.37%\n0.05%\n10.02%\n\n\nS09\nFlight\n0.00%\n0.00%\n0.00%\n0.00%\n0.00%\n0.00%\n0.02%\n0.00%\n0.08%\n10.43%\n\n\nS10\nGround\n0.00%\n0.39%\n0.00%\n1.50%\n0.03%\n2.64%\n0.04%\n3.35%\n0.17%\n7.03%\n\n\nS11\nGround\n0.00%\n0.64%\n0.00%\n1.36%\n0.02%\n1.76%\n0.08%\n3.15%\n0.18%\n7.80%\n\n\nS12\nGround\n0.00%\n0.77%\n0.01%\n1.33%\n0.01%\n1.50%\n0.03%\n2.18%\n0.09%\n6.23%\n\n\nS13\nFlight\n0.42%\n0.67%\n0.56%\n1.18%\n0.80%\n1.18%\n1.65%\n1.60%\n3.12%\n4.02%\n\n\nS15\nFlight\n0.35%\n2.42%\n0.51%\n2.42%\n0.58%\n2.42%\n0.98%\n2.42%\n2.19%\n2.42%\n\n\nS16\nGround\n0.48%\n0.00%\n0.62%\n0.00%\n1.01%\n0.00%\n1.58%\n0.00%\n3.29%\n0.26%\n\n\nS17\nFlight\n0.13%\n0.00%\n0.28%\n0.26%\n0.43%\n0.26%\n0.63%\n0.26%\n1.67%\n0.67%\n\n\nS18\nGround\n0.37%\n0.00%\n0.49%\n0.00%\n0.68%\n0.00%\n0.91%\n2.76%\n2.33%\n6.34%\n\n\nS19\nFlight\n0.43%\n0.44%\n0.57%\n1.39%\n0.86%\n1.66%\n1.47%\n3.19%\n3.35%\n5.14%\n\n\nS20\nGround\n0.48%\n0.51%\n0.69%\n0.51%\n1.01%\n0.51%\n2.19%\n0.51%\n5.80%\n0.86%\n\n\nS21\nFlight\n1.10%\n0.00%\n1.53%\n0.25%\n2.04%\n0.25%\n4.06%\n0.66%\n9.49%\n5.37%\n\n\nS22\nGround\n0.32%\n0.00%\n0.42%\n0.00%\n0.75%\n0.00%\n1.15%\n0.00%\n2.58%\n0.00%\n\n\n\n\n\n\n\n\n\n\nExclusive OTUs per sample type\nIn this section we will compute the number of OTUs, resolved to at least the Genus level, that belong to each group of sample types.\nWe will be looking at mainly two variables:\n\nSample source: Ground or Flight level\nMonth of the sample: February or April\n\n\nsample_types = ['February-flight',\n                'February-ground',\n                'April-flight',\n                'April-ground']\n\nNow that we are looking into resolved OTUs, we will be removing the unknown Genera. On top of that, there are several resolved taxons that either refer to plants or to unresolved Genus-level values, so we’ll make a list and remove all of those from the posterior analysis:\nIf we only consider an OTU present in a sample if AT LEAST 2 READS match with it, the distribution of number of samples in which each Genera-level OTU is found looks as the following:\n\n\nShow Code\nsamples_per_otu = (abundance_long_genera\n .query('Genus not in @inconclusive_list')\n .query('counts &gt;= 2')\n .groupby(taxon_names)\n .size()\n .rename('n_samples')\n .reset_index()\n)\n\n(samples_per_otu\n .pipe(lambda dd: \n       p9.ggplot(dd)\n       + p9.aes('n_samples', fill='Kingdom')\n       + p9.geom_histogram(binwidth=1)\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.facet_wrap('Kingdom', ncol=1)\n       + p9.geom_text(p9.aes(label='\"n = \" + size'), x=18, y=130, size=8,\n                                 data=dd.groupby('Kingdom', as_index=False).size().astype(str))\n       + p9.theme(figure_size=(4, 3))\n       + p9.guides(fill=False)\n       + p9.labs(x='Present in $n$ samples', y='Number of unique Genera')\n       )\n)\n\n\n\n\n\n\n\n\n\nIf we look at the number of unique Genera which are present in just a single sample, they represent:\n\n29.4% (94) of all bacterial genera.\n58.6% (143) of all fungal genera.\n\nCounting all the resolved OTUs at the Genus level, there are a total of 564 distinct genera present at least in one sample with at least two reads (320 bacterial, 244 fungal).\nIf we are a bit more strict and focus only on those genera that appear in at least 2 distinct samples, the distribution looks like the following:\n\n\nShow Code\n(samples_per_otu\n .query('n_samples &gt;= 2')\n .pipe(lambda dd: \n       p9.ggplot(dd)\n       + p9.aes('n_samples', fill='Kingdom')\n       + p9.geom_histogram(binwidth=1)\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.facet_wrap('Kingdom', ncol=1)\n       + p9.geom_text(p9.aes(label='\"n = \" + size'), x=18, y=35, size=8,\n                                 data=dd.groupby('Kingdom', as_index=False).size().astype(str))\n       + p9.theme(figure_size=(4, 3))\n       + p9.guides(fill=False)\n       + p9.labs(x='Present in $n$ samples', y='Number of unique Genera')\n       )\n)\n\n\n\n\n\n\n\n\n\nThe total number of distinct genera is therefore 327, 226 of them bacterial and 101 fungal.\nTake into account that fungal genera can appear at most in 20 samples since S06 didn’t work for ITS. Bacterial genera can appear in a maximum of 21 samples.\nIF we look at the ubiquitous genera, those that appear in every single sample, this is the list:\n\nsamples_per_otu.query('n_samples &gt;=20').set_index('Kingdom')\n\n\n\n\n\n\n\n\nPhylum\nClass\nOrder\nFamily\nGenus\nn_samples\n\n\nKingdom\n\n\n\n\n\n\n\n\n\n\nBacteria\nFirmicutes\nBacilli\nLactobacillales\nStreptococcaceae\nStreptococcus\n20\n\n\nBacteria\nFirmicutes\nBacilli\nStaphylococcales\nStaphylococcaceae\nStaphylococcus\n20\n\n\nBacteria\nProteobacteria\nAlphaproteobacteria\nRhizobiales\nBeijerinckiaceae\nMethylobacterium-Methylorubrum\n21\n\n\nBacteria\nProteobacteria\nAlphaproteobacteria\nRhizobiales\nRhizobiaceae\nOchrobactrum\n20\n\n\nBacteria\nProteobacteria\nAlphaproteobacteria\nSphingomonadales\nSphingomonadaceae\nPorphyrobacter\n20\n\n\nBacteria\nProteobacteria\nAlphaproteobacteria\nSphingomonadales\nSphingomonadaceae\nSphingomonas\n21\n\n\nBacteria\nProteobacteria\nGammaproteobacteria\nBurkholderiales\nComamonadaceae\nDelftia\n21\n\n\nBacteria\nProteobacteria\nGammaproteobacteria\nSalinisphaerales\nSolimonadaceae\nNevskia\n21\n\n\nFungi\nAscomycota\nEurotiomycetes\nChaetothyriales\nHerpotrichiellaceae\nExophiala\n20\n\n\nFungi\nBasidiomycota\nMalasseziomycetes\nMalasseziales\nMalasseziaceae\nMalassezia\n20\n\n\n\n\n\n\n\n\n(counts_per_sample_type\n .fillna(0)\n  .melt(ignore_index=False,\n      value_name='counts')\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nsample_mode\nmonth\ncounts\n\n\nKingdom\nPhylum\nClass\nOrder\nFamily\nGenus\n\n\n\n\n\n\n\nBacteria\nAcidobacteriota\nAcidobacteriae\nAcidobacteriales\nAcidobacteriaceae (Subgroup 1)\nBryocella\nFlight\nApril\n10.0\n\n\nGranulicella\nFlight\nApril\n0.0\n\n\nTerriglobus\nFlight\nApril\n0.0\n\n\nBlastocatellia\nBlastocatellales\nBlastocatellaceae\nBlastocatella\nFlight\nApril\n0.0\n\n\nPyrinomonadales\nPyrinomonadaceae\nRB41\nFlight\nApril\n26.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nFungi\nBasidiomycota\nTremellomycetes\nTrichosporonales\nTrichosporonaceae\nTrichosporon\nGround\nFebruary\n0.0\n\n\nUstilaginomycetes\nUstilaginales\nUstilaginaceae\nAnthracocystis\nGround\nFebruary\n0.0\n\n\nMoesziomyces\nGround\nFebruary\n0.0\n\n\nUstilago\nGround\nFebruary\n89.0\n\n\nWallemiomycetes\nWallemiales\nWallemiaceae\nWallemia\nGround\nFebruary\n202.0\n\n\n\n\n2284 rows × 3 columns\n\n\n\n\n\nShow Code\nmin_n_samples = 1\nmin_n_counts = 2\n\nover_threshold_otus = (samples_per_otu\n        .query(f\"n_samples &gt;= {min_n_samples}\")\n        .Genus\n        .unique()\n         )\n\ncounts_per_sample_type = \\\n(abundance_long_genera\n .merge(samples_info, on='sample_id')\n .query(f'counts &gt;= {min_n_counts}')\n .query('Genus not in @inconclusive_list')\n .query('Genus in @over_threshold_otus')\n .assign(month=lambda dd: pd.to_datetime(dd.date).dt.month_name())\n .groupby(taxon_names + ['sample_mode', 'month'], as_index=False)\n .counts.sum()\n .pivot(index=taxon_names, columns=['sample_mode', 'month'], values='counts')\n)\n\npresence_by_sample_type = (counts_per_sample_type\n .melt(ignore_index=False, value_name='counts')\n .assign(present_in=lambda dd: dd.month + '-' + dd.sample_mode)\n .dropna()\n .groupby(taxon_names)\n .agg({'counts': 'sum', 'present_in': 'unique'})\n .assign(presence_type=lambda dd: \n         dd.present_in.apply(lambda x: 'All sample types' if len(x) == 4 else (\n         f'Only {x[0]}' if len(x) == 1 else (\n         'All except ' + list(set(sample_types).difference(set(x)))[0] if len(x) == 3 else (\n         'Only February' if 'April' not in ''.join(x) else (\n         'Only April' if 'February' not in ''.join(x) else (\n         'Only Flight' if 'Ground' not in ''.join(x) else (\n         'Only Ground' if 'Flight' not in ''.join(x) else (\n         ' and '.join(x))\n         ))))))\n        ))\n  .rename(columns={'counts': 'total_counts'})\n.assign(month_presence=lambda dd: dd.presence_type.apply(lambda x: \n    'Both months' if 'All' in x or 'and' in x or x == 'Only Ground' or x == 'Only Flight' \n                                                          else x.split('-')[0]))\n .assign(area_presence=lambda dd: dd.presence_type.apply(lambda x: \n    'Both sites' if 'All' in x or 'and' in x or x == 'Only February' or x == 'Only April' else\n                            'Only ' + x.split('-')[1].capitalize() if '-' in x else x))        \n)\n\ncounts_per_sample_type.columns = counts_per_sample_type.columns.map(lambda x: '-'.join(x))\npresence_by_sample_type = (presence_by_sample_type\n      .merge(counts_per_sample_type, left_index=True, right_index=True)\n      [['total_counts', 'Flight-February', 'Flight-April', 'Ground-February', 'Ground-April',\n        'month_presence', 'area_presence', 'presence_type']]\n        .fillna(0)\n        .applymap(lambda x: int(x) if isinstance(x, float) else x)\n)\n\npresence_by_sample_type.to_csv('../output/tables/genera_presence_by_sample_type.csv')\n\n\n\ngenera_long_df = (abundance_df_genera\n .drop(columns=taxon_names[1:-1])\n .groupby(['Kingdom', 'Genus'], as_index=False)\n .sum()\n .melt(['Kingdom', 'Genus'], var_name='sample_id', value_name='counts')\n)\n\ntop_10_genera = (genera_long_df\n .query('Genus != \"unknown\"')\n .groupby(['Kingdom', 'Genus'], as_index=False)\n .agg({'counts': 'sum'})\n .groupby('Kingdom', as_index=False)\n .apply(lambda dd: dd.sort_values('counts', ascending=False).head(10))\n .reset_index(drop=True)\n ['Genus']\n)\n\nf = (genera_long_df\n .merge(samples_info)\n .replace({'Genus': {'unknown': pd.NA}})\n .assign(Genus=lambda dd: np.where(dd.Genus.isin(top_10_genera) | dd.Genus.isna(), dd.Genus, 'Other'))\n .query('Kingdom==\"Bacteria\"')\n .assign(date_short=lambda dd: pd.to_datetime(dd.date).dt.strftime('%m/%d'))\n .assign(date_short=lambda dd: np.where(dd.sample_id=='S12', '02/28.5', dd.date_short))\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('date_short', 'counts', fill='Genus', group='sample_id')\n       + p9.geom_col()\n       + p9.facet_wrap('Kingdom + \" \" + sample_mode', ncol=1)\n       + p9.labs(x='', y='Read Counts', fill='')\n       + p9.theme(figure_size=(4, 5),\n                  axis_text_x=p9.element_text(angle=45),\n                  legend_key_size=7,\n                  legend_text=p9.element_text(size=7, face='italic'),\n                  legend_position='bottom'\n                  )\n       )\n)\nf.save('../output/figures/top_10_genera_bac.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\nblanks_abundance_df_16s = (pd.read_csv(\n    '../data/nov23/ALL_AND_BLANKS_WITH_POOLS/reduced_and_merged_ONLY_genus_16S.csv'\n    )\n\n.melt('Genus', var_name='sample_id', value_name='counts')\n.assign(sample_id=lambda dd: dd['sample_id']\n        .str.replace('subsampled', '')\n        .str.replace('.', '')\n        .str.replace('new', '\\n(new)')\n        )\n.replace({'Blank-Flightpool': 'B_Flight',\n          'Blank-Groundpool': 'B_Ground',\n          })\n.query('sample_id.str.contains(\"B_\")')\n.assign(Kingdom='Bacteria')\n)\n\nblanks_abundance_df_its = (pd.read_csv(\n    '../data/nov23/ALL_AND_BLANKS_WITH_POOLS/complete_table_ITS.csv'\n    )\n\n.melt('Genus', var_name='sample_id', value_name='counts')\n.assign(sample_id=lambda dd: dd['sample_id']\n        .str.replace('subsampled', '')\n        .str.replace('.', '')\n        .str.replace('new', '\\n(new)')\n        )\n.replace({'Blank-Flightpool': 'B_Flight',\n          'Blank-Groundpool': 'B_Ground',\n          })\n.query('sample_id.str.contains(\"B_\")')\n.assign(Kingdom='Fungi')\n)\n\nblanks_abundance_df = pd.concat([blanks_abundance_df_16s, blanks_abundance_df_its])\n\nfull_genera_df = (pd.concat([genera_long_df, blanks_abundance_df])\n            .assign(Genus=lambda dd: dd.Genus.str.split('__').str[-1])\n            )   \n\n\nf = (full_genera_df\n .query('sample_id.str.startswith(\"S\")')\n .query('Kingdom == \"Fungi\"')\n  .assign(counts=lambda dd: dd.counts.astype(int))\n .merge(samples_info)\n .replace({'Genus': {'unknown': pd.NA}})\n .assign(Genus=lambda dd: np.where(dd.Genus.isin(top_10_genera) | dd.Genus.isna(), dd.Genus, 'Other'))\n .assign(date_short=lambda dd: pd.to_datetime(dd.date).dt.strftime('%m/%d'))\n .assign(date_short=lambda dd: np.where(dd.sample_id=='S12', '02/28.5', dd.date_short))\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('date_short', 'counts', fill='Genus')\n       + p9.geom_col(p9.aes(group='sample_id'))\n       + p9.facet_wrap('Kingdom + \" \" + sample_mode', ncol=1)\n       + p9.labs(x='', y='Read Counts', fill='')\n       + p9.theme(figure_size=(4, 5),\n                  axis_text_x=p9.element_text(angle=45),\n                  legend_key_size=7,\n                                    legend_text=p9.element_text(size=7, face='italic'),\n\n                  legend_position='bottom'\n                  )\n       )\n)\nf.save('../output/figures/top_10_genera_fun.svg')\nf.draw()\n# )\n\n\n\n\n\n\n\n\n\n(genera_long_df\n .merge(samples_info)\n .assign(Genus=lambda dd: np.where(dd.Genus.isin(top_10_genera), dd.Genus, 'Other'))\n .query('Kingdom==\"Bacteria\"')\n#  .groupby('Genus', as_index=False)\n#  .agg({'counts': 'sum'})\n .assign(date_short=lambda dd: pd.to_datetime(dd.date).dt.strftime('%m/%d'))\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('date_short', 'counts', fill='Genus')\n       + p9.geom_col(p9.aes(group='sample_id'), position='dodge')\n       + p9.facet_wrap('Kingdom + \" \" + sample_mode', ncol=1)\n       + p9.labs(x='', y='Read Counts', fill='')\n       + p9.theme(figure_size=(4.5, 5),\n                  axis_text_x=p9.element_text(angle=45),\n                  legend_key_size=7,\n                  legend_position='bottom'\n                  )\n       )\n)\n\n\n\n\n\n\n\n\n\nf = (presence_by_sample_type\n .groupby(['area_presence', 'Kingdom'], as_index=False).size()\n .assign(area_presence=lambda dd: dd.area_presence.str.replace(' ', '\\n'))\n    .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('area_presence', 'size')\n       + p9.geom_col(p9.aes(fill='Kingdom'))\n       + p9.geom_text(p9.aes(label='perc', y='size + 10'), ha='center', color=['black', 'black', 'black'], size=8,\n                     data=dd\n                      .groupby('area_presence', as_index=False)\n                      .sum()\n                      .assign(perc=lambda ddd: ((ddd['size'] / ddd['size'].sum()) * 100).round(1)\n                              .astype(str)+ '%'))\n    #    + p9.coord_flip()\n       + p9.labs(x='', y='Number of unique genera', fill='')\n       + p9.scale_fill_manual(values = ['#D3894C', '#435B97'] )\n       + p9.ylim(0, 300)\n       + p9.annotate(geom='text', x=2.8, y=270,\n                     label=f'n = {dd[\"size\"].sum()} genera', size=7)\n       + p9.theme(figure_size=(2, 2.5),\n                  axis_title=p9.element_text(size=8),\n                  legend_key_size=6,\n                  legend_text=p9.element_text(size=7),\n                  legend_position=(.735, .95), legend_margin=0)\n         )\n)\nf.save('../output/figures/genera_presence_by_area_vert.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\nf = (presence_by_sample_type\n .groupby(['month_presence', 'Kingdom'], as_index=False).size()\n .assign(month_presence=lambda dd: dd.month_presence.str.replace(' ', '\\n'))\n    .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('month_presence', 'size')\n       + p9.geom_col(p9.aes(fill='Kingdom'))\n       + p9.geom_text(p9.aes(label='perc', y='size + 10'), ha='center', color=['black', 'black', 'black'], size=8,\n                     data=dd\n                      .groupby('month_presence', as_index=False)\n                      .sum()\n                      .assign(perc=lambda ddd: ((ddd['size'] / ddd['size'].sum()) * 100).round(1)\n                              .astype(str)+ '%'))\n    #    + p9.coord_flip()\n       + p9.labs(x='', y='Number of unique genera', fill='')\n       + p9.scale_fill_manual(values = ['#D3894C', '#435B97'] )\n       + p9.ylim(0, 300)\n       + p9.annotate(geom='text', x=2.8, y=270,\n                     label=f'n = {dd[\"size\"].sum()} genera', size=7)\n       + p9.theme(figure_size=(2, 2.5),\n                  axis_title=p9.element_text(size=8),\n                  legend_key_size=6,\n                  legend_text=p9.element_text(size=7),\n                  legend_position=(.735, .95), legend_margin=0)\n         )\n)\nf.save('../output/figures/genera_presence_by_month_vert.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\n\nShow Code\nf = (presence_by_sample_type\n .groupby(['area_presence', 'Kingdom'], as_index=False).size()\n    .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('area_presence', 'size')\n       + p9.geom_col(p9.aes(fill='Kingdom'))\n       + p9.geom_text(p9.aes(label='perc', y='size + 5'), ha='left', color=['black', 'black', 'black'], size=8,\n                     data=dd\n                      .groupby('area_presence', as_index=False)\n                      .sum()\n                      .assign(perc=lambda ddd: ((ddd['size'] / ddd['size'].sum()) * 100).round(1)\n                              .astype(str)+ '%'))\n       + p9.coord_flip()\n       + p9.labs(x='', y='Number of unique genera', fill='')\n       + p9.scale_fill_manual(values = ['#D3894C', '#435B97'] )\n       + p9.ylim(0, 330)\n       + p9.annotate(geom='text', x=3.4, y=270,\n                     label=f'n = {dd[\"size\"].sum()} genera', size=8)\n       + p9.theme(figure_size=(3.5, 2),\n                  axis_title=p9.element_text(size=8),\n                  legend_key_size=6,\n                  legend_text=p9.element_text(size=7),\n                  legend_position=(.835, .85), legend_margin=0)\n         )\n)\n\nf.save('../output/figures/genera_presence_by_area.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\n\n\nShow Code\nf = (presence_by_sample_type\n .groupby(['month_presence', 'Kingdom'], as_index=False).size()\n    .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('month_presence', 'size')\n       + p9.geom_col(p9.aes(fill='Kingdom'))\n       + p9.geom_text(p9.aes(label='perc', y='size + 5'), ha='left', color=['black', 'black', 'black'], size=8,\n                     data=dd\n                      .groupby('month_presence', as_index=False)\n                      .sum()\n                      .assign(perc=lambda ddd: ((ddd['size'] / ddd['size'].sum()) * 100).round(1)\n                              .astype(str)+ '%'))\n       + p9.coord_flip()\n       + p9.labs(x='', y='Number of unique genera', fill='')\n       + p9.scale_fill_manual(values = ['#D3894C', '#435B97'] )\n       + p9.ylim(0, 330)\n       + p9.guides(fill=False)\n       + p9.annotate(geom='text', x=.6, y=275,\n                     label=f'n = {dd[\"size\"].sum()} genera', size=8)\n       + p9.theme(figure_size=(3.5, 2),\n                  axis_title=p9.element_text(size=8),\n                  legend_key_size=7,\n                  legend_position=(.775, .75), legend_margin=0)\n         )\n)\n\nf.save('../output/figures/genera_presence_by_month.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\n\npresence_by_sample_type.presence_type.value_counts().rename('Number of genera').to_frame()\n\n\n\n\n\n\n\n\nNumber of genera\n\n\npresence_type\n\n\n\n\n\nOnly February-Flight\n104\n\n\nOnly February-Ground\n97\n\n\nOnly April\n76\n\n\nOnly April-Flight\n71\n\n\nAll except April-ground\n63\n\n\nAll sample types\n52\n\n\nOnly February\n38\n\n\nOnly April-Ground\n30\n\n\nOnly Ground\n12\n\n\nOnly Flight\n11\n\n\nApril-Flight and February-Ground\n11\n\n\nFebruary-Flight and April-Ground\n6\n\n\n\n\n\n\n\n\n\nFiltering for correlation analysis\nFirstly, if we look at how many unique OTUs we observe at each taxonomic level:\n\n(abundance_long_genera\n  .query('Genus not in @inconclusive_list')\n  .query('Phylum != \"unknown\"')\n  .query('Phylum != \"Fungi_phy_Incertae_sedis\"')\n)\n\n\n\n\n\n\n\n\nKingdom\nPhylum\nClass\nOrder\nFamily\nGenus\nsample_id\ncounts\n\n\n\n\n0\nBacteria\nAcidobacteriota\nAcidobacteriae\nAcidobacteriales\nAcidobacteriaceae (Subgroup 1)\nBryocella\nS01\n0.0\n\n\n1\nBacteria\nAcidobacteriota\nAcidobacteriae\nAcidobacteriales\nAcidobacteriaceae (Subgroup 1)\nGranulicella\nS01\n0.0\n\n\n2\nBacteria\nAcidobacteriota\nAcidobacteriae\nAcidobacteriales\nAcidobacteriaceae (Subgroup 1)\nTerriglobus\nS01\n0.0\n\n\n4\nBacteria\nAcidobacteriota\nBlastocatellia\nBlastocatellales\nBlastocatellaceae\nBlastocatella\nS01\n9.0\n\n\n6\nBacteria\nAcidobacteriota\nBlastocatellia\nPyrinomonadales\nPyrinomonadaceae\nRB41\nS01\n0.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n15427\nFungi\nBasidiomycota\nTremellomycetes\nTrichosporonales\nTrichosporonaceae\nTrichosporon\nS22\n0.0\n\n\n15428\nFungi\nBasidiomycota\nUstilaginomycetes\nUstilaginales\nUstilaginaceae\nAnthracocystis\nS22\n0.0\n\n\n15429\nFungi\nBasidiomycota\nUstilaginomycetes\nUstilaginales\nUstilaginaceae\nMoesziomyces\nS22\n0.0\n\n\n15430\nFungi\nBasidiomycota\nUstilaginomycetes\nUstilaginales\nUstilaginaceae\nUstilago\nS22\n0.0\n\n\n15432\nFungi\nBasidiomycota\nWallemiomycetes\nWallemiales\nWallemiaceae\nWallemia\nS22\n0.0\n\n\n\n\n11991 rows × 8 columns\n\n\n\n\n(abundance_long_genera\n  .query('Genus not in @inconclusive_list')\n  .query('Phylum != \"unknown\"')\n  .query('Phylum != \"Fungi_phy_Incertae_sedis\"')\n  .query('counts &gt; 0')\n  .merge(samples_info)\n  .assign(month=lambda dd: pd.to_datetime(dd.date).dt.month_name())\n  .Phylum.nunique()\n#   .groupby(['Kingdom']).nunique()\n)\n\n21\n\n\n\n(abundance_long_genera\n  .query('Genus not in @inconclusive_list')\n  .query('Phylum != \"unknown\"')\n  .query('Phylum != \"Fungi_phy_Incertae_sedis\"')\n  .query('counts &gt; 0')\n  .merge(samples_info)\n  .assign(month=lambda dd: pd.to_datetime(dd.date).dt.month_name())\n  # .query('month==\"February\"')\n  .groupby(['Kingdom'])\n  [taxon_names[1:]]\n  .nunique()\n  .T\n)\n\n\n\n\n\n\n\nKingdom\nBacteria\nFungi\n\n\n\n\nPhylum\n15\n2\n\n\nClass\n25\n19\n\n\nOrder\n68\n68\n\n\nFamily\n127\n168\n\n\nGenus\n305\n266\n\n\n\n\n\n\n\n\n\nShow Code\ndf = (abundance_long_genera\n  .query('Genus not in @inconclusive_list')\n  .query('Phylum != \"unknown\"')\n  .query('Phylum != \"Fungi_phy_Incertae_sedis\"')\n  .groupby(['Kingdom'])\n  [taxon_names[1:]]\n  .nunique()\n)\n\ndf.loc['TOTAL'] = df.sum()\ndf.rename(columns={\n    'Phylum': 'Phyla',\n    'Class': 'Classes',\n    'Order': 'Orders',\n    'Family': 'Families',\n    'Genus': 'Genera'})\n\n\n\n\n\n\n\n\n\nPhyla\nClasses\nOrders\nFamilies\nGenera\n\n\nKingdom\n\n\n\n\n\n\n\n\n\nBacteria\n15\n25\n68\n127\n305\n\n\nFungi\n2\n19\n68\n168\n266\n\n\nTOTAL\n17\n44\n136\n295\n571\n\n\n\n\n\n\n\nLet’s make a full scan of how the total number of Genera and Phyla changes as we change over these parameters:\n\n(abundance_long_phyla\n .groupby(['Kingdom', 'Phylum'])\n .counts.sum()\n .sort_values()\n)\n\nKingdom   Phylum           \nBacteria  Dependentiae              10\n          Gemmatimonadota           27\n          Myxococcota               28\n          Deinococcota              79\n          Armatimonadota            98\n          Patescibacteria          110\n          Planctomycetota          119\n          Chloroflexi              123\n          Campylobacterota         245\n          Cyanobacteria            273\n          Desulfobacterota         476\n          Fusobacteriota           565\n          Acidobacteriota          581\n          Verrucomicrobiota        835\n          unknown                 2702\n          Actinobacteriota        6048\nFungi     unknown                 9247\nBacteria  Bacteroidota           30860\n          Firmicutes             66403\nFungi     Basidiomycota         222314\nBacteria  Proteobacteria       1562108\nFungi     Ascomycota           1964855\nName: counts, dtype: int64\n\n\n\n\nShow Code\nn_df = pd.concat([\n abundance_long_genera\n  .query('Genus not in @inconclusive_list')\n  .groupby(['Kingdom'])\n  [['Genus']]\n  .nunique(),\n  (abundance_long_phyla\n   .query('Phylum not in [\"unknown\", \"Fungi_phy_Incertae_sedis\"]')\n    .groupby(['Kingdom'])\n    [['Phylum']]\n    .nunique()\n  )\n]\n).melt(ignore_index=False, var_name='level', value_name='n').dropna().reset_index()\n\nabundance_long_df = pd.concat([\n    (abundance_long_genera\n    .assign(level='Genera')\n    .query('Genus not in @inconclusive_list')),\n    (abundance_long_phyla\n     .assign(level='Phyla')\n     .query('Phylum != \"unknown\"')),\n])\n\nscan_df_list = []\nfor min_counts, min_samples in product(range(2, 11), range(1, 8)):\n    scan_df_list.append(\n        (abundance_long_df\n         .query('Genus not in @inconclusive_list')\n         .query('counts &gt;= @min_counts')\n         .groupby(taxon_names + ['level'], as_index=False, dropna=False)\n         .apply(lambda dd: pd.Series(dd.loc[dd['counts'] &gt;= min_counts].shape[0]))\n         .assign(over_threshold=lambda dd: dd[0] &gt;= min_samples)\n         .groupby(['Kingdom', 'level'], as_index=False)\n         .over_threshold\n         .agg({'over': 'mean', 'total_over': 'sum'})\n         .assign(min_counts=min_counts, min_samples=min_samples)\n        )\n    )\n\nscan_df = (pd.concat(scan_df_list)\n    .merge(n_df.replace({'level': {'Phylum': 'Phyla', 'Genus': 'Genera'}}))\n    .assign(label=lambda dd: dd['total_over'].astype(str) + '/' + dd['n'].astype(int).astype(str))\n    .assign(percent_label=lambda dd: (dd['over'] * 100).round(2).astype(str) + '%')\n    .assign(criteria_label=lambda dd: \n            'r=' + dd['min_counts'].astype(str)  + \n            '; n=' + dd['min_samples'].astype(str))\n    .assign(criteria_label=lambda dd: pd.Categorical(dd['criteria_label'], \n                                                     categories=dd['criteria_label'].unique(),\n                                                    ordered=True))\n          )\n\n\n\nscan_df\n\n\n\n\n\n\n\n\nKingdom\nlevel\nover\ntotal_over\nmin_counts\nmin_samples\nn\nlabel\npercent_label\ncriteria_label\n\n\n\n\n0\nBacteria\nGenera\n1.000000\n305\n2\n1\n305.0\n305/305\n100.0%\nr=2; n=1\n\n\n1\nBacteria\nGenera\n0.622951\n190\n2\n2\n305.0\n190/305\n62.3%\nr=2; n=2\n\n\n2\nBacteria\nGenera\n0.508197\n155\n2\n3\n305.0\n155/305\n50.82%\nr=2; n=3\n\n\n3\nBacteria\nGenera\n0.416393\n127\n2\n4\n305.0\n127/305\n41.64%\nr=2; n=4\n\n\n4\nBacteria\nGenera\n0.363934\n111\n2\n5\n305.0\n111/305\n36.39%\nr=2; n=5\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n247\nFungi\nPhyla\n1.000000\n2\n10\n3\n2.0\n2/2\n100.0%\nr=10; n=3\n\n\n248\nFungi\nPhyla\n1.000000\n2\n10\n4\n2.0\n2/2\n100.0%\nr=10; n=4\n\n\n249\nFungi\nPhyla\n1.000000\n2\n10\n5\n2.0\n2/2\n100.0%\nr=10; n=5\n\n\n250\nFungi\nPhyla\n1.000000\n2\n10\n6\n2.0\n2/2\n100.0%\nr=10; n=6\n\n\n251\nFungi\nPhyla\n1.000000\n2\n10\n7\n2.0\n2/2\n100.0%\nr=10; n=7\n\n\n\n\n252 rows × 10 columns\n\n\n\n\nf = (scan_df\n.assign(source_level=lambda dd: dd['level'] + '-' + dd['Kingdom']) \n.assign(pos=lambda dd: np.where(dd.over &gt; .9, 0, dd.over))\n.assign(label_len=lambda dd: dd.label.str.len())\n.assign(pos=lambda dd: np.where(dd.label_len &gt; dd.over * 10, dd.over, 0))\n.pipe(lambda dd: p9.ggplot(dd)\n        + p9.aes('source_level', 'over')\n        + p9.facet_wrap('criteria_label', ncol=7)\n        + p9.geom_col()\n        + p9.scale_y_continuous(\n            labels=percent_format(),\n            limits=(0, 1.35),\n            breaks=[0, 1])\n        + p9.geom_text(p9.aes(y='pos', label='label', color='pos &lt; over'),\n                       nudge_y=.02, size=8, ha='left')\n        + p9.scale_color_manual(values=['black', 'white'])\n        + p9.coord_flip()\n        + p9.guides(color=False)\n        + p9.labs(x='', y='% of taxa kept after filter',\n                  caption=\"*r = Min number of reads; n = Min number of different samples\")\n        + p9.theme(figure_size=(8, 9),\n                   axis_title_y=p9.element_text(size=8))\n)\n)\n# f.save('../output/figures/scan_filtering.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\n\nShow Code\nf = (abundance_long_df\n .groupby(taxon_names + ['level'], as_index=False, dropna=False)\n .apply(lambda dd: pd.Series(dd.loc[dd['counts'] &gt;= 2].shape[0]))\n .assign(over_threshold=lambda dd: dd[0] &gt;= 2)\n .groupby(['Kingdom', 'level'], as_index=False)\n .over_threshold\n .agg({'over': 'mean', 'total_over': 'sum', 'n': 'size'})\n .reset_index()\n .assign(label=lambda dd: dd['total_over'].astype(str) + '/' + dd['n'].astype(str))\n .assign(percent_label=lambda dd: (dd['over'] * 100).round(2).astype(str) + '%')\n .pipe(lambda dd: p9.ggplot(dd)\n        + p9.aes('Kingdom', 'over')\n        + p9.facet_wrap('level')\n        + p9.geom_col()\n        + p9.scale_y_continuous(labels=percent_format(), limits=(0, 1.1),\n                                breaks=[0, .25, .5, .75, 1])\n        + p9.geom_text(p9.aes(y='over + .04', label='label'), size=8)\n        + p9.geom_text(p9.aes(label='percent_label'), size=9, y=.05, color='white')\n        + p9.labs(x='', y='% of taxa kept after filter')\n        + p9.ggtitle('Taxa with at least 2 reads across at least 2 samples')\n        + p9.theme(figure_size=(4, 2),\n                   plot_title=p9.element_text(size=8, ha='center'),\n                   axis_title_y=p9.element_text(size=9))\n)\n)\n\nf.save('../output/figures/remaining_after_filter.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\n\n\nDiversity per sample\n\nimport statsmodels.api as sm\nfrom sklearn.manifold import MDS\nfrom scipy.stats import ranksums\nfrom sklearn.metrics import pairwise_distances\nfrom statsmodels.sandbox.stats.multicomp import MultiComparison\nfrom statsmodels.stats.multitest import multipletests\n\n\ndiversity_df = (diversity_df\n        .merge(samples_info)\n        .assign(month=lambda dd: pd.to_datetime(dd.date).dt.month_name())\n)\n\n\n# Function to perform pairwise tests and return p-values\ndef perform_pairwise_wilcoxon(data, group_col, value_col):\n    groups = data[group_col].unique()\n    result = ranksums(data.query(f'{group_col} == \"{groups[0]}\"')[value_col],\n                        data.query(f'{group_col} == \"{groups[1]}\"')[value_col])\n    return result.pvalue\nperform_pairwise_wilcoxon(diversity_df, 'month', 'chao')\n\n0.5811694758577145\n\n\n\nlibraries = []\nsubgroups = []\ntest_names = []\nchao1_p_values = []\nshannon_p_values = []\n\nfor s in ['ITS', '16S']:\n    df_filtered = diversity_df.query('source == @s')\n    for test_column in ['sample_mode', 'month']:\n        \n        if test_column == 'sample_mode':\n            test_name = 'Ground-Flight'\n        elif test_column == 'month':\n            test_name = 'February-April'\n        m = 'All'\n        # Compute p-values\n        chao1_p = perform_pairwise_wilcoxon(df_filtered, test_column, 'chao')\n        shannon_p = perform_pairwise_wilcoxon(df_filtered, test_column, 'shannon')\n\n        # Append results\n        libraries.append(s)\n        subgroups.append(m)\n        test_names.append(test_name)\n        chao1_p_values.append(chao1_p)\n        shannon_p_values.append(shannon_p)\n\n# Display the results\nres_df = pd.DataFrame({'Library': libraries,\n                          'Group': subgroups,\n                          'Test': test_names,\n                          'Chao1_p': chao1_p_values,\n                          'Shannon_p': shannon_p_values})\n\n(res_df\n .sort_values(['Test', 'Group'])\n # apply multiple test correction\n .assign(Chao1_p_adj=lambda dd: multipletests(dd.Chao1_p, method='fdr_bh')[1],\n         Shannon_p_adj=lambda dd: multipletests(dd.Shannon_p, method='fdr_bh')[1])\n .style\n .hide(axis='index')\n.applymap(lambda x: 'color: red' if isinstance(x, float) and x &lt; .05 else '')\n)\n\n\n\n\n\n\nLibrary\nGroup\nTest\nChao1_p\nShannon_p\nChao1_p_adj\nShannon_p_adj\n\n\n\n\nITS\nAll\nFebruary-April\n0.027578\n0.025012\n0.055156\n0.050023\n\n\n16S\nAll\nFebruary-April\n0.000252\n0.000124\n0.001009\n0.000497\n\n\nITS\nAll\nGround-Flight\n0.384673\n0.198765\n0.481321\n0.204969\n\n\n16S\nAll\nGround-Flight\n0.481321\n0.204969\n0.481321\n0.204969\n\n\n\n\n\n\nsample_sizes = (diversity_df\n                .groupby(['source', 'sample_mode'])\n                .size()\n                .rename('n')\n                .apply(lambda x: f'n = {x}')\n                .reset_index()\n                .assign(Kingdom=lambda dd: dd.source.map({'16S': 'Bacteria',\n                                                          'ITS': 'Fungi'}))\n               )\n\n\nsample_sizes_month = (diversity_df\n                .groupby(['source', 'month'])\n                .size()\n                .rename('n')\n                .apply(lambda x: f'n = {x}')\n                .reset_index()\n                            .assign(Kingdom=lambda dd: dd.source.map({'16S': 'Bacteria',\n                                                          'ITS': 'Fungi'}))\n               )\n\n\nf = (diversity_df\n .assign(Kingdom=lambda dd: dd.source.map({'16S': 'Bacteria',\n                                           'ITS': 'Fungi'}))\n .melt(['sample_id', 'source', 'date', 'sample_mode', 'Kingdom', 'month'])\n .replace({'chao': 'Chao1 Index', 'shannon': 'Shannon Index'})\n.pipe(lambda dd: p9.ggplot(dd)\n      + p9.aes('sample_mode', 'value', fill='Kingdom')\n      + p9.geom_jitter(alpha=.6, width=0, height=0, fill='black')\n      + p9.geom_boxplot(alpha=.6, outlier_alpha=0)\n      + p9.geom_blank(p9.aes(y='value * 1.1'))\n      + p9.facet_grid(['variable', 'Kingdom'], scales='free_y')\n      + p9.scale_fill_manual(values = ['#D3894C', '#435B97'] )\n      + p9.geom_text(p9.aes(label='n'), y=-.2, size=8, data=sample_sizes)\n      + p9.guides(fill=False)\n      + p9.labs(x='', y=r'$\\alpha$-Diversity ')\n      + p9.scale_y_continuous(expand=(.175, .1))\n      + p9.theme(figure_size=(4, 3)\n    )\n)\n)\nf.save('../output/figures/boxplots_diversity_by_sample_type.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\nsample_sizes_month = sample_sizes_month.assign(Kingdom=lambda dd: dd.source.map({'16S': 'Bacteria', 'ITS': 'Fungi'}))\n\n\nf = (diversity_df\n .assign(Kingdom=lambda dd: dd.source.map({'16S': 'Bacteria',\n                                           'ITS': 'Fungi'}))\n .melt(['sample_id', 'source', 'date', 'sample_mode', 'Kingdom', 'month'])\n .replace({'chao': 'Chao1 Index', 'shannon': 'Shannon Index'})\n .assign(month=lambda dd: pd.Categorical(dd.month, categories=['February', 'April']))\n.pipe(lambda dd: p9.ggplot(dd)\n      + p9.aes('month', 'value')\n      + p9.geom_jitter(p9.aes(fill='sample_mode'), alpha=.6, width=0, height=0, stroke=0, size=2)\n      + p9.geom_boxplot(alpha=.6, outlier_alpha=0)\n      + p9.geom_blank(p9.aes(y='value * 1.1'))\n      + p9.facet_grid(['variable', 'Kingdom'], scales='free_y')\n      + p9.scale_fill_manual(values = ['#D3894C', '#435B97'] )\n      + p9.geom_text(p9.aes(label='n'), y=-.2, size=8, data=sample_sizes_month)\n      + p9.guides(fill=False)\n      + p9.labs(x='', y=r'$\\alpha$-Diversity ')\n      + p9.scale_y_continuous(expand=(.175, .1))\n      + p9.theme(figure_size=(4, 3)\n    )\n)\n)\nf.save('../output/figures/boxplots_diversity_by_month.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\n\nDistance between samples (nMDS and PERMANOVA)\n\nsamples = samples_info.query('sample_id not in [\"S06\", \"S14\"]').sample_id\ndm = (abundance_df_genera\n .query('Genus!=\"unknown\"')\n .drop(columns=['S06'] + taxon_names[:-1])\n .set_index('Genus')\n .T\n .apply(lambda x: x / x.sum(), axis=1)\n .pipe(lambda dd: pairwise_distances(dd, metric='braycurtis'))\n)\n\n\nnon-metric MDS\n\nnp.random.seed(105)\nbest_stress = np.inf\nbest_npos = None\nstresses = []\nfor _ in range(1000):\n    nmds = MDS(n_components=2,\n            max_iter=900, \n            eps=1e-9,\n            dissimilarity=\"precomputed\",\n            normalized_stress=True,\n            metric=False)\n\n    npos = nmds.fit_transform(dm)\n\n    stress = nmds.stress_\n    stresses.append(stress)\n    if stress &lt; best_stress:\n        best_stress = stress\n        best_npos = npos\n\n\n(p9.ggplot(pd.DataFrame(stresses, columns=['stress'])) \n + p9.aes('stress')\n + p9.geom_histogram(bins=40)\n + p9.theme(figure_size=(4, 3))\n)\n\n\n\n\n\n\n\n\n\n\nf = (pd.DataFrame(best_npos)\n .assign(sample_id=samples)\n .merge(samples_info)\n .assign(month=lambda dd: pd.to_datetime(dd.date).dt.month_name())\n .rename(columns={0: 'x', 1: 'y'})\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('x', 'y', color='sample_mode', shape='month')\n       + p9.geom_point(size=2.5)\n       + p9.stat_ellipse(p9.aes(group='sample_mode', fill='sample_mode'),\n                         geom='polygon', level=.85, alpha=.25)\n       + p9.scale_color_manual(values=['#D3894C', '#435B97'])\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.ylim(-1.2, 1)\n       + p9.guides(fill=False)\n       + p9.labs(x='nMDS Dim 1', y='nMDS Dim 2', color='', shape='')\n       + p9.annotate(geom='text', x=-.6, y=.95, ha='left',\n                     label='Stress-1 = ' + str(round(best_stress, 2)),\n                     size=9)\n       + p9.theme(figure_size=(3, 3),\n                  legend_position='top',\n                  legend_text=p9.element_text(size=8),\n                  legend_key_size=8,\n                  )\n       )\n)\n\nf.save('../output/figures/nmds_fg.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\n\nf = (pd.DataFrame(best_npos)\n .assign(sample_id=samples)\n .merge(samples_info)\n .assign(month=lambda dd: pd.to_datetime(dd.date).dt.month_name())\n .rename(columns={0: 'x', 1: 'y'})\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('x', 'y', color='sample_mode', shape='month')\n       + p9.geom_point(size=2.5)\n       + p9.stat_ellipse(p9.aes(group='month'),\n                         geom='polygon', level=.85, alpha=.25)\n       + p9.scale_color_manual(values=['#D3894C', '#435B97'])\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.ylim(-1.2, 1)\n       + p9.guides(fill=False)\n       + p9.labs(x='nMDS Dim 1', y='nMDS Dim 2', color='', shape='')\n       + p9.annotate(geom='text', x=-.6, y=.95, ha='left',\n                     label='Stress-1 = ' + str(round(best_stress, 2)),\n                     size=9)\n       + p9.theme(figure_size=(3, 3),\n                  legend_position='top',\n                  legend_text=p9.element_text(size=8),\n                  legend_key_size=8,\n                  )\n       )\n)\n\nf.save('../output/figures/nmds_af.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\n\n(pd.DataFrame(best_npos)\n .assign(sample_id=samples)\n .merge(samples_info)\n .assign(month=lambda dd: pd.to_datetime(dd.date).dt.month_name())\n .rename(columns={0: 'x', 1: 'y'})\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('x', 'y', color='sample_mode')\n       + p9.geom_point(size=2.5)\n       + p9.scale_color_manual(values=['#D3894C', '#435B97'])\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.stat_ellipse(p9.aes(fill='sample_mode'), geom='polygon', level=.95, alpha=.15)\n       + p9.labs(x='nMDS Dim 1', y='nMDS Dim 2', color='', shape='', fill='')\n       + p9.annotate(geom='text', x=-.1, y=1.2,\n                     label='Stress-1 = ' + str(round(best_stress, 2)),\n                     size=9)\n       + p9.theme(figure_size=(5, 4),\n                  legend_position='top',\n                  legend_text=p9.element_text(size=8),\n                  legend_key_size=8,\n                  )\n       )\n)\n\n\n\n\n\n\n\n\n\n(pd.DataFrame(best_npos)\n .assign(sample_id=samples)\n .merge(samples_info)\n .assign(month=lambda dd: pd.to_datetime(dd.date).dt.month_name())\n .rename(columns={0: 'x', 1: 'y'})\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('x', 'y', color='sample_mode')\n       + p9.geom_point(size=2.5)\n       + p9.scale_color_manual(values=['#D3894C', '#435B97'])\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.stat_ellipse(p9.aes(fill='sample_mode'), geom='polygon', level=.95, alpha=.15)\n       + p9.labs(x='nMDS Dim 1', y='nMDS Dim 2', color='', shape='', fill='')\n       + p9.annotate(geom='text', x=-0, y=1.5,\n                     label='Stress-1 = ' + str(round(best_stress, 2)) +\n                     '    PERMANOVA pseudo-$F$ = 0.68, $p$ = 0.59',\n                     size=9)\n       + p9.scale_y_continuous(expand=(.02, .2))\n       + p9.theme(figure_size=(5, 4),\n                  legend_position='top',\n                  legend_text=p9.element_text(size=8),\n                  legend_key_size=8,\n                  )\n       )\n)\n\n\n\n\n\n\n\n\n\n\n(pd.DataFrame(best_npos)\n .assign(sample_id=samples)\n .merge(samples_info)\n .assign(month=lambda dd: pd.to_datetime(dd.date).dt.month_name())\n .rename(columns={0: 'x', 1: 'y'})\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('x', 'y', color='month')\n       + p9.geom_point(size=2.5)\n       + p9.scale_color_manual(values=['#D3894C', '#435B97'])\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.stat_ellipse(p9.aes(fill='month'), geom='polygon', level=.95, alpha=.15)\n       + p9.labs(x='nMDS Dim 1', y='nMDS Dim 2', color='', shape='', fill='')\n       + p9.annotate(geom='text', x=-0, y=1.5,\n                     label='Stress-1 = ' + str(round(best_stress, 2)) +\n                     '    PERMANOVA pseudo-$F$ = 4.0, $p$ = 0.017',\n                     size=9)\n       + p9.scale_y_continuous(expand=(.02, .2))\n       + p9.theme(figure_size=(5, 4),\n                  legend_position='top',\n                  legend_text=p9.element_text(size=8),\n                  legend_key_size=8,\n                  )\n       )\n)\n\n\n\n\n\n\n\n\n\n\nPERMANOVA\n\ndm_pm = DistanceMatrix(dm, ids=samples)\npm_factors = (samples_info\n .query('sample_id not in [\"S06\", \"S14\"]')\n .assign(month=lambda dd: pd.to_datetime(dd.date).dt.month_name())\n .drop(columns=['date'])\n)\npermanova_sample_mode = permanova(dm_pm, pm_factors['sample_mode'])\nprint('PERMANOVA for sample_mode:\\n', permanova_sample_mode)\npermanova_month = permanova(dm_pm, pm_factors['month'])\nprint('\\nPERMANOVA for month:\\n', permanova_month)\n\nPERMANOVA for sample_mode:\n method name               PERMANOVA\ntest statistic name        pseudo-F\nsample size                      20\nnumber of groups                  2\ntest statistic             0.676167\np-value                       0.558\nnumber of permutations          999\nName: PERMANOVA results, dtype: object\n\nPERMANOVA for month:\n method name               PERMANOVA\ntest statistic name        pseudo-F\nsample size                      20\nnumber of groups                  2\ntest statistic             3.999877\np-value                       0.013\nnumber of permutations          999\nName: PERMANOVA results, dtype: object\n\n\n\n\n\nBarplots\n\nf = (abundance_df_phyla\n .melt(['Kingdom', 'Phylum'], var_name='sample_id', value_name='counts')\n .groupby(['Kingdom', 'sample_id'], as_index=False)\n .apply(lambda dd: dd.assign(relative_abundance=dd.counts / dd.counts.sum()))\n .reset_index(drop=True)\n .melt(['Kingdom', 'Phylum', 'sample_id'])\n .assign(value=lambda dd: dd['value'].astype(float))\n .replace('unknown', pd.NA)\n  .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('sample_id', 'value', fill='Phylum')\n       + p9.geom_col()\n       + p9.labs(x='', y='')\n       + p9.guides(fill=p9.guide_legend(ncol=1))\n       + p9.facet_grid(['variable', 'Kingdom'], scales='free_y')\n       + p9.theme(\n           legend_key_size=7,\n           axis_text_x=p9.element_text(angle=90, size=8),\n           figure_size=(6, 3),\n           legend_text=p9.element_text(size=7),\n\n       )\n       )\n ).save('../output/figures/abundance_by_sample_type_phyla.svg')\nImage('../output/figures/abundance_by_sample_type_phyla.png')\n\n\n\n\n\n\n\n\n\nBubble Charts\n\nPhyla\n\n\nShow Code\n(abundance_df_phyla\n .melt(['Kingdom', 'Phylum'], var_name='sample_id')\n .groupby(['Kingdom', 'sample_id'], as_index=False)\n .apply(lambda dd: dd.assign(relative_abundance=lambda dd: dd.value / dd.value.sum()))\n .query('Phylum != \"unknown\"')\n .query('Kingdom == \"Fungi\"')\n .merge(samples_info, on='sample_id')\n .assign(sample_id=lambda dd: 'S' + dd.sample_id.str[-2:])\n  .query('relative_abundance &gt; 0')\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('sample_id', 'reorder(Phylum, relative_abundance)',\n                 size='relative_abundance', color='Kingdom', fill='Kingdom')\n       + p9.geom_point(alpha=.8)\n       + p9.facet_grid(['Kingdom', 'sample_mode'], scales='free', space='free')\n       + p9.scale_size_continuous(trans='log2', range=(.2, 9), labels=percent_format(), \n                                    limits=(.0005, .9), breaks=[.001, .01, .05, .5])\n       + p9.scale_y_discrete(expand=(.35, .35))\n       + p9.guides(size=p9.guide_legend(ncol=1))\n       + p9.scale_fill_manual(values=['#435B97'])\n       + p9.scale_color_manual(values=['#435B97'])\n       + p9.labs(x='', y='', size='Relative Abundance', color='Kingdom',\n                  )\n       + p9.theme(figure_size=(9, 2),\n                  strip_text=p9.element_text(size=12),\n                  axis_text_x=p9.element_text(size=8),\n       \n       )\n )\n).save('../output/figures/abundance_phyla_fungi.svg', bbox_inches='tight')\n\n\n(abundance_df_phyla\n .melt(['Kingdom', 'Phylum'], var_name='sample_id')\n .groupby(['Kingdom', 'sample_id'], as_index=False)\n .apply(lambda dd: dd.assign(relative_abundance=lambda dd: dd.value / dd.value.sum()))\n .query('Phylum != \"unknown\"')\n .query('Kingdom == \"Bacteria\"')\n .query('relative_abundance &gt; 0')\n .merge(samples_info, on='sample_id')\n .assign(sample_id=lambda dd: 'S' + dd.sample_id.str[-2:])\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('sample_id', 'reorder(Phylum, relative_abundance)',\n                 size='relative_abundance', color='Kingdom', fill='Kingdom')\n       + p9.geom_point(alpha=.8)\n       + p9.facet_grid(['Kingdom', 'sample_mode'], scales='free', space='free')\n       + p9.scale_size_continuous(trans='log2', range=(.2, 9), labels=percent_format(), \n                                    limits=(.0005, .9), breaks=[.001, .01, .05, .5])\n       + p9.scale_y_discrete(expand=(.05, .05))\n       + p9.guides(size=p9.guide_legend(ncol=1))\n       + p9.scale_fill_manual(values=['#D3894C'])\n       + p9.scale_color_manual(values=['#D3894C'])\n       + p9.labs(x='', y='', size='Relative Abundance', color='Kingdom',\n                  )\n       + p9.theme(figure_size=(9, 5),\n                  strip_text=p9.element_text(size=12),\n                  axis_text_x=p9.element_blank(),\n                  axis_ticks_major_x=p9.element_blank(),\n       \n       )\n )\n).save('../output/figures/abundance_phyla_bacteria.svg')\n\n# The actual figure is made in Inkscape since plotnine doesn't support\n# facets of different sizes and the difference between the number of bacterial\n# and fungal phyla is too large to make a single figure with the same size\n\nImage('../output/figures/abundance_phyla.png')\n\n\n\n\n\n\n\n\n\n\n\nGenera\nTo represent the diversity and fluctuation of genera across all samples, what we will do is select the top 30 most common (by total number of reads across all 22 samples)\n\ntaxon_names = ['Kingdom', 'Phylum', 'Class', 'Order', 'Family', 'Genus']\n\n\nn = 30\nl = (8 / 20) * n\n\nover_3_samples_genera = samples_per_otu.query('n_samples &gt;= 3').Genus\nselected_bacterial_genera = (abundance_long_genera\n    .query('Kingdom==\"Bacteria\"')\n    .query('Genus not in @inconclusive_list')\n    .query('Genus in @over_3_samples_genera')\n    .groupby(taxon_names)\n    .counts\n    .sum()\n    .sort_values(ascending=False)\n    .iloc[:n]\n    .reset_index()\n    ['Genus'].unique()\n)\n\nselected_fungal_genera = (abundance_long_genera\n    .query('Genus not in @inconclusive_list')\n    .query('Kingdom==\"Fungi\"')\n    .query('Genus in @over_3_samples_genera')\n    .groupby(taxon_names)\n    .counts\n    .sum()\n    .sort_values(ascending=False)\n    .iloc[:n]\n    .reset_index()\n    ['Genus'].unique()\n)\n\n\n\nShow Code\nn = 30\nl = (8 / 20) * n\n\nover_3_samples_genera = samples_per_otu.query('n_samples &gt;= 3').Genus\nselected_bacterial_genera = (abundance_long_genera\n    .query('Kingdom==\"Bacteria\"')\n    .query('Genus not in @inconclusive_list')\n    .query('Genus in @over_3_samples_genera')\n    .groupby(taxon_names)\n    .counts\n    .sum()\n    .sort_values(ascending=False)\n    .iloc[:n]\n    .reset_index()\n    ['Genus'].unique()\n)\n\nselected_fungal_genera = (abundance_long_genera\n    .query('Genus not in @inconclusive_list')\n    .query('Kingdom==\"Fungi\"')\n    .query('Genus in @over_3_samples_genera')\n    .groupby(taxon_names)\n    .counts\n    .sum()\n    .sort_values(ascending=False)\n    .iloc[:n]\n    .reset_index()\n    ['Genus'].unique()\n)\n\nordered_genera = selected_bacterial_genera.tolist() + selected_fungal_genera.tolist()\nordered_genera.reverse()\n\nf = (abundance_long_genera\n .groupby(['Kingdom', 'sample_id'], as_index=False)\n .apply(lambda dd: dd.assign(relative_abundance=lambda dd: dd.counts / dd.counts.sum()))\n .query('Genus in @selected_bacterial_genera or Genus in @selected_fungal_genera')\n .merge(samples_info, on='sample_id')\n .query('relative_abundance &gt; 0')\n .assign(Genus=lambda dd: pd.Categorical(dd.Genus, categories=ordered_genera, ordered=True))\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('sample_id', 'Genus', size='relative_abundance', color='Class', fill='Class')\n       + p9.geom_point(alpha=.8)\n       + p9.facet_grid(['Kingdom', 'sample_mode'], scales='free')\n       + p9.scale_size_continuous(trans='log10', range=(.2, 9), labels=percent_format(), \n                                    limits=(.0005, .9), breaks=[.001, .01, .05, .5])\n       + p9.scale_y_discrete(expand=(.035, .035))\n       + p9.guides(size=p9.guide_legend(ncol=1))\n       + p9.labs(x='', y='', size='Relative Abundance', color='Class',\n                  )\n       + p9.theme(figure_size=(12, l),\n                  strip_text=p9.element_text(size=12),\n                  axis_text=p9.element_text(size=10),\n       \n       )\n )\n )\n\nf.save('../output/figures/top30_genera_bubbles.svg')\nf.draw()\n\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[151], line 5\n      2 n = 30\n      3 l = (8 / 20) * n\n----&gt; 5 over_3_samples_genera = samples_per_otu.query('n_samples &gt;= 3').Genus\n      6 selected_bacterial_genera = (abundance_long_genera\n      7     .query('Kingdom==\"Bacteria\"')\n      8     .query('Genus not in @inconclusive_list')\n   (...)\n     16     ['Genus'].unique()\n     17 )\n     19 selected_fungal_genera = (abundance_long_genera\n     20     .query('Genus not in @inconclusive_list')\n     21     .query('Kingdom==\"Fungi\"')\n   (...)\n     29     ['Genus'].unique()\n     30 )\n\nNameError: name 'samples_per_otu' is not defined\n\n\n\n\ndm_16s = (abundance_df_genera\n .query('Genus!=\"unknown\"')\n .query('Kingdom == \"Bacteria\"')\n .drop(columns=taxon_names[:-1])\n .set_index('Genus')\n .T\n .apply(lambda x: x / x.sum(), axis=1)\n .pipe(lambda dd: pairwise_distances(dd, metric='braycurtis'))\n)\n\n\ndm_its = (abundance_df_genera\n .query('Genus!=\"unknown\"')\n .query('Kingdom == \"Fungi\"')\n .drop(columns=['S06'] + taxon_names[:-1])\n .set_index('Genus')\n .T\n .apply(lambda x: x / x.sum(), axis=1)\n .pipe(lambda dd: pairwise_distances(dd, metric='braycurtis'))\n)\n\n\nsample_columns_s06 = samples_info.query('sample_id not in [\"S06\", \"S14\"]').sample_id\n\nbc_df = (pd.DataFrame(dm, index=sample_columns_s06, columns=sample_columns_s06)\n .reset_index()\n .rename(columns={'index': 'sample_id'})\n .melt('sample_id', var_name='sample_id2', value_name='distance')\n .sort_values(['sample_id', 'sample_id2'])\n .merge(samples_info, on='sample_id')\n .merge(samples_info, left_on='sample_id2', right_on='sample_id', suffixes=['', '_2'])\n .assign(timedelta=lambda dd: pd.to_datetime(dd.date_2) - pd.to_datetime(dd.date))\n .assign(combi=lambda dd: dd['sample_mode'] + r'$\\rightarrow$' + dd['sample_mode_2'])\n)\n\nbc_df_16s = (pd.DataFrame(dm_16s, index=sample_columns, columns=sample_columns)\n .reset_index()\n .rename(columns={'index': 'sample_id'})\n .melt('sample_id', var_name='sample_id2', value_name='distance')\n .sort_values(['sample_id', 'sample_id2'])\n .merge(samples_info, on='sample_id')\n .merge(samples_info, left_on='sample_id2', right_on='sample_id', suffixes=['', '_2'])\n .assign(timedelta=lambda dd: pd.to_datetime(dd.date_2) - pd.to_datetime(dd.date))\n .assign(combi=lambda dd: dd['sample_mode'] + r'$\\rightarrow$' + dd['sample_mode_2'])\n)\n\nbc_df_its = (pd.DataFrame(dm_its, index=sample_columns_s06, columns=sample_columns_s06)\n .reset_index()\n .rename(columns={'index': 'sample_id'})\n .melt('sample_id', var_name='sample_id2', value_name='distance')\n .sort_values(['sample_id', 'sample_id2'])\n .merge(samples_info, on='sample_id')\n .merge(samples_info, left_on='sample_id2', right_on='sample_id', suffixes=['', '_2'])\n .assign(timedelta=lambda dd: pd.to_datetime(dd.date_2) - pd.to_datetime(dd.date))\n .assign(combi=lambda dd: dd['sample_mode'] + r'$\\rightarrow$' + dd['sample_mode_2'])\n)\n\n\n(bc_df\n .query('sample_id &lt; sample_id2')\n .assign(label=lambda dd: dd.distance.astype(str).str[1:4])\n .pipe(lambda dd: p9.ggplot(dd)\n        + p9.aes('sample_id', 'sample_id2', fill='distance')\n        + p9.geom_tile()\n        + p9.scale_fill_continuous('inferno', na_value='white')\n        + p9.theme_classic()\n        + p9.annotate(geom='hline', yintercept=10.5, linetype='dashed')\n        + p9.annotate(geom='vline', xintercept=11.5, linetype='dashed')\n        + p9.geom_text(p9.aes(label='label', color='distance &gt;= .35'), size=8)\n        + p9.scale_color_manual(['white', 'black'])\n        + p9.guides(fill=False, color=False)\n        + p9.labs(x='', y='', title='Bray-Curtis dissimilarity (ITS + 16S)')\n        + p9.theme(\n            axis_text_x=p9.element_text(angle=90),\n            figure_size=(5, 5),\n            dpi=400,\n            title=p9.element_text(size=12, ha='center'),\n            )\n      )\n)\n\n\n\n\n\n\n\n\n\n(bc_df_16s\n .query('sample_id &lt; sample_id2')\n .assign(label=lambda dd: dd.distance.astype(str).str[1:4])\n .pipe(lambda dd: p9.ggplot(dd)\n        + p9.aes('sample_id', 'sample_id2', fill='distance')\n        + p9.geom_tile()\n        + p9.scale_fill_continuous('inferno', na_value='white')\n        + p9.theme_classic()\n        + p9.annotate(geom='hline', yintercept=10.5, linetype='dashed')\n        + p9.annotate(geom='vline', xintercept=11.5, linetype='dashed')\n        + p9.geom_text(p9.aes(label='label', color='distance &gt;= .35'), size=8)\n        + p9.scale_color_manual(['white', 'black'])\n        + p9.guides(fill=False, color=False)\n        + p9.labs(x='', y='', title='Bray-Curtis dissimilarity (16S-only)')\n        + p9.theme(\n            axis_text_x=p9.element_text(angle=90),\n            figure_size=(5, 5),\n            dpi=400,\n            title=p9.element_text(size=12, ha='center'),\n            )\n      )\n)\n\n\n\n\n\n\n\n\n\n(bc_df_its\n .query('sample_id &lt; sample_id2')\n .assign(label=lambda dd: dd.distance.astype(str).str[1:4])\n .pipe(lambda dd: p9.ggplot(dd)\n        + p9.aes('sample_id', 'sample_id2', fill='distance')\n        + p9.geom_tile()\n        + p9.scale_fill_continuous('inferno', na_value='white')\n        + p9.theme_classic()\n        + p9.annotate(geom='hline', yintercept=10.5, linetype='dashed')\n        + p9.annotate(geom='vline', xintercept=11.5, linetype='dashed')\n        + p9.geom_text(p9.aes(label='label', color='distance &gt;= .35'), size=8)\n        + p9.scale_color_manual(['white', 'black'])\n        + p9.guides(fill=False, color=False)\n        + p9.labs(x='', y='', title='Bray-Curtis dissimilarity (ITS-only)')\n        + p9.theme(\n            axis_text_x=p9.element_text(angle=90),\n            figure_size=(5, 5),\n            dpi=400,\n            title=p9.element_text(size=12, ha='center'),\n            )\n      )\n)\n\n\n\n\n\n\n\n\n\n(bc_df\n .loc[lambda dd: dd['timedelta'] &gt;= pd.Timedelta(0)]\n .query('sample_id &lt; sample_id2')\n .assign(label=lambda dd: dd['sample_id'] + r'$\\rightarrow$' + dd['sample_id2'])\n .sort_values('distance')\n  .iloc[[-i for i in range(1, 21)] + [i for i in reversed(range(22))]]\n .assign(label=lambda dd: pd.Categorical(dd.label, categories=dd.label, ordered=True))\n  .assign(time_dist=lambda dd: dd.timedelta.abs().astype(str).str.split(' ').str[:2].str.join(' '))\n   .assign(group=lambda dd: dd.distance.apply(lambda x: '(1) Most similar' if x &lt; .3\n                                         else '(2) Least Similar'))\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('label', 'distance', fill='combi')\n       + p9.coord_flip()\n       + p9.geom_col()\n       + p9.scale_y_continuous(labels=percent_format(), limits=(0, 1.1), breaks=[0, 1/3, 2/3, 1])\n       + p9.facet_wrap('group', ncol=1, scales='free_y')\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97', '#ab2422', '#32a86d'])\n       + p9.geom_text(p9.aes(label='time_dist', y='distance + .01'), size=7, ha='left')\n       + p9.labs(x='', y='Bray Curtis dissimilarity', fill='')\n       + p9.ggtitle('ITS + 16S')\n       + p9.theme(figure_size=(4, 5),\n                  axis_text_y=p9.element_text(size=8),\n                  axis_title_x=p9.element_text(size=10),\n                  legend_title_align='center',\n                  legend_key_size=6,\n                  legend_text=p9.element_text(size=8),\n                  title=p9.element_text(size=11, ha='center'),\n       )\n)\n)\n\n\n\n\n\n\n\n\n\nrange(21)\n\nrange(0, 21)\n\n\n\n(bc_df_16s\n .loc[lambda dd: dd['timedelta'] &gt;= pd.Timedelta(0)]\n .query('sample_id &lt; sample_id2')\n .assign(label=lambda dd: dd['sample_id'] + r'$\\rightarrow$' + dd['sample_id2'])\n .sort_values('distance')\n  .iloc[[-i for i in range(1, 21)] + [i for i in reversed(range(21))]]\n .assign(label=lambda dd: pd.Categorical(dd.label, categories=dd.label, ordered=True))\n  .assign(time_dist=lambda dd: dd.timedelta.abs().astype(str).str.split(' ').str[:2].str.join(' '))\n   .assign(group=lambda dd: dd.distance.apply(lambda x: '(1) Most similar' if x &lt; .29\n                                         else '(2) Least Similar'))\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('label', 'distance', fill='combi')\n       + p9.coord_flip()\n       + p9.geom_col()\n       + p9.scale_y_continuous(labels=percent_format(), limits=(0, 1.1), breaks=[0, 1/3, 2/3, 1])\n       + p9.facet_wrap('group', ncol=1, scales='free_y')\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97', '#ab2422', '#32a86d'])\n       + p9.geom_text(p9.aes(label='time_dist', y='distance + .01'), size=7, ha='left')\n       + p9.labs(x='', y='Bray Curtis dissimilarity', fill='')\n       + p9.ggtitle('16S-only')\n       + p9.theme(figure_size=(4, 5),\n                  axis_text_y=p9.element_text(size=8),\n                  axis_title_x=p9.element_text(size=10),\n                  legend_title_align='center',\n                  legend_key_size=6,\n                  legend_text=p9.element_text(size=8),\n                  title=p9.element_text(size=11, ha='center'),\n       )\n)\n)\n\n\n\n\n\n\n\n\n\n(bc_df_its\n .loc[lambda dd: dd['timedelta'] &gt;= pd.Timedelta(0)]\n .query('sample_id &lt; sample_id2')\n .assign(label=lambda dd: dd['sample_id'] + r'$\\rightarrow$' + dd['sample_id2'])\n .sort_values('distance')\n  .iloc[[-i for i in range(1, 21)] + [i for i in reversed(range(20))]]\n .assign(label=lambda dd: pd.Categorical(dd.label, categories=dd.label, ordered=True))\n  .assign(time_dist=lambda dd: dd.timedelta.abs().astype(str).str.split(' ').str[:2].str.join(' '))\n   .assign(group=lambda dd: dd.distance.apply(lambda x: '(1) Most similar' if x &lt; .3\n                                         else '(2) Least Similar'))\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('label', 'distance', fill='combi')\n       + p9.coord_flip()\n       + p9.geom_col()\n       + p9.scale_y_continuous(labels=percent_format(), limits=(0, 1.1), breaks=[0, 1/3, 2/3, 1])\n       + p9.facet_wrap('group', ncol=1, scales='free_y')\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97', '#ab2422', '#32a86d'])\n       + p9.geom_text(p9.aes(label='time_dist', y='distance + .01'), size=7, ha='left')\n       + p9.labs(x='', y='Bray Curtis dissimilarity', fill='')\n       + p9.ggtitle('ITS-only')\n       + p9.theme(figure_size=(4, 5),\n                  axis_text_y=p9.element_text(size=8),\n                  axis_title_x=p9.element_text(size=10),\n                  legend_title_align='center',\n                  legend_key_size=6,\n                  legend_text=p9.element_text(size=8),\n                  title=p9.element_text(size=11, ha='center'),\n       )\n)\n)\n\n\n\n\n\n\n\n\n\n\n\n\nCorrelation with heavy metals\n\nfrom functools import partial\nfrom scipy.stats import spearmanr\nfrom statsmodels.stats.multitest import fdrcorrection\n\n\nmetals_matrix = pd.read_csv('../data/metals.csv', index_col=0)\nmetals_matrix.columns = metals_matrix.columns.str.replace('S0', 'S', regex=False)\nmetals_matrix = metals_matrix.reset_index().replace('Al2O3', 'Al').set_index('species')\n\n\nn_samples_per_metal = (metals_matrix\n                        .applymap(lambda x: x &gt; 0)\n                        .sum(axis=1)\n                        .rename('n_samples')\n                        .reset_index()\n                        .assign(keep=lambda dd: dd.n_samples &gt; 10)\n)\n\n(n_samples_per_metal.pipe(lambda dd: p9.ggplot(dd) \n                + p9.aes('reorder(species, n_samples)', 'n_samples') \n                + p9.geom_col(p9.aes(alpha='keep'))\n                + p9.scale_alpha_manual(values=[.5, 1])\n                + p9.coord_flip()\n                + p9.guides(alpha=False)\n                + p9.labs(x='', y='Number of Samples over detection limit')\n                + p9.theme(\n                    figure_size=(4, 6),\n                    axis_text_y=p9.element_text(size=8),\n                )\n)\n)\n\n\n\n\n\n\n\n\n\nget_pvals = partial(lambda x, y: spearmanr(x, y).pvalue)\nget_spearmanr = partial(lambda x, y: spearmanr(x, y).correlation)\n\n\nmicro_matrix = (abundance_df_genera\n .drop(columns='S06')\n .query('Genus != \"unknown\"')\n .drop(columns=taxon_names[:-1])\n .set_index('Genus')\n .T\n)\n\n\nmicro_matrix\n\n\n\n\n\n\n\nGenus\nBryocella\nGranulicella\nTerriglobus\nBlastocatella\nRB41\nActinomyces\nMobiluncus\nBifidobacterium\nGardnerella\nScardovia\n...\nHannaella\nVishniacozyma\nCryptococcus\nPapiliotrema\nCutaneotrichosporon\nTrichosporon\nAnthracocystis\nMoesziomyces\nUstilago\nWallemia\n\n\n\n\nS01\n0\n0\n0\n9\n0\n57\n0\n0\n0\n0\n...\n0\n37\n0\n0\n0\n0\n0\n0\n53\n0\n\n\nS02\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n15\n0\n0\n0\n0\n0\n0\n0\n28\n\n\nS03\n37\n200\n166\n0\n0\n3\n0\n0\n0\n0\n...\n0\n2\n0\n46\n0\n0\n172\n52\n90\n0\n\n\nS04\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nS05\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nS07\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n1312\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nS08\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nS09\n0\n0\n0\n0\n0\n0\n7\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nS10\n0\n0\n0\n0\n0\n6\n0\n0\n0\n0\n...\n0\n0\n0\n0\n568\n0\n0\n0\n0\n174\n\n\nS11\n0\n0\n0\n0\n0\n0\n0\n0\n4\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n89\n0\n\n\nS12\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n130\n0\n0\n23\n31\n0\n0\n0\n0\n0\n\n\nS13\n0\n0\n0\n0\n0\n27\n0\n22\n0\n0\n...\n0\n43\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nS15\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nS16\n0\n0\n0\n0\n0\n51\n0\n9\n0\n0\n...\n0\n24\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nS17\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n13\n0\n0\n0\n65\n0\n0\n0\n0\n\n\nS18\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nS19\n10\n0\n0\n0\n26\n48\n0\n68\n0\n0\n...\n7\n4\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nS20\n0\n0\n0\n0\n0\n12\n0\n93\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nS21\n0\n0\n0\n0\n0\n117\n0\n131\n0\n26\n...\n0\n0\n325\n0\n0\n0\n0\n0\n0\n785\n\n\nS22\n0\n0\n0\n0\n0\n57\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n20 rows × 572 columns\n\n\n\n\nflight_samples = [s for s, i in sample_map.items() if i == \"Flight\"]\nground_samples = [s for s, i in sample_map.items() if i == \"Ground\"]\n\n\ncorrs_matrix = (metals_matrix\n                .reset_index()\n                .drop(columns='S14')\n                .loc[lambda dd: dd.species.isin(n_samples_per_metal.query('keep').species)]\n                .set_index('species')\n                .T\n                .apply(lambda dd: micro_matrix.corrwith(dd, axis=0, method=get_spearmanr))\n                .reset_index()\n)\n\np_values_matrix = (metals_matrix\n                .reset_index()\n                .drop(columns='S14')\n                .loc[lambda dd: dd.species.isin(n_samples_per_metal.query('keep').species)]\n                .set_index('species')\n                .T\n                .apply(lambda dd: micro_matrix.corrwith(dd, axis=0, method=get_pvals))\n                .reset_index()\n)\n\n\nflight_present_genera = micro_matrix.loc[flight_samples].map(lambda x: x &gt; 0).T.sum(axis=1).loc[lambda x: x &gt;= 2].index\n\n\ncorrs_matrix_flight = (metals_matrix\n                [flight_samples]\n                .reset_index()\n                .loc[lambda dd: dd.species.isin(n_samples_per_metal.query('keep').species)]\n                .set_index('species')\n                .T\n                .apply(lambda dd: micro_matrix[flight_present_genera].loc[flight_samples].corrwith(dd, axis=0, method=get_spearmanr))\n                .reset_index()\n)\n\np_values_matrix_flight = (metals_matrix\n                [flight_samples]\n                .reset_index()\n                .loc[lambda dd: dd.species.isin(n_samples_per_metal.query('keep').species)]\n                .set_index('species')\n                .T\n                .apply(lambda dd: micro_matrix[flight_present_genera].loc[flight_samples].corrwith(dd, axis=0, method=get_pvals))\n                .reset_index()\n)\n\n\nground_samples.pop(ground_samples.index('S06'))\nground_samples.pop(ground_samples.index('S14'))\n\n'S14'\n\n\n\ncorrs_matrix_ground = (metals_matrix\n                [ground_samples]\n                .reset_index()\n                .loc[lambda dd: dd.species.isin(n_samples_per_metal.query('keep').species)]\n                .set_index('species')\n                .T\n                .apply(lambda dd: micro_matrix.loc[ground_samples].corrwith(dd, axis=0, method=get_spearmanr))\n                .reset_index()\n)\n\np_values_matrix_ground = (metals_matrix\n                [ground_samples]\n                .reset_index()\n                .loc[lambda dd: dd.species.isin(n_samples_per_metal.query('keep').species)]\n                .set_index('species')\n                .T\n                .apply(lambda dd: micro_matrix.loc[ground_samples].corrwith(dd, axis=0, method=get_pvals))\n                .reset_index()\n)\n\n\ncorrs_list = (corrs_matrix\n              .dropna()\n                .melt('Genus', value_name='spearman_r')\n                .merge(p_values_matrix.melt('Genus', value_name='spearman_p_value'))\n                .merge(corrs_matrix.melt('Genus', value_name='spearman_r'))\n                .assign(spearman_fdr=lambda dd: fdrcorrection(dd.spearman_p_value)[1])\n)\n\n\ncorrs_list_flights = (corrs_matrix_flight\n              .dropna()\n              .melt('Genus', value_name='spearman_r')\n              .merge(p_values_matrix_flight.melt('Genus', value_name='spearman_p_value'))\n              .merge(corrs_matrix_flight.melt('Genus', value_name='spearman_r'))\n              .assign(spearman_fdr=lambda dd: fdrcorrection(dd.spearman_p_value)[1])\n)\n\n\ncorrs_list_ground = (corrs_matrix_ground\n                .dropna()\n                .melt('Genus', value_name='spearman_r')\n                .merge(p_values_matrix_ground.melt('Genus', value_name='spearman_p_value'))\n                .merge(corrs_matrix_ground.melt('Genus', value_name='spearman_r'))\n                .assign(spearman_fdr=lambda dd: fdrcorrection(dd.spearman_p_value)[1])\n    )\n\n\nsig_genera = (corrs_matrix\n                      .set_index('Genus')\n                      .apply(lambda x: x.max(), axis=1)\n                      .loc[lambda x: x &gt; .544]\n                      .index.values\n)\n\n\nkingdom_genera = abundance_df_genera[['Kingdom', 'Genus']].drop_duplicates()\n\n\n (corrs_matrix_flight\n .set_index('Genus')\n .apply(lambda x: x.max(), axis=1)\n .reset_index()\n .merge(kingdom_genera)\n#  .groupby(['Kingdom'])\n )\n\n\n\n\n\n\n\n\nGenus\n0\nKingdom\n\n\n\n\n0\nBryocella\n0.789352\nBacteria\n\n\n1\nActinomyces\n0.859856\nBacteria\n\n\n2\nBifidobacterium\n0.812777\nBacteria\n\n\n3\nCorynebacterium\n0.700389\nBacteria\n\n\n4\nLawsonella\n0.499327\nBacteria\n\n\n...\n...\n...\n...\n\n\n203\nFilobasidium\n0.671837\nFungi\n\n\n204\nDioszegia\n0.613251\nFungi\n\n\n205\nHannaella\n0.622799\nFungi\n\n\n206\nVishniacozyma\n0.536602\nFungi\n\n\n207\nUstilago\n0.315244\nFungi\n\n\n\n\n208 rows × 3 columns\n\n\n\n\nsig_genera_flights = (corrs_matrix_flight\n .set_index('Genus')\n .apply(lambda x: x.max(), axis=1)\n .reset_index()\n .merge(kingdom_genera)\n .groupby(['Kingdom'])\n .apply(lambda dd: dd.sort_values(0, ascending=False).iloc[:40])\n .Genus\n .values\n)\nsig_genera_flights\n\narray(['Staphylococcus', 'Dialister', 'Actinomyces', 'Rothia',\n       'Campylobacter', 'Megasphaera', 'Eggerthella', 'Subdoligranulum',\n       'Holdemanella', '[Ruminococcus] gnavus group', 'Barnesiella',\n       'Ruminococcus', 'Pseudomonas', '[Ruminococcus] torques group',\n       'Pygmaiobacter', 'UBA1819', 'Lachnospiraceae UCG-007', 'Megamonas',\n       'Klebsiella', 'Dorea', 'Lachnospiraceae UCG-004', 'Akkermansia',\n       'Bifidobacterium', 'Atopobium', 'Collinsella', 'Asteroleplasma',\n       'Anaerostipes', 'Butyricicoccus', 'Parasutterella',\n       'Flavonifractor', 'Lachnospira', 'Hungatella', 'Epulopiscium',\n       'Christensenellaceae R-7 group', 'Bryocella', 'Faecalitalea',\n       'Acinetobacter', 'UCG-005', 'Streptococcus', 'Lactobacillus',\n       'Penicillium', 'Rhodotorula', 'Malassezia', 'Daedaleopsis',\n       'Lentinula', 'Hypoxylon', 'Filobasidium', 'Stereum', 'Hannaella',\n       'Dioszegia', 'Amyloxenasma', 'Catenulostroma', 'Trametes',\n       'Vuilleminia', 'Stemphylium', 'Sarocladium', 'Vishniacozyma',\n       'Phaeosclera', 'Symmetrospora', 'Coprinopsis', 'Kondoa',\n       'Exophiala', 'Gymnopus', 'Lophiostoma', 'Coniosporium',\n       'Verrucocladosporium', 'Paecilomyces', 'Chaetomium', 'Radulomyces',\n       'Xylodon', 'Incrucipulum', 'Phlebia', 'Acremonium', 'Stanjemonium',\n       'Knufia', 'Torula', 'Cladosporium', 'Phaeosphaeria',\n       'Malasseziaceae_gen_Incertae_sedis', 'Petrophila'], dtype=object)\n\n\n\nsig_genera_ground = (corrs_matrix_ground\n  .set_index('Genus')\n .apply(lambda x: x.max(), axis=1)\n .reset_index()\n .merge(kingdom_genera)\n .groupby(['Kingdom'])\n .apply(lambda dd: dd.sort_values(0, ascending=False).iloc[:40])\n .Genus\n .values\n)\n\n\n(corrs_list\n .loc[lambda dd: dd.Genus.isin(sig_genera)]\n .assign(Genus=lambda dd: dd.Genus.str.split('-').str[-1])\n .pipe(lambda dd: p9.ggplot(dd) \n                + p9.aes('species', 'Genus', fill='spearman_r')\n                + p9.geom_tile()\n                + p9.labs(x='', y='', fill=\"Spearman's $r$\")\n                + p9.geom_text(label='+', data=dd.query('.01 &lt; spearman_p_value &lt; .05'),\n                     size=5, va='center_baseline', color='white')\n                + p9.geom_text(label='$*$', data=dd.query('spearman_p_value &lt; .01'),\n                     size=5, va='center_baseline', color='white')\n                + p9.scale_fill_continuous('RdBu_r', limits=(-.9, .9))\n                + p9.theme(figure_size=(5, 4),\n                           legend_key_size=8,\n                           axis_text_x=p9.element_text(rotation=90, size=7),\n                           axis_text_y=p9.element_text(size=7),\n                           legend_text=p9.element_text(size=7),\n                           legend_title=p9.element_text(size=8),\n                )\n))\n\n\n\n\n\n\n\n\n\n(micro_matrix\n .merge(metals_matrix.T, left_index=True, right_index=True)\n .reset_index()\n .melt('index', var_name='species', value_name='abundance')\n .assign(sample_mode=lambda dd: dd['index'].map(sample_map))\n .query('species.isin([\"Sphingomonas\", \"Zn\"])')\n .pipe(lambda dd: p9.ggplot(dd) + p9.aes('index', 'abundance')\n       + p9.facet_grid(['species', 'sample_mode'], scales='free')\n       + p9.geom_line(group=1)\n       + p9.labs(x='', y='')\n       + p9.theme(figure_size=(5.5, 3),\n                  axis_text_x=p9.element_text(rotation=45, size=8),\n                  )\n       )\n)\n\n\n\n\n\n\n\n\n\nf = (corrs_list\n.query('Genus in @selected_bacterial_genera') \n.assign(Genus=lambda dd: dd.Genus.str.split('-').str[-1])\n .pipe(lambda dd: p9.ggplot(dd) \n                + p9.aes('species', 'Genus', fill='spearman_r')\n                + p9.geom_tile()\n                + p9.labs(x='', y='', fill=\"Spearman's $r$\")\n                + p9.geom_text(label='+', data=dd.query('.01 &lt; spearman_p_value &lt; .05'),\n                     size=5, va='center_baseline', color='white')\n                + p9.geom_text(label='$*$', data=dd.query('spearman_p_value &lt; .01'),\n                     size=5, va='center_baseline', color='white')\n                + p9.scale_fill_continuous('RdBu_r', limits=(-.9, .9))\n                + p9.theme(figure_size=(4.5, 4),\n                           legend_position='top',\n                           legend_key_size=8,\n                           legend_text=p9.element_text(size=7, y=3),\n                           axis_text_x=p9.element_text(rotation=90, size=7),\n                           axis_text_y=p9.element_text(size=7, face='italic'),\n                           legend_title=p9.element_text(size=8),\n                )\n))\nf.save('../output/figures/correlations_bacteria.svg', bbox_inches='tight')\nf.draw()\n\n\n\n\n\n\n\n\n\nf = (corrs_list_flights\n.query('Genus in @selected_bacterial_genera') \n.assign(Genus=lambda dd: dd.Genus.str.split('-').str[-1])\n .pipe(lambda dd: p9.ggplot(dd) \n                + p9.aes('species', 'Genus', fill='spearman_r')\n                + p9.geom_tile()\n                + p9.labs(x='', y='', fill=\"Spearman's $r$\")\n                + p9.geom_text(label='+', data=dd.query('.01 &lt; spearman_p_value &lt; .05'),\n                     size=5, va='center_baseline', color='white')\n                + p9.geom_text(label='$*$', data=dd.query('spearman_p_value &lt; .01'),\n                     size=5, va='center_baseline', color='white')\n                + p9.scale_fill_continuous('RdBu_r', limits=(-.9, .9))\n                + p9.theme(figure_size=(4.5, 4),\n                           legend_position='top',\n                           legend_key_size=8,\n                           legend_text=p9.element_text(size=7, y=3),\n                           axis_text_x=p9.element_text(rotation=90, size=7),\n                           axis_text_y=p9.element_text(size=7),\n                           legend_title=p9.element_text(size=8),\n                )\n))\nf.save('../output/figures/corr_bac_flights.svg', bbox_inches='tight')\nf.draw()\n\n\n\n\n\n\n\n\n\nf = (corrs_list_ground\n .query('Genus in @selected_bacterial_genera') \n.assign(Genus=lambda dd: dd.Genus.str.split('-').str[-1])\n .pipe(lambda dd: p9.ggplot(dd) \n                + p9.aes('species', 'Genus', fill='spearman_r')\n                + p9.geom_tile()\n                + p9.labs(x='', y='', fill=\"Spearman's $r$\")\n                + p9.geom_text(label='+', data=dd.query('.01 &lt; spearman_p_value &lt; .05'),\n                     size=5, va='center_baseline', color='white')\n                + p9.geom_text(label='$*$', data=dd.query('spearman_p_value &lt; .01'),\n                     size=5, va='center_baseline', color='white')\n                + p9.scale_fill_continuous('RdBu_r', limits=(-.9, .9))\n                + p9.theme(figure_size=(4.5, 4),\n                           legend_position='top',\n                           legend_key_size=8,\n                           legend_text=p9.element_text(size=7, y=3),\n                           axis_text_x=p9.element_text(rotation=90, size=7),\n                           axis_text_y=p9.element_text(size=7),\n                           legend_title=p9.element_text(size=8),\n                )\n))\nf.save('../output/figures/corr_bac_ground.svg', bbox_inches='tight')\nf.draw()\n\n\n\n\n\n\n\n\n\nabundance_df_genera.query('Phylum.str.startswith(\"Deino\")')\n\n\n\n\n\n\n\n\nKingdom\nPhylum\nClass\nOrder\nFamily\nGenus\nS01\nS02\nS03\nS04\n...\nS12\nS13\nS15\nS16\nS17\nS18\nS19\nS20\nS21\nS22\n\n\n\n\n129\nBacteria\nDeinococcota\nDeinococci\nDeinococcales\nDeinococcaceae\nDeinococcus\n6\n0\n0\n0\n...\n0\n19\n12\n0\n0\n0\n0\n0\n0\n0\n\n\n130\nBacteria\nDeinococcota\nDeinococci\nDeinococcales\nTrueperaceae\nTruepera\n0\n0\n0\n0\n...\n38\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n2 rows × 27 columns\n\n\n\n\nf = (corrs_list_flights\n.query('Genus in @selected_fungal_genera') \n.assign(Genus=lambda dd: dd.Genus.str.split('-').str[-1])\n .pipe(lambda dd: p9.ggplot(dd) \n                + p9.aes('species', 'Genus', fill='spearman_r')\n                + p9.geom_tile()\n                + p9.labs(x='', y='', fill=\"Spearman's $r$\")\n                + p9.geom_text(label='+', data=dd.query('.01 &lt; spearman_p_value &lt; .05'),\n                     size=5, va='center_baseline', color='white')\n                + p9.geom_text(label='$*$', data=dd.query('spearman_p_value &lt; .01'),\n                     size=5, va='center_baseline', color='white')\n                + p9.scale_fill_continuous('RdBu_r', limits=(-.9, .9))\n                + p9.theme(figure_size=(4, 4),\n                           legend_position='top',\n                           legend_key_size=8,\n                           legend_text=p9.element_text(size=7, y=3),\n                           axis_text_x=p9.element_text(rotation=90, size=7),\n                           axis_text_y=p9.element_text(size=7),\n                           legend_title=p9.element_text(size=8),\n                )\n))\nf.save('../output/figures/corr_fun_flights.svg', bbox_inches='tight')\nf.draw()\n\n\n\n\n\n\n\n\n\nf = (corrs_list_ground\n .query('Genus in @selected_fungal_genera') \n.assign(Genus=lambda dd: dd.Genus.str.split('-').str[-1])\n .pipe(lambda dd: p9.ggplot(dd) \n                + p9.aes('species', 'Genus', fill='spearman_r')\n                + p9.geom_tile()\n                + p9.labs(x='', y='', fill=\"Spearman's $r$\")\n                + p9.geom_text(label='+', data=dd.query('.01 &lt; spearman_p_value &lt; .05'),\n                     size=5, va='center_baseline', color='white')\n                + p9.geom_text(label='$*$', data=dd.query('spearman_p_value &lt; .01'),\n                     size=5, va='center_baseline', color='white')\n                + p9.scale_fill_continuous('RdBu_r', limits=(-.9, .9))\n                + p9.theme(figure_size=(4, 4),\n                           legend_position='top',\n                           legend_key_size=8,\n                           legend_text=p9.element_text(size=7, y=3),\n                           axis_text_x=p9.element_text(rotation=90, size=7),\n                           axis_text_y=p9.element_text(size=7),\n                           legend_title=p9.element_text(size=8),\n                )\n))\n\nf.save('../output/figures/corr_fun_ground.svg', bbox_inches='tight')\nf.draw()\n\n\n\n\n\n\n\n\n\ntop_correlated_genera = (corrs_matrix_flight\n .set_index('Genus')\n .apply(lambda x: x.abs().max(), axis=1)\n .rename('correlation')\n .reset_index()\n .merge(kingdom_genera)\n .groupby(['Kingdom'], as_index=False)\n .apply(lambda dd: dd.sort_values(by='correlation', ascending=False).iloc[:30])\n)\n\n\ntop_correlated_genera = (corrs_matrix_flight\n .set_index('Genus')\n .apply(lambda x: x.abs().max(), axis=1)\n .rename('correlation')\n .reset_index()\n .merge(kingdom_genera)\n .groupby(['Kingdom'], as_index=False)\n .apply(lambda dd: dd.sort_values(by='correlation', ascending=False).iloc[:40])\n)\n\nf = (corrs_list_flights\n .merge(kingdom_genera)\n .merge(top_correlated_genera.sort_values('correlation', ascending=False).iloc[:40][['Genus']], on=['Genus'])\n .assign(Genus=lambda dd: pd.Categorical(dd.Genus, categories=top_correlated_genera.Genus, ordered=True))\n .pipe(lambda dd: p9.ggplot(dd) \n                + p9.aes('Genus', 'species', fill='spearman_r')\n                + p9.geom_tile()\n                + p9.labs(x='', y='', fill=\"Spearman's $r$\")\n                + p9.geom_text(label='+', data=dd.query('.01 &lt; spearman_p_value &lt; .05'),\n                     size=5, va='center_baseline', color='white')\n                + p9.geom_text(label='$*$', data=dd.query('spearman_p_value &lt; .01'),\n                     size=5, va='center_baseline', color='white')\n                + p9.scale_fill_continuous('RdBu_r', limits=(-.9, .9))\n                + p9.theme(figure_size=(4, 4.5),\n                           legend_key_size=8,\n                           axis_text_x=p9.element_text(rotation=90, size=7),\n                           axis_text_y=p9.element_text(size=7),\n                           legend_text=p9.element_text(size=7),\n                           legend_title=p9.element_text(size=8),\n                           legend_position='bottom'\n                )\n)\n)\nf.save('../output/figures/top40_corr.svg')\n\n\n(corrs_list_flights\n .merge(kingdom_genera)\n .merge(top_correlated_genera[['Genus']], on=['Genus'])\n .assign(Genus=lambda dd: pd.Categorical(dd.Genus, categories=top_correlated_genera.Genus, ordered=True))\n .pipe(lambda dd: p9.ggplot(dd) \n                + p9.aes('species', 'Genus', fill='spearman_r')\n                + p9.geom_tile(\n                    # color='black'\n                    )\n                + p9.labs(x='', y='', fill=\"Spearman's $r$\")\n                + p9.geom_text(label='+', data=dd.query('.01 &lt; spearman_p_value &lt; .05'),\n                     size=5, va='center_baseline', color='white')\n                + p9.geom_text(label='$*$', data=dd.query('spearman_p_value &lt; .01'),\n                     size=5, va='center_baseline', color='white')\n                + p9.scale_fill_continuous('RdBu_r', limits=(-.9, .9))\n                + p9.facet_wrap('Kingdom', scales='free_y')\n                + p9.theme(figure_size=(9, 4),\n                           legend_key_size=8,\n                           axis_text_x=p9.element_text(rotation=90, size=7),\n                           axis_text_y=p9.element_text(size=7),\n                           legend_text=p9.element_text(size=7),\n                           legend_title=p9.element_text(size=8),\n                )\n)\n)\n\n\n\n\n\n\n\n\n\n\nf = (corrs_list\n.query('Genus in @selected_bacterial_genera') \n.assign(Genus=lambda dd: dd.Genus.str.split('-').str[-1])\n .pipe(lambda dd: p9.ggplot(dd) \n                + p9.aes('species', 'Genus', fill='spearman_r')\n                + p9.geom_tile()\n                + p9.labs(x='', y='', fill=\"Spearman's $r$\")\n                + p9.geom_text(label='+', data=dd.query('.01 &lt; spearman_p_value &lt; .05'),\n                     size=5, va='center_baseline', color='white')\n                + p9.geom_text(label='$*$', data=dd.query('spearman_p_value &lt; .01'),\n                     size=5, va='center_baseline', color='white')\n                + p9.scale_fill_continuous('RdBu_r', limits=(-.9, .9))\n                + p9.theme(figure_size=(4, 4),\n                           legend_position='top',\n                           legend_key_size=8,\n                           legend_text=p9.element_text(size=7, y=3),\n                           axis_text_x=p9.element_text(rotation=90, size=7),\n                           axis_text_y=p9.element_text(size=7),\n                           legend_title=p9.element_text(size=8),\n                )\n))\nf.save('../output/figures/correlations_bacteria.svg', bbox_inches='tight')\n\n\nf = (corrs_list\n.query('Genus in @selected_fungal_genera') \n.assign(Genus=lambda dd: dd.Genus.str.split('-').str[-1])\n .pipe(lambda dd: p9.ggplot(dd) \n                + p9.aes('species', 'Genus', fill='spearman_r')\n                + p9.geom_tile()\n                + p9.labs(x='', y='', fill=\"Spearman's $r$\")\n                + p9.geom_text(label='+', data=dd.query('.01 &lt; spearman_p_value &lt; .05'),\n                     size=5, va='center_baseline', color='white')\n                + p9.geom_text(label='$*$', data=dd.query('spearman_p_value &lt; .01'),\n                     size=5, va='center_baseline', color='white')\n                + p9.scale_fill_continuous('RdBu_r', limits=(-.9, .9))\n                + p9.theme(figure_size=(4, 4),\n                           legend_position='top',\n                           legend_key_size=8,\n                           legend_text=p9.element_text(size=7, y=3),\n                           axis_text_x=p9.element_text(rotation=90, size=7),\n                           axis_text_y=p9.element_text(size=7),\n                           legend_title=p9.element_text(size=8),\n                )\n))\nf.save('../output/figures/correlations_fungi.svg', bbox_inches='tight')\n\n\nsig_genera = (corrs_matrix\n                      .set_index('Genus')\n                      .apply(lambda x: x.max(), axis=1)\n                      .loc[lambda x: x &gt; .544]\n                      .index.values\n)\n\n(corrs_list\n .loc[lambda dd: dd.Genus.isin(sig_genera)]\n .assign(Genus=lambda dd: dd.Genus.str.split('-').str[-1])\n .pipe(lambda dd: p9.ggplot(dd) \n                + p9.aes('species', 'Genus', fill='spearman_r')\n                + p9.geom_tile()\n                + p9.labs(x='', y='', fill=\"Spearman's $r$\")\n                + p9.geom_text(label='+', data=dd.query('.01 &lt; spearman_p_value &lt; .05'),\n                     size=5, va='center_baseline', color='white')\n                + p9.geom_text(label='$*$', data=dd.query('spearman_p_value &lt; .01'),\n                     size=5, va='center_baseline', color='white')\n                + p9.scale_fill_continuous('RdBu_r', limits=(-.9, .9))\n                + p9.theme(figure_size=(5, 4),\n                           legend_key_size=8,\n                           axis_text_x=p9.element_text(rotation=90, size=7),\n                           axis_text_y=p9.element_text(size=7),\n                           legend_text=p9.element_text(size=7),\n                           legend_title=p9.element_text(size=8),\n                )\n))\n\n\n\n\n\n\n\n\n\n\nPathogen bubble plots\n\nbac_pathogens_df = (\n    pd.read_excel('../data/Species 2023_final.xlsx',\n                  sheet_name='JV analysis_Bacteria')\n                  [['Genus', 'Species']]\n    .assign(label='Bacterial Potential Human Pathogens')\n)\n\nfungi_pathogens_df = (pd.read_excel('../data/Species 2023_final.xlsx',\n                                     sheet_name='JV analysis_Fungi', \n                                     skiprows=1)\n                       [['Genus', 'Species']]\n                       .dropna()\n    .assign(label='Fungal Potential Human Pathogens') \n)\n\n\ntaxon_names = ['Kingdom', 'Phylum', 'Class', 'Order', 'Family', 'Genus', 'Species']\n\n\nfun_df_sp = (pd.read_csv('../data/nov23/ITS/bootstrap90/reduced_ITS_species_(ASV+taxonomy+S1-S22)_90_NB.csv')\n          .query('Kingdom == \"k__Fungi\"')\n)\nfun_df_sp[taxon_names] = fun_df_sp[taxon_names].apply(lambda x: x.str.split('__').str[-1])\nfun_df_sp = fun_df_sp.rename(columns=zfill_map).fillna('unknown')\n\nbac_df_sp = (pd.read_csv('../data/nov23/16S/Boostraping RDP_NBC_90/reduced_16S_species_(ASV+taxonomy+S1-S22)_90_NB.csv')\n            .rename(columns=zfill_map)\n            .assign(Genus=lambda dd: dd.Genus.str.replace(' ', '_'))\n            .fillna('unknown')\n)\n\n\n(bac_df_sp.query('Genus==\"Serratia\"').set_index(taxon_names).T.sum().reset_index()\n .assign(freq=lambda dd: dd[0] / dd[0].sum())\n)\n\n\n\n\n\n\n\n\nKingdom\nPhylum\nClass\nOrder\nFamily\nGenus\nSpecies\n0\nfreq\n\n\n\n\n0\nBacteria\nProteobacteria\nGammaproteobacteria\nEnterobacterales\nYersiniaceae\nSerratia\nmarcescens\n131\n0.0298\n\n\n1\nBacteria\nProteobacteria\nGammaproteobacteria\nEnterobacterales\nYersiniaceae\nSerratia\nunknown\n4265\n0.9702\n\n\n\n\n\n\n\n\nf = (pd.concat([bac_df_sp, fun_df_sp])\n.merge(pd.concat([bac_pathogens_df, fungi_pathogens_df]),\n       on=['Genus', 'Species'], how='right')\n.drop(columns=taxon_names[:-2])\n.assign(label=lambda dd: dd.label.fillna('Fungal Human Pathogens'))\n.melt(['Genus', 'Species', 'label'], var_name='sample_id', value_name='counts')\n.merge(samples_info, on='sample_id')\n.groupby(['label', 'sample_mode', 'sample_id'])\n.aggregate({'counts': 'sum'})\n.reset_index()\n.groupby(['label', 'sample_mode'])\n.aggregate({'counts': 'mean'})\n.reset_index()\n.assign(Kingdom=lambda dd: dd.label.str.split().str[0])\n.replace({'Kingdom': {'Bacterial': 'Bacteria', 'Fungal': 'Fungi'}})\n.assign(label=lambda dd: dd.label.str.split().str[1:].str.join(' '))\n.pipe(lambda dd: p9.ggplot(dd) + p9.aes('label', 'counts', fill='sample_mode')\n+ p9.geom_col(position='dodge')\n+ p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n+ p9.facet_wrap('Kingdom', scales='free_x', ncol=1)\n+ p9.labs(x='', y='Read counts', fill='')\n+ p9.coord_flip()\n+ p9.theme(legend_position='top',\n           figure_size=(5, 5),\n           strip_text=p9.element_text(size=12),\n           )\n)\n)\nf.save('../output/figures/pathogens_bars.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\nall_species_df = (pd.read_csv('../data/nov23/ALL_AND_BLANKS_WITH_POOLS/complete_table_naivebayes.csv')\n                  .assign(Genus=lambda dd: dd.Genus.str.replace(' ', '_'))\n                  )\nblank_species_df = (pd.read_csv('../data/nov23/ALL_AND_BLANKS_WITH_POOLS/complete_table_naivebayes.csv')\n .query('Species.notna()')\n .assign(Genus=lambda dd: dd.Genus.str.replace(' ', '_'))\n [[ 'Genus', 'Species', 'Blank-Flightpoolsubsampled', 'Blank-Groundpoolsubsampled']]\n .melt(['Genus', 'Species'], var_name='sample_id', value_name='counts')\n .assign(sample_label=lambda dd: \n         np.where(dd.sample_id.str.contains('Flight'), 'Flight Blanks', 'Ground Blanks'))\n .drop(columns='sample_id')\n .groupby(['Genus', 'Species', 'sample_label'])\n        .aggregate({'counts': 'sum'})\n .reset_index()\n .groupby('sample_label', as_index=False)\n .apply(lambda dd: dd.assign(relative_abundance=lambda dd: dd.counts / dd.counts.sum()))\n)\n\n\ntaxon_names = ['Kingdom', 'Phylum', 'Class', 'Order', 'Family', 'Genus', 'Species']\nsample_fun_path = (fun_df_sp\n    .assign(Species=lambda dd: dd.Species.str.split('__').str[-1])\n    .melt(taxon_names, var_name='sample_id', value_name='counts')\n    .assign(sample_mode=lambda dd: dd.sample_id.map(sample_map))\n    .assign(sample_label=lambda dd: dd.sample_mode + ' samples')\n    .groupby(['Genus', 'Species', 'sample_label'])\n    .aggregate({'counts': 'sum'})\n    .groupby('sample_label', as_index=False)\n    .apply(lambda dd: dd.assign(relative_abundance=lambda dd: dd.counts / dd.counts.sum()))\n    .reset_index()\n    .merge(fungi_pathogens_df)\n)\n\n\nblank_bac_pathogens = (all_species_df\n .fillna('unknown')\n .groupby(['Genus', 'Species'])\n .sum(numeric_only=True)\n [['Blank-Flightpoolsubsampled', 'Blank-Groundpoolsubsampled']]\n .reset_index()\n .melt(['Genus', 'Species'])\n .groupby('variable')\n .apply(lambda dd: dd.assign(relative_abundance=lambda dd: dd.value / dd.value.sum()))\n .merge(bac_pathogens_df, on=['Genus', 'Species'], how='right')\n .assign(value=lambda dd: dd.value.fillna(0))\n .query('variable.notna()')\n .replace({\n     'Blank-Flightpoolsubsampled': 'Flight Blanks',\n     'Blank-Groundpoolsubsampled': 'Ground Blanks'\n })\n .rename(columns={'variable': 'sample_label'})\n)\n\n\nsamples_pathogens_bac_df = (bac_df_sp\n .fillna('unknown')\n .groupby(['Genus', 'Species'])\n .sum(numeric_only=True)\n .reset_index()\n .melt(['Genus', 'Species'])\n .assign(value=lambda dd: dd.value.fillna(0))\n .query('variable.notna()')\n .assign(sample_mode=lambda dd: dd.variable.map(sample_map))\n .groupby(['Genus', 'Species', 'sample_mode'], as_index=False)\n .value\n .mean()\n .round(1)\n .assign(sample_label=lambda dd: dd.sample_mode + ' samples')\n .groupby('sample_label', as_index=False)\n .apply(lambda dd: dd.assign(relative_abundance=lambda dd: dd.value / dd.value.sum()))\n .merge(bac_pathogens_df, on=['Genus', 'Species'], how='right')\n .drop(columns='sample_mode')\n)\n\n\nbac_names = (pd.concat([blank_bac_pathogens, samples_pathogens_bac_df])\n .query('sample_label.notna()')\n .pivot(index=['Genus', 'Species'], columns='sample_label', values='relative_abundance')\n .fillna(0)\n .loc[lambda dd: dd.sum(axis=1) &gt; 0]\n .loc[lambda dd: dd.max(axis=1).round(5) &gt;= .0001]\n .reset_index()\n .assign(total=lambda dd: dd['Flight samples'] + dd['Ground samples'])\n .sort_values('total')\n .assign(name=lambda dd: dd.Genus.str[0] + '. ' + dd.Species)\n ['name']\n)\n\n\nf = (pd.concat([blank_bac_pathogens, samples_pathogens_bac_df])\n .query('sample_label.notna()')\n .pivot(index=['Genus', 'Species'], columns='sample_label', values='relative_abundance')\n .fillna(0)\n .loc[lambda dd: dd.sum(axis=1) &gt; 0]\n .loc[lambda dd: dd.max(axis=1).round(5) &gt;= .0001]\n .reset_index()\n .melt(['Genus', 'Species'], value_name='relative_abundance')\n .assign(Genus_short=lambda dd: dd.Genus.str[0] + '. ')\n .assign(fullname=lambda dd: dd.Genus_short + dd.Species)\n .query('fullname != \"C. gingivalis\"')\n .assign(sample_label=lambda dd: dd.sample_label.str.replace(' ', '\\n'))\n .assign(sample_label=lambda dd: \n         pd.Categorical(dd.sample_label,\n    categories=['Flight\\nsamples', 'Ground\\nsamples',\n                'Flight\\nBlanks', 'Ground\\nBlanks'])\n    )\n .merge(bac_pathogens_df)\n .assign(fullname=lambda dd: pd.Categorical(dd.fullname, categories=bac_names, ordered=True))\n .pipe(lambda dd: p9.ggplot(dd)\n    + p9.aes('fullname', 'sample_label')\n    + p9.geom_tile(p9.aes(fill='relative_abundance &gt; 0'), color='black')\n    + p9.coord_flip()\n    + p9.geom_text(p9.aes(label='round(relative_abundance * 100, 3).astype(str) + \"%\"'), size=8)\n    + p9.labs(x='', y='')\n#     + p9.facet_wrap('label', scales='free_y', ncol=1)\n    + p9.scale_x_discrete(expand=(0, 0), trans='reverse')\n    + p9.scale_y_discrete(expand=(0, 0))\n    + p9.guides(fill=False)\n    + p9.theme(figure_size=(3.5, 8),\n               axis_text_x=p9.element_text(size=8),\n               axis_text_y=p9.element_text(size=8, face='italic'),\n               strip_text=p9.element_text(size=8),\n               )\n       )\n)\nf.save('../output/figures/bac_pathogens_table.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\nfun_names = (pd.concat([sample_fun_path, blank_species_df])\n .pivot(index=['Genus', 'Species'], columns='sample_label', values='relative_abundance')\n .fillna(0)\n .loc[lambda dd: dd.sum(axis=1) &gt; 0]\n .loc[lambda dd: dd.max(axis=1) &gt; .0001]\n .reset_index()\n .merge(pathogenic_fungi_df)\n .assign(total=lambda dd: dd['Flight samples'] + dd['Ground samples'])\n .sort_values('total')\n .assign(name=lambda dd: dd.Genus.str[0] + '. ' + dd.Species)\n ['name']\n\n)\n\n\nf = (pd.concat([sample_fun_path, blank_species_df])\n .pivot(index=['Genus', 'Species'], columns='sample_label', values='relative_abundance')\n .fillna(0)\n .reset_index()\n .melt(['Genus', 'Species'], var_name='sample_label', value_name='relative_abundance')\n .merge(pathogenic_fungi_df)\n .assign(Genus_short=lambda dd: dd.Genus.str[0] + '. ')\n .assign(fullname=lambda dd: dd.Genus_short + dd.Species)\n .assign(sample_label=lambda dd: dd.sample_label.str.replace(' ', '\\n'))\n .assign(sample_label=lambda dd: dd.sample_label.str.replace('Samples', 'samples'))\n .query('fullname.isin(@fun_names)')\n .assign(sample_label=lambda dd: pd.Categorical(dd.sample_label,\n                      categories=['Flight\\nsamples', 'Ground\\nsamples', 'Flight\\nBlanks', 'Ground\\nBlanks']))\n .assign(fullname=lambda dd: pd.Categorical(dd.fullname, categories=fun_names, ordered=True))\n .pipe(lambda dd: p9.ggplot(dd)\n    + p9.aes('fullname', 'sample_label')\n    + p9.geom_tile(p9.aes(fill='relative_abundance &gt; 0'), color='black')\n    + p9.coord_flip()\n    + p9.geom_text(p9.aes(label='round(relative_abundance * 100, 3).astype(str) + \"%\"'), size=8)\n    + p9.labs(x='', y='')\n    + p9.facet_wrap('label', scales='free_y', ncol=1)\n    + p9.scale_x_discrete(expand=(0, 0), trans='reverse')\n    + p9.scale_y_discrete(expand=(0, 0))\n    + p9.guides(fill=False)\n    + p9.theme(figure_size=(3.5, 4.5),\n               axis_text_x=p9.element_text(size=8),\n               strip_text=p9.element_text(size=8),\n       )\n)\n)\nf.save('../output/figures/fun_pathogens_table.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\n(bac_df_sp\n .drop(columns=taxon_names[:-2])\n .merge(bac_pathogens_df, on=['Genus', 'Species'], how='right')\n .melt(['Genus', 'Species', 'label'], var_name='sample_id', value_name='counts')\n .assign(sample_mode=lambda dd: dd.sample_id.map(sample_map))\n .assign(name=lambda dd: dd.Genus.str[0] + '. ' + dd.Species)\n .assign(name=lambda dd: pd.Categorical(dd.name, categories=bac_names, ordered=True))\n .dropna()\n .query('counts &gt; 0')\n .name.nunique()\n)\n\n46\n\n\n\nf = (bac_df_sp\n .drop(columns=taxon_names[:-2])\n .merge(bac_pathogens_df, on=['Genus', 'Species'], how='right')\n .melt(['Genus', 'Species', 'label'], var_name='sample_id', value_name='counts')\n .assign(sample_mode=lambda dd: dd.sample_id.map(sample_map))\n .assign(name=lambda dd: dd.Genus.str[0] + '. ' + dd.Species)\n .assign(name=lambda dd: pd.Categorical(dd.name, categories=bac_names, ordered=True))\n .dropna()\n .query('counts &gt; 0')\n .pipe(lambda dd: p9.ggplot(dd)\n      + p9.aes('sample_id',\n               'name',\n               size='counts',\n               color='sample_mode',\n               fill='sample_mode')\n       + p9.geom_point(alpha=.8)\n       + p9.scale_y_discrete(expand=(.015, .015))\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.scale_color_manual(values=['#D3894C', '#435B97'])\n       + p9.guides(size=p9.guide_legend(ncol=1))\n       + p9.labs(x='', y='', size='Total Reads', color='', fill='',\n                  )\n      #  + p9.facet_wrap('label', ncol=1, scales='free_y')\n       + p9.theme(figure_size=(3.5, 9.5),\n                  strip_text=p9.element_text(size=12),\n                  axis_text_y=p9.element_blank(),\n                  axis_ticks_y=p9.element_blank(),\n                  axis_text_x=p9.element_text(angle=90),\n                  legend_position='bottom',\n                  legend_direction='horizontal',\n       \n       )\n )\n)\nf.save('../output/figures/bac_pathogens_samples.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\nf = (fun_df_sp\n .drop(columns=taxon_names[:-2])\n .merge(pathogenic_fungi_df, on=['Genus', 'Species'], how='right')\n .melt(['Genus', 'Species', 'label'], var_name='sample_id', value_name='counts')\n .assign(sample_mode=lambda dd: dd.sample_id.map(sample_map))\n .assign(name=lambda dd: dd.Genus.str[0] + '. ' + dd.Species)\n .assign(name=lambda dd: pd.Categorical(dd.name, categories=fun_names, ordered=True))\n  .dropna()\n .query('counts &gt; 0')\n .pipe(lambda dd: p9.ggplot(dd)\n      + p9.aes('sample_id',\n               'name',\n               size='counts',\n               color='sample_mode',\n               fill='sample_mode')\n       + p9.geom_point(alpha=.8)\n       + p9.scale_y_discrete(expand=(.035, .035))\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.scale_color_manual(values=['#D3894C', '#435B97'])\n       + p9.guides(size=p9.guide_legend(ncol=1))\n       + p9.labs(x='', y='', size='Total Reads', color='', fill='',\n                  )\n       + p9.facet_wrap('label', ncol=1, scales='free_y')\n       + p9.theme(figure_size=(6, 4.5),\n                  strip_text=p9.element_text(size=12),\n                  axis_text=p9.element_text(size=10),\n                  axis_text_x=p9.element_text(angle=90),\n       \n       )\n )\n)\n\nf.save('../output/figures/fun_pathogens_samples.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\n(pd.concat([blank_bac_pathogens, samples_pathogens_bac_df])\n .query('sample_label.notna()')\n .pivot(index=['Genus', 'Species'], columns='sample_label', values='relative_abundance')\n .fillna(0)\n .loc[lambda dd: dd.sum(axis=1) &gt; 0]\n .shape\n)\n\n(41, 4)\n\n\n\nsample_fun_path\n\n\n\n\n\n\n\n\nlevel_0\nGenus\nSpecies\nsample_label\ncounts\nrelative_abundance\n\n\n\n\n0\n0\nAureobasidium\npullulans\nFlight samples\n3234\n0.004145\n\n\n1\n0\nCandida\nparapsilosis\nFlight samples\n37\n0.000047\n\n\n2\n0\nCandida\nzeylanoides\nFlight samples\n0\n0.000000\n\n\n3\n0\nCladosporium\nhalotolerans\nFlight samples\n0\n0.000000\n\n\n4\n0\nCladosporium\nherbarum\nFlight samples\n18053\n0.023141\n\n\n5\n0\nCutaneotrichosporon\ndebeurmannianum\nFlight samples\n0\n0.000000\n\n\n6\n0\nCystobasidium\nslooffiae\nFlight samples\n712\n0.000913\n\n\n7\n0\nExophiala\noligosperma\nFlight samples\n724033\n0.928078\n\n\n8\n0\nMalassezia\nglobosa\nFlight samples\n7634\n0.009785\n\n\n9\n0\nMalassezia\nrestricta\nFlight samples\n20547\n0.026338\n\n\n10\n0\nMalassezia\nsympodialis\nFlight samples\n433\n0.000555\n\n\n11\n0\nNaganishia\ndiffluens\nFlight samples\n276\n0.000354\n\n\n12\n0\nSarocladium\nkiliense\nFlight samples\n5062\n0.006489\n\n\n13\n0\nSterigmatomyces\nhalophilus\nFlight samples\n56\n0.000072\n\n\n14\n0\nTrichosporon\nasahii\nFlight samples\n65\n0.000083\n\n\n15\n1\nAureobasidium\npullulans\nGround samples\n3611\n0.005121\n\n\n16\n1\nCandida\nparapsilosis\nGround samples\n0\n0.000000\n\n\n17\n1\nCandida\nzeylanoides\nGround samples\n162\n0.000230\n\n\n18\n1\nCladosporium\nhalotolerans\nGround samples\n1498\n0.002124\n\n\n19\n1\nCladosporium\nherbarum\nGround samples\n21110\n0.029936\n\n\n20\n1\nCutaneotrichosporon\ndebeurmannianum\nGround samples\n31\n0.000044\n\n\n21\n1\nCystobasidium\nslooffiae\nGround samples\n0\n0.000000\n\n\n22\n1\nExophiala\noligosperma\nGround samples\n620463\n0.879886\n\n\n23\n1\nMalassezia\nglobosa\nGround samples\n14631\n0.020748\n\n\n24\n1\nMalassezia\nrestricta\nGround samples\n25462\n0.036108\n\n\n25\n1\nMalassezia\nsympodialis\nGround samples\n28\n0.000040\n\n\n26\n1\nNaganishia\ndiffluens\nGround samples\n1534\n0.002175\n\n\n27\n1\nSarocladium\nkiliense\nGround samples\n7180\n0.010182\n\n\n28\n1\nSterigmatomyces\nhalophilus\nGround samples\n9453\n0.013405\n\n\n29\n1\nTrichosporon\nasahii\nGround samples\n0\n0.000000\n\n\n\n\n\n\n\n\nsample_fun_path.groupby(['sample_label'])['relative_abundance'].sum() * 100\n\nsample_label\nFlight samples    64.838768\nGround samples    70.998165\nName: relative_abundance, dtype: float64\n\n\n\nsamples_pathogens_bac_df.groupby(['sample_label'])['relative_abundance'].sum() * 100\n\nsample_label\nFlight samples    0.683429\nGround samples    0.634687\nName: relative_abundance, dtype: float64\n\n\n\nf = (pd.concat([blank_bac_pathogens, samples_pathogens_bac_df])\n .query('sample_label.notna()')\n .pivot(index=['Genus', 'Species'], columns='sample_label', values='relative_abundance')\n .fillna(0)\n .loc[lambda dd: dd.sum(axis=1) &gt; 0]\n .reset_index()\n .melt(['Genus', 'Species'], value_name='relative_abundance')\n .assign(Genus_short=lambda dd: dd.Genus.str[0] + '. ')\n .assign(fullname=lambda dd: dd.Genus_short + dd.Species)\n .assign(sample_label=lambda dd: dd.sample_label.str.replace(' ', '\\n'))\n .assign(sample_label=lambda dd: \n         pd.Categorical(dd.sample_label,\n    categories=['Flight\\nsamples', 'Ground\\nsamples',\n                'Flight\\nBlanks', 'Ground\\nBlanks'])\n    )\n .merge(bac_pathogens_df)\n .query('label.str.contains(\"Opportunistic\")')\n .pipe(lambda dd: p9.ggplot(dd)\n    + p9.aes('fullname', 'sample_label')\n    + p9.geom_tile(p9.aes(fill='relative_abundance &gt; 0'), color='black')\n    + p9.coord_flip()\n    + p9.geom_text(p9.aes(label='round(relative_abundance * 100, 3).astype(str) + \"%\"'), size=8)\n    + p9.labs(x='', y='')\n    + p9.facet_wrap('label', scales='free_y', ncol=1)\n    + p9.scale_x_discrete(expand=(0, 0), trans='reverse')\n    + p9.scale_y_discrete(expand=(0, 0))\n    + p9.theme(figure_size=(3.5, 5), strip_text=p9.element_text(size=7.5))\n    + p9.guides(fill=False)\n       )\n)\nf.save('../output/figures/bac_opp_pathogens_table.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\nfun_names = (fun_df_sp\n .drop(columns=taxon_names[:-2])\n .merge(fungi_pathogens_df, on=['Genus', 'Species'], how='right')\n .melt(['Genus', 'Species'], var_name='sample_id', value_name='counts')\n .assign(sample_mode=lambda dd: dd.sample_id.map(sample_map))\n .assign(name=lambda dd: dd.Genus.str[0] + '. ' + dd.Species)\n .assign(label='Fungal Human Pathogens')\n .query('counts &gt; 0')\n .query('sample_mode == \"Flight\"')\n .groupby('name')\n ['counts']\n .sum()\n .sort_values()\n .index\n .values\n)\n\nbac_path_names = (bac_df_sp\n    .merge(bac_pathogens_df\n           .query('label == \"Bacterial Human Pathogens\"'),\n           on=['Genus', 'Species'], how='right')\n    .assign(Genus=lambda dd: dd.Genus.str[0] + '.')\n    .drop(columns=taxon_names[:-2] + ['label'])\n    .melt(['Genus', 'Species'], var_name='sample_id', value_name='counts')\n    .assign(sample_mode=lambda dd: dd.sample_id.map(sample_map))\n    .assign(name=lambda dd: dd.Genus + ' ' + dd.Species)\n    .query('counts &gt; 0')\n    .query('sample_mode == \"Flight\"')\n    .groupby('name')\n    .aggregate({'counts': 'sum'})\n    .sort_values('counts')\n    .index.values\n)\n\nbac_opp_path_names = (bac_df_sp\n    .merge(bac_pathogens_df\n           .query('label == \"Bacterial Opportunistic Human Pathogens\"'),\n           on=['Genus', 'Species'], how='right')\n    .assign(Genus=lambda dd: dd.Genus.str[0] + '.')\n    .drop(columns=taxon_names[:-2] + ['label'])\n    .melt(['Genus', 'Species'], var_name='sample_id', value_name='counts')\n    .assign(sample_mode=lambda dd: dd.sample_id.map(sample_map))\n    .assign(name=lambda dd: dd.Genus + ' ' + dd.Species)\n    .query('counts &gt; 0')\n    .query('sample_mode == \"Flight\"')\n    .groupby('name')\n    .aggregate({'counts': 'sum'})\n    .sort_values('counts')\n    .index.values\n)\n\nextra_opp = (bac_pathogens_df\n.query('label == \"Bacterial Opportunistic Human Pathogens\"')\n .assign(name=lambda dd: dd.Genus + ' ' + dd.Species)\n.query('name not in @bac_opp_path_names')\n.merge(bac_df_sp, on=['Genus', 'Species'], how='left')\n.drop(columns=taxon_names + ['label'])\n.melt(['name'], var_name='sample_id', value_name='counts')\n.groupby('name')\n.aggregate({'counts': 'sum'})\n.sort_values('counts')\n.index.values\n)\n\nextra_fun = (fungi_pathogens_df\n.assign(name=lambda dd: dd.Genus.str[0] + '. ' + dd.Species)\n.query('name not in @fun_names')\n.merge(fun_df_sp, on=['Genus', 'Species'], how='left')\n.drop(columns=taxon_names)\n.melt(['name'], var_name='sample_id', value_name='counts')\n.groupby('name')\n.aggregate({'counts': 'sum'})\n.sort_values('counts')\n.index.values\n)\n\nbac_opp_path_names = np.concatenate([extra_opp, bac_opp_path_names])\nfun_names = np.concatenate([extra_fun, fun_names])\n\n\nbac_opp_path_names\n\narray(['Porphyromonas gingivalis', 'Cardiobacterium valvarum',\n       'Fusobacterium gonidiaformans', 'Aggregatibacter aphrophilus',\n       'Campylobacter ureolyticus', 'Corynebacterium durum',\n       'Capnocytophaga leadbetteri', 'Prevotella disiens',\n       'Acinetobacter baumannii', 'Parabacteroides goldsteinii',\n       'Chryseobacterium hominis', 'Capnocytophaga gingivalis',\n       'Campylobacter gracilis', 'Ralstonia pickettii',\n       'Ralstonia insidiosa', 'Alloiococcus otitis',\n       'Bilophila wadsworthia', 'Rothia dentocariosa',\n       'Campylobacter concisus', 'Eggerthella lenta',\n       'Staphylococcus equorum', 'Bacteroides eggerthii',\n       'Ruminococcus bicirculans', 'Bacteroides plebeius',\n       'Acinetobacter johnsonii', 'Cutibacterium acnes', 'C. ureolyticus',\n       'F. gonidiaformans', 'C. leadbetteri', 'A. aphrophilus',\n       'R. pickettii', 'P. goldsteinii', 'R. dentocariosa', 'C. gracilis',\n       'S. equorum', 'C. gingivalis', 'E. lenta', 'B. wadsworthia',\n       'C. concisus', 'B. eggerthii', 'R. bicirculans', 'A. johnsonii',\n       'B. plebeius', 'C. acnes'], dtype=object)\n\n\n\npathogenic_fungi_df.dtypes\n\nGenus      object\nSpecies    object\nlabel      object\ndtype: object\n\n\n\n(\n    fun_df_sp\n .drop(columns=taxon_names[:-2])\n .merge(pathogenic_fungi_df, on=['Genus', 'Species'], how='right')\n .melt(['Genus', 'Species', 'label'], var_name='sample_id', value_name='counts')\n .assign(sample_mode=lambda dd: dd.sample_id.map(sample_map))\n .assign(name=lambda dd: dd.Genus.str[0] + '. ' + dd.Species)\n .assign(label='Fungal Human Pathogens')\n)\n\n\n\n\n\n\n\n\nGenus\nSpecies\nlabel\nsample_id\ncounts\nsample_mode\nname\n\n\n\n\n0\nAcremonium\ncavaraeanum\nFungal Human Pathogens\nS01\n0\nFlight\nA. cavaraeanum\n\n\n1\nAcremonium\nfusidioides\nFungal Human Pathogens\nS01\n0\nFlight\nA. fusidioides\n\n\n2\nAcremonium\nhyalinulum\nFungal Human Pathogens\nS01\n0\nFlight\nA. hyalinulum\n\n\n3\nAlternaria\nmetachromatica\nFungal Human Pathogens\nS01\n4384\nFlight\nA. metachromatica\n\n\n4\nAlternaria\nrosae\nFungal Human Pathogens\nS01\n44\nFlight\nA. rosae\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n595\nSaccharomyces\ncerevisiae\nFungal Human Pathogens\nS22\n0\nGround\nS. cerevisiae\n\n\n596\nSarocladium\nkiliense\nFungal Human Pathogens\nS22\n4109\nGround\nS. kiliense\n\n\n597\nSarocladium\nsubulatum\nFungal Human Pathogens\nS22\n0\nGround\nS. subulatum\n\n\n598\nSarocladium\nzeae\nFungal Human Pathogens\nS22\n0\nGround\nS. zeae\n\n\n599\nTrichosporon\nasahii\nFungal Human Pathogens\nS22\n0\nGround\nT. asahii\n\n\n\n\n600 rows × 7 columns\n\n\n\n\nfun_names = (fun_df_sp\n .drop(columns=taxon_names[:-2])\n .merge(pathogenic_fungi_df, on=['Genus', 'Species'], how='right')\n .melt(['Genus', 'Species', 'label'], var_name='sample_id', value_name='counts')\n .groupby(['Genus', 'Species'])\n .counts\n .sum()\n .sort_values()\n .reset_index()\n .assign(name=lambda dd: dd.Genus.str[0] + '. ' + dd.Species)\n .name\n)\n(fun_df_sp\n .drop(columns=taxon_names[:-2])\n .merge(pathogenic_fungi_df, on=['Genus', 'Species'], how='right')\n .melt(['Genus', 'Species', 'label'], var_name='sample_id', value_name='counts')\n .assign(sample_mode=lambda dd: dd.sample_id.map(sample_map))\n .assign(name=lambda dd: dd.Genus.str[0] + '. ' + dd.Species)\n .assign(name=lambda dd: pd.Categorical(dd.name, categories=fun_names, ordered=True))\n .query('counts &gt; 0')\n .pipe(lambda dd: p9.ggplot(dd)\n      + p9.aes('sample_id',\n               'name',\n               size='counts',\n               color='sample_mode',\n               fill='sample_mode')\n       + p9.geom_point(alpha=.8)\n       + p9.scale_y_discrete(expand=(.035, .035))\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.scale_color_manual(values=['#D3894C', '#435B97'])\n       + p9.guides(size=p9.guide_legend(ncol=1))\n       + p9.labs(x='', y='', size='Total Reads', color='', fill='',\n                  )\n       + p9.facet_wrap('label', ncol=1, scales='free_y')\n       + p9.theme(figure_size=(6, 4.5),\n                  strip_text=p9.element_text(size=12),\n                  axis_text=p9.element_text(size=10),\n                  axis_text_x=p9.element_text(angle=90),\n       \n       )\n )\n)\n\n\n\n\n\n\n\n\n\nbac_names = (bac_df_sp\n .drop(columns=taxon_names[:-2])\n .merge(pathogenic_bacteria_df, on=['Genus', 'Species'], how='right')\n .melt(['Genus', 'Species', 'label'], var_name='sample_id', value_name='counts')\n .groupby(['Genus', 'Species'])\n .counts\n .sum()\n .sort_values()\n .reset_index()\n .assign(name=lambda dd: dd.Genus.str[0] + '. ' + dd.Species)\n .name\n)\n\n(bac_df_sp\n .drop(columns=taxon_names[:-2])\n .merge(pathogenic_bacteria_df, on=['Genus', 'Species'], how='right')\n .melt(['Genus', 'Species', 'label'], var_name='sample_id', value_name='counts')\n .assign(sample_mode=lambda dd: dd.sample_id.map(sample_map))\n .assign(name=lambda dd: dd.Genus.str[0] + '. ' + dd.Species)\n .assign(name=lambda dd: pd.Categorical(dd.name, categories=bac_names, ordered=True))\n .query('counts &gt; 0')\n .pipe(lambda dd: p9.ggplot(dd)\n      + p9.aes('sample_id',\n               'name',\n               size='counts',\n               color='sample_mode',\n               fill='sample_mode')\n       + p9.geom_point(alpha=.8)\n       + p9.scale_y_discrete(expand=(.01, .01))\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.scale_color_manual(values=['#D3894C', '#435B97'])\n       + p9.guides(size=p9.guide_legend(ncol=1))\n       + p9.labs(x='', y='', size='Total Reads', color='', fill='',\n                  )\n       + p9.facet_wrap('label', ncol=1, scales='free_y')\n       + p9.theme(figure_size=(6, 9),\n                  strip_text=p9.element_text(size=12),\n                  axis_text_y=p9.element_text(size=8),\n                  axis_text_x=p9.element_text(angle=90),\n       \n       )\n )\n)\n\n(fun_df_sp\n .drop(columns=taxon_names[:-2])\n .merge(pathogenic_fungi_df, on=['Genus', 'Species'], how='right')\n .melt(['Genus', 'Species', 'label'], var_name='sample_id', value_name='counts')\n .assign(sample_mode=lambda dd: dd.sample_id.map(sample_map))\n .assign(name=lambda dd: dd.Genus.str[0] + '. ' + dd.Species)\n .assign(name=lambda dd: pd.Categorical(dd.name, categories=fun_names, ordered=True))\n .query('counts &gt; 0')\n .pipe(lambda dd: p9.ggplot(dd)\n      + p9.aes('sample_id',\n               'name',\n               size='counts',\n               color='sample_mode',\n               fill='sample_mode')\n       + p9.geom_point(alpha=.8)\n       + p9.scale_y_discrete(expand=(.035, .035))\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.scale_color_manual(values=['#D3894C', '#435B97'])\n       + p9.guides(size=p9.guide_legend(ncol=1))\n       + p9.labs(x='', y='', size='Total Reads', color='', fill='',\n                  )\n       + p9.facet_wrap('label', ncol=1, scales='free_y')\n       + p9.theme(figure_size=(6, 4.5),\n                  strip_text=p9.element_text(size=12),\n                  axis_text=p9.element_text(size=10),\n                  axis_text_x=p9.element_text(angle=90),\n       \n       )\n )\n)\n\n\n\n\n\n\n\n\n\nf = (fun_df_sp\n .drop(columns=taxon_names[:-2])\n .merge(fungi_pathogens_df, on=['Genus', 'Species'], how='right')\n .melt(['Genus', 'Species'], var_name='sample_id', value_name='counts')\n .assign(sample_mode=lambda dd: dd.sample_id.map(sample_map))\n .assign(name=lambda dd: dd.Genus.str[0] + '. ' + dd.Species)\n .assign(label='Fungal Human Pathogens')\n .assign(name=lambda dd: pd.Categorical(dd.name, categories=fun_names, ordered=True))\n .query('counts &gt; 0')\n .pipe(lambda dd: p9.ggplot(dd)\n      + p9.aes('sample_id',\n               'name',\n               size='counts',\n               color='sample_mode',\n               fill='sample_mode')\n       + p9.geom_point(alpha=.8)\n       + p9.scale_y_discrete(expand=(.035, .035))\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.scale_color_manual(values=['#D3894C', '#435B97'])\n       + p9.guides(size=p9.guide_legend(ncol=1))\n       + p9.labs(x='', y='', size='Total Reads', color='', fill='',\n                  )\n       + p9.facet_wrap('label', ncol=1, scales='free_y')\n       + p9.theme(figure_size=(6, 3.5),\n                  strip_text=p9.element_text(size=12),\n                  axis_text=p9.element_text(size=10),\n                  axis_text_x=p9.element_text(angle=90),\n       \n       )\n )\n       )\nf.save('../output/figures/fungal_pathogens.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\n\nf = (bac_df_sp\n .assign(Genus=lambda dd: dd.Genus.str[0] + '.')\n .drop(columns=taxon_names[:-2])\n .merge(bac_pathogens_df, on=['Genus', 'Species'], how='right')\n .melt(['Genus', 'Species', 'label'], var_name='sample_id', value_name='counts')\n .assign(sample_mode=lambda dd: dd.sample_id.map(sample_map))\n .assign(name=lambda dd: dd.Genus + ' ' + dd.Species)\n .query('label.str.contains(\"Opportunistic\")')\n .query('counts &gt; 0')\n .assign(name=lambda dd: \n         pd.Categorical(\n            dd.name,\n            categories=bac_opp_path_names,\n            ordered=True))\n .pipe(lambda dd: p9.ggplot(dd)\n      + p9.aes('sample_id',\n               'name',\n               size='counts',\n               color='sample_mode',\n               fill='sample_mode')\n       + p9.geom_point(alpha=.8)\n       + p9.scale_y_discrete(expand=(.035, .035))\n       + p9.scale_size_continuous(limits=(1, 1000))\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.scale_color_manual(values=['#D3894C', '#435B97'])\n       + p9.guides(size=p9.guide_legend(ncol=1))\n       + p9.facet_wrap('label', ncol=1)\n       + p9.labs(x='', y='', size='Total Reads', color='', fill='',\n                  )\n       + p9.facet_wrap('label', ncol=1, scales='free_y')\n       + p9.theme(figure_size=(5.5, 5),\n                  strip_text=p9.element_text(size=10.4),\n                  axis_text=p9.element_text(size=10),\n                  axis_text_x=p9.element_text(angle=90),\n       \n       )\n )\n\n       )\nf.save('../output/figures/bacterial_opportunistic_pathogens.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\nf = (bac_df_sp\n .drop(columns=taxon_names[:-2])\n .merge(bac_pathogens_df, on=['Genus', 'Species'], how='right')\n     .assign(Genus=lambda dd: dd.Genus.str[0] + '.')\n .melt(['Genus', 'Species', 'label'], var_name='sample_id', value_name='counts')\n .assign(sample_mode=lambda dd: dd.sample_id.map(sample_map))\n .assign(name=lambda dd: dd.Genus + ' ' + dd.Species)\n .query('counts &gt; 0')\n .query('not label.str.contains(\"Opportunistic\")')\n .assign(name=lambda dd: pd.Categorical(dd.name, categories=bac_path_names, ordered=True))\n .pipe(lambda dd: p9.ggplot(dd)\n      + p9.aes('sample_id',\n               'name',\n               size='counts',\n               color='sample_mode',\n               fill='sample_mode')\n       + p9.geom_point(alpha=.8)\n       + p9.scale_y_discrete(expand=(.05, .05))\n       + p9.scale_size_continuous(limits=(1, 1000))\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.scale_color_manual(values=['#D3894C', '#435B97'])\n       + p9.guides(size=p9.guide_legend(ncol=1))\n       + p9.facet_wrap('label', ncol=1)\n       + p9.labs(x='', y='', size='Total Reads', color='', fill='',\n                  )\n       + p9.facet_wrap('label', ncol=1, scales='free_y')\n       + p9.theme(figure_size=(5.75, 3),\n                  strip_text=p9.element_text(size=12),\n                  axis_text=p9.element_text(size=10),\n                  axis_text_x=p9.element_text(angle=90),\n       \n       )\n )\n\n       )\nf.save('../output/figures/bacterial_pathogens.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\n\nRe-sequencing Nov’23\n\nindividual_blanks = [f'B{i}' for i in range(1, 22)]\n\n\ntop_genera_bac = (full_genera_df\n                .query('Kingdom == \"Bacteria\"')\n                .query('Genus != \"unknown\"')\n                .groupby('Genus')\n                .aggregate({'counts': 'sum'})\n                .sort_values('counts')\n                .tail(20)\n                .index\n                .values\n)\n\ntop_genera_fun = (full_genera_df\n              .query('Kingdom == \"Fungi\"')\n              .query('Genus != \"unknown\"')\n              .groupby('Genus')\n              .aggregate({'counts': 'sum'})\n              .sort_values('counts')\n              .tail(20)\n              .index\n              .values\n)\n\n\nnew_labels_bac = np.concatenate([\n    np.sort(np.concatenate([top_genera_bac, ['Other']])),\n    ['Unknown']\n    ])\n\nnew_labels_fun = np.concatenate([\n    np.sort(np.concatenate([top_genera_fun, ['Other']])),\n    ['Unknown']\n    ])\n\n\nsample_map['B_Flight'] = 'Flight'\nsample_map['B_Ground'] = 'Ground'\n\n\ngenera_in_blanks = (full_genera_df\n                    .query('sample_id.str.startswith(\"B\")')\n                    .query('counts &gt; 0')\n                    .Genus.unique()\n)\n\n\ntotal_counts_per_sample = (full_genera_df\n .query('sample_id.str.startswith(\"S\")')\n .groupby(['sample_id', 'Kingdom'], as_index=False)\n .counts.sum()\n)\n\n\ntotal_counts_blanks_removed = (full_genera_df\n .query('sample_id.str.startswith(\"S\")')\n .query('Genus not in @genera_in_blanks')\n .groupby(['sample_id', 'Kingdom'], as_index=False)\n .counts.sum()\n)\n\n\n(total_counts_per_sample\n .merge(total_counts_blanks_removed, on=['sample_id', 'Kingdom'], how='left',\n        suffixes=('_total', '_blanks_removed'))\n .query('counts_total &gt; 0')\n .groupby('Kingdom')\n    .aggregate({'counts_total': 'sum', 'counts_blanks_removed': 'sum'})\n    .assign(percentage=lambda dd: dd.counts_blanks_removed / dd.counts_total)\n#  .assign(percentage=lambda dd: dd.counts_blanks_removed / dd.counts_total)\n#  .melt(['sample_id', 'Kingdom'], var_name='counts_type', value_name='counts')\n#  .assign(counts=lambda dd: dd.counts.astype(int))\n\n#  .query('variable != \"percentage\"')\n)\n\n\n\n\n\n\n\n\ncounts_total\ncounts_blanks_removed\npercentage\n\n\nKingdom\n\n\n\n\n\n\n\nBacteria\n1671690.0\n85696.0\n0.051263\n\n\nFungi\n2196416.0\n1816849.0\n0.827188\n\n\n\n\n\n\n\n\n(total_counts_per_sample\n .merge(total_counts_blanks_removed, on=['sample_id', 'Kingdom'], how='left',\n        suffixes=('_total', '_blanks_removed'))\n .query('counts_total &gt; 0')\n#  .assign(percentage=lambda dd: dd.counts_blanks_removed / dd.counts_total)\n .melt(['sample_id', 'Kingdom'], var_name='counts_type', value_name='counts')\n .assign(counts=lambda dd: dd.counts.astype(int))\n .replace({'counts_type': \n           {'counts_total': '(1) Total Reads', \n            'counts_blanks_removed': '(2) Reads after removing Genera in Blanks'}})\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('sample_id', 'counts')\n       + p9.geom_col(p9.aes(fill='counts_type'), position='dodge')\n       + p9.facet_wrap('Kingdom', ncol=1, scales='free_y')\n       + p9.labs(x='', y='Read Counts', fill='')\n       + p9.theme(legend_position='top')\n       )\n)\n\n\n\n\n\n\n\n\n\n(full_genera_df\n .query('Kingdom == \"Bacteria\"')\n .replace({'unknown', np.nan})\n .assign(Genus=lambda dd: np.where(dd.Genus.isin(top_genera_bac) | dd.Genus.isna(), dd.Genus, 'Other'))\n .groupby(['Genus', 'sample_id'], as_index=False, dropna=False)\n    .aggregate({'counts': 'sum'})\n .groupby('sample_id', as_index=False)\n .apply(lambda dd: dd.assign(relative_abundance=lambda dd: dd.counts / dd.counts.sum()))\n .reset_index(drop=True)\n .melt(['sample_id', 'Genus'], var_name='metric', value_name='value')\n .replace({'counts': 'Number of Reads',\n           'relative_abundance': 'Relative Abundance'})\n .query('sample_id != \"S06\"')\n .assign(sample_mode=lambda dd: dd.sample_id.map(sample_map))\n .replace({'B_Flight': 'Blanks Pool',\n           'B_Ground': 'Blanks Pool'})\n .assign(sample_label=lambda dd: dd.sample_id + '\\n(' + dd.sample_mode + ')')\n \n .pipe(lambda dd: \n       p9.ggplot(dd) \n     + p9.aes('sample_label', 'value', fill='Genus')\n     + p9.geom_col()\n     + p9.coord_flip()\n     + p9.facet_wrap('metric', scales='free_x')\n     + p9.guides(fill=p9.guide_legend(ncol=4))\n     + p9.labs(x='', y='', fill='')\n     + p9.scale_y_continuous(expand=(0, 0))\n     + p9.scale_fill_discrete(labels=list(new_labels_bac))\n     + p9.theme(\n         figure_size=(7, 8),\n         axis_text_y=p9.element_text(ha='center', x=-.1),\n         legend_key_size=8,\n         legend_text=p9.element_text(size=8),\n         legend_position='bottom'\n         )\n     )\n)\n\n \n\n\n\n\n\n\n\n\n\n(full_genera_df\n .query('Kingdom == \"Fungi\"')\n .query('sample_id!=\"S06\"')\n .replace({'Genus': {'unknown': np.nan}})\n .assign(Genus=lambda dd: np.where(dd.Genus.isin(top_genera_fun) | dd.Genus.isna(), dd.Genus, 'Other'))\n .groupby(['Genus', 'sample_id'], as_index=False, dropna=False)\n .aggregate({'counts': 'sum'})\n .groupby('sample_id', as_index=False)\n .apply(lambda dd: dd.assign(relative_abundance=lambda dd: dd.counts / dd.counts.sum()))\n .reset_index(drop=True)\n .melt(['sample_id', 'Genus'], var_name='metric', value_name='value')\n .replace({'counts': 'Number of Reads',\n           'relative_abundance': 'Relative Abundance'})\n .query('sample_id != \"S06\"')\n .assign(sample_mode=lambda dd: dd.sample_id.map(sample_map))\n .replace({'B_Flight': 'Blanks Pool',\n           'B_Ground': 'Blanks Pool'})\n .assign(sample_label=lambda dd: dd.sample_id + '\\n(' + dd.sample_mode + ')')\n \n .pipe(lambda dd: \n       p9.ggplot(dd) \n     + p9.aes('sample_label', 'value', fill='Genus')\n     + p9.geom_col()\n     + p9.coord_flip()\n     + p9.facet_wrap('metric', scales='free_x')\n     + p9.guides(fill=p9.guide_legend(ncol=4))\n     + p9.labs(x='', y='', fill='')\n     + p9.scale_y_continuous(expand=(0, 0))\n     + p9.scale_fill_discrete(labels=list(new_labels_fun))\n     + p9.theme(\n         figure_size=(7, 8),\n         axis_text_y=p9.element_text(ha='center', x=-.1),\n         legend_key_size=8,\n         legend_text=p9.element_text(size=8),\n         legend_position='bottom'\n         )\n     )\n)\n\n\n\n\n\n\n\n\n\n(pd.concat([genera_long_df, blanks_abundance_df])\n .assign(Genus=lambda dd: np.where(dd.Genus.isin(top_genera) | dd.Genus.isna(), dd.Genus, 'Other'))\n .groupby(['Genus', 'sample_id'], as_index=False, dropna=False)\n    .aggregate({'counts': 'sum'})\n .groupby('sample_id', as_index=False)\n .apply(lambda dd: dd.assign(relative_abundance=lambda dd: dd.counts / dd.counts.sum()))\n .reset_index(drop=True)\n .melt(['sample_id', 'Genus'], var_name='metric', value_name='value')\n .replace({'counts': 'Number of Reads',\n           'relative_abundance': 'Relative Abundance'})\n .query('sample_id != \"S06\"')\n .assign(sample_mode=lambda dd: dd.sample_id.map(sample_map))\n .replace({'B_Flight': 'Blanks Pool',\n           'B_Ground': 'Blanks Pool'})\n .assign(sample_label=lambda dd: dd.sample_id + '\\n(' + dd.sample_mode + ')')\n .query('Genus==\"Sphingomonas\"')\n .query('metric==\"Relative Abundance\"')\n .pipe(lambda dd: p9.ggplot(dd) \n       + p9.aes('sample_label', 'value')\n       + p9.geom_col()\n       + p9.geom_text(p9.aes(label='(value * 100).round(1).astype(str) + \"%\"'), ha='left', size=9, nudge_y=.01)\n       + p9.scale_y_continuous(labels=percent_format(), expand=(0, 0), limits=(-.01, 1.07))\n       + p9.coord_flip()\n       + p9.labs(x='', y='Relative abundance of Sphingomonas')\n       + p9.theme(figure_size=(5, 6),\n                           axis_text_y=p9.element_text(ha='center', x=-.06, size=8),\n         legend_key_size=8,\n                  )\n       \n       )\n)\n\n\n\n\n\n\n\n\n\n(pd.concat([genera_long_df, blanks_abundance_df.fillna('unknown')])\n .groupby(['Kingdom', 'Genus', 'sample_id'], as_index=False, dropna=False)\n .aggregate({'counts': 'sum'})\n .groupby(['sample_id', 'Kingdom'], as_index=False)\n .apply(lambda dd: dd.assign(relative_abundance=lambda dd: dd.counts / dd.counts.sum()))\n .reset_index(drop=True)\n .melt(['sample_id', 'Genus', 'Kingdom'], var_name='metric', value_name='value')\n .replace({'counts': 'Number of Reads',\n           'relative_abundance': 'Relative Abundance'})\n .query('sample_id != \"S06\"')\n .assign(sample_mode=lambda dd: dd.sample_id.map(sample_map))\n .replace({'B_Flight': 'Blanks Pool',\n           'B_Ground': 'Blanks Pool'})\n .assign(sample_label=lambda dd: dd.sample_id + '\\n(' + dd.sample_mode + ')')\n .query('Genus==\"unknown\"')\n .query('metric==\"Relative Abundance\"')\n .pipe(lambda dd: p9.ggplot(dd) \n       + p9.aes('sample_label', 'value')\n       + p9.geom_col()\n       + p9.geom_text(p9.aes(label='(value * 100).round(1).astype(str) + \"%\"'), ha='left', size=9, nudge_y=.01)\n       + p9.scale_y_continuous(labels=percent_format(),\n                               expand=(0, 0), \n                               limits=(-.01, .35))\n       + p9.coord_flip()\n       + p9.facet_wrap('Kingdom')\n       + p9.labs(x='', y='Relative abundance of unresolved reads at Genus level')\n       + p9.theme(\n           figure_size=(6, 7),\n           axis_text_y=p9.element_text(ha='center', x=-.11, size=8),\n           legend_key_size=8,\n                  )\n       \n       )\n)\n\n\n\n\n\n\n\n\n\nfull_matrix_bac = (full_genera_df\n .fillna('unknown')\n .query('Kingdom == \"Bacteria\"')\n .groupby(['Genus', 'sample_id'], as_index=False, dropna=False)\n .aggregate({'counts': 'sum'})\n .groupby('sample_id', as_index=False)\n .apply(lambda dd: dd.assign(relative_abundance=lambda dd: dd.counts / dd.counts.sum()))\n .reset_index(drop=True)\n .melt(['sample_id', 'Genus'], var_name='metric', value_name='value')\n .replace({'counts': 'Number of Reads',\n           'relative_abundance': 'Relative Abundance'})\n .query('sample_id != \"S06\"')\n .assign(sample_mode=lambda dd: dd.sample_id.map(sample_map))\n .replace({'B_Flight': 'Blanks Pool',\n           'B_Ground': 'Blanks Pool'})\n .assign(sample_label=lambda dd: dd.sample_id + '\\n(' + dd.sample_mode + ')')\n .query('metric==\"Relative Abundance\"')\n .pivot(index='sample_label', columns='Genus', values='value')\n .fillna(0)\n)\nsamples = full_matrix_bac.index.values\ndm = (full_matrix_bac\n .pipe(lambda dd: pairwise_distances(dd, metric='braycurtis'))\n)\n(pd.DataFrame(dm, columns=samples)\n .assign(sample_id=samples)\n .melt('sample_id', var_name='sample_id2', value_name='distance')\n .assign(label=lambda dd: dd.distance.astype(str).str[1:4])\n .assign(sample_id=lambda dd: \n         pd.Categorical(dd.sample_id, categories=samples, ordered=True))\n .assign(sample_id2=lambda dd: \n         pd.Categorical(dd.sample_id2, categories=samples, ordered=True))\n .assign(sample_id=lambda dd: dd.sample_id.str.replace('\\n', ' '))\n .assign(sample_id2=lambda dd: dd.sample_id2.str.replace('\\n', ' '))\n .pipe(lambda dd: p9.ggplot(dd)\n        + p9.aes('sample_id', 'sample_id2', fill='distance')\n        + p9.geom_tile()\n        + p9.scale_fill_continuous('inferno', na_value='white')\n        + p9.theme_classic()\n        + p9.geom_text(p9.aes(label='label', color='distance &gt;= .35'), size=7)\n        + p9.scale_color_manual(['white', 'black'])\n        + p9.guides(fill=False, color=False)\n        + p9.labs(x='', y='', title='Bray-Curtis dissimilarity (16S)')\n        + p9.theme(\n            axis_text_x=p9.element_text(angle=90),\n            axis_text=p9.element_text(size=7),\n            figure_size=(5, 5),\n            dpi=400,\n            title=p9.element_text(size=12, ha='center'),\n            )\n      )\n\n)\n\n\n\n\n\n\n\n\n\nfull_matrix_fun = (full_genera_df\n .fillna('unknown')\n .query('Kingdom == \"Fungi\"')\n .groupby(['Genus', 'sample_id'], as_index=False, dropna=False)\n .aggregate({'counts': 'sum'})\n .groupby('sample_id', as_index=False)\n .apply(lambda dd: dd.assign(relative_abundance=lambda dd: dd.counts / dd.counts.sum()))\n .reset_index(drop=True)\n .melt(['sample_id', 'Genus'], var_name='metric', value_name='value')\n .replace({'counts': 'Number of Reads',\n           'relative_abundance': 'Relative Abundance'})\n .query('sample_id != \"S06\"')\n .assign(sample_mode=lambda dd: dd.sample_id.map(sample_map))\n .replace({'B_Flight': 'Blanks Pool',\n           'B_Ground': 'Blanks Pool'})\n .assign(sample_label=lambda dd: dd.sample_id + '\\n(' + dd.sample_mode + ')')\n .query('metric==\"Relative Abundance\"')\n .pivot(index='sample_label', columns='Genus', values='value')\n .fillna(0)\n)\nsamples = full_matrix_fun.index.values\ndm = (full_matrix_fun\n .pipe(lambda dd: pairwise_distances(dd, metric='braycurtis'))\n)\n(pd.DataFrame(dm, columns=samples)\n .assign(sample_id=samples)\n .melt('sample_id', var_name='sample_id2', value_name='distance')\n .assign(label=lambda dd: dd.distance.astype(str).str[1:4])\n .assign(sample_id=lambda dd: \n         pd.Categorical(dd.sample_id, categories=samples, ordered=True))\n .assign(sample_id2=lambda dd: \n         pd.Categorical(dd.sample_id2, categories=samples, ordered=True))\n .assign(sample_id=lambda dd: dd.sample_id.str.replace('\\n', ' '))\n .assign(sample_id2=lambda dd: dd.sample_id2.str.replace('\\n', ' '))\n .pipe(lambda dd: p9.ggplot(dd)\n        + p9.aes('sample_id', 'sample_id2', fill='distance')\n        + p9.geom_tile()\n        + p9.scale_fill_continuous('inferno', na_value='white')\n        + p9.theme_classic()\n        + p9.geom_text(p9.aes(label='label', color='distance &gt;= .35'), size=7)\n        + p9.scale_color_manual(['white', 'black'])\n        + p9.guides(fill=False, color=False)\n        + p9.labs(x='', y='', title='Bray-Curtis dissimilarity (ITS)')\n        + p9.theme(\n            axis_text_x=p9.element_text(angle=90),\n            axis_text=p9.element_text(size=7),\n            figure_size=(5, 5),\n            dpi=400,\n            title=p9.element_text(size=12, ha='center'),\n            )\n      )\n\n)\n\n\n\n\n\n\n\n\n\n(full_long_df \n .query('Genus.notna()')\n.assign(Genus=lambda dd: \n        pd.Categorical(dd.Genus, categories=top_30_genera_samples, ordered=True))\n.dropna()\n.assign(sample_id=lambda dd: dd.sample_label.str.split('\\n').str[0])\n.merge(samples_info, how='left')\n.assign(month=lambda dd: pd.to_datetime(dd.date).dt.month_name().fillna('Blanks'))\n.assign(sample_mode=lambda dd: \n        np.where(dd.sample_mode.isna, \n                 dd.sample_label.str.split('(').str[-1].str[:-1], \n                 dd.sample_mode))\n.assign(sample_group_label=lambda dd: dd.sample_mode + ' ' + dd.month)\n.groupby(['sample_group_label', 'sample_mode', 'Genus'])\n.aggregate({'value': 'mean'})\n.reset_index()\n.query('value &gt; 0')\n.assign(value=lambda dd: np.where(dd.value &lt; treshold, treshold, dd.value))\n.assign(sample_group_label=lambda dd: pd.Categorical(dd.sample_group_label,\n        categories=['Flight Blanks', 'Ground Blanks', 'Flight February', 'Ground February',\n                    'Flight April', 'Ground April'], ordered=True))\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('sample_group_label', 'Genus', size='value', fill='sample_mode')\n       + p9.geom_point(alpha=.8, stroke=0)\n       + p9.scale_size_continuous(trans='log10',\n                                  range=(1, 9),\n                                  labels=percent_format(), \n                                  limits=(treshold - 1e-5, .9),\n                                  breaks=[.001, .01, .05, .5])\n       + p9.scale_y_discrete(expand=(.035, .035))\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.guides(size=p9.guide_legend(ncol=4))\n       + p9.labs(x='', y='', size='Relative Abundance', color='Class',\n                 title='Relative Abundance of Top 30 Genera in Samples',\n                 fill=''\n                 )\n                  )\n       + p9.annotate(geom='vline', linetype='dashed', xintercept=2.5, color='grey')\n       + p9.theme(figure_size=(3.25, 7.5),\n                  strip_text=p9.element_text(size=12),\n                  axis_text=p9.element_text(size=10),\n                  legend_position='bottom',\n                  title=p9.element_text(ha='center'),\n                  legend_title=p9.element_text(x=300),\n                  axis_text_x=p9.element_text(angle=90),\n       )\n )\n\n\n\n\n\n\n\n\n\n(full_long_df \n .query('Genus.notna()')\n.assign(Genus=lambda dd: \n        pd.Categorical(dd.Genus, categories=top_30_genera_blanks, ordered=True))\n.dropna()\n.replace({'Genus': {'Malasseziaceae_gen_Incertae_sedis': 'Malasseziaceae'}})\n.assign(sample_id=lambda dd: dd.sample_label.str.split('\\n').str[0])\n.merge(samples_info, how='left')\n.assign(month=lambda dd: pd.to_datetime(dd.date).dt.month_name().fillna('Blanks'))\n.assign(sample_mode=lambda dd: \n        np.where(dd.sample_mode.isna, \n                 dd.sample_label.str.split('(').str[-1].str[:-1], \n                 dd.sample_mode))\n.assign(sample_group_label=lambda dd: dd.sample_mode + ' ' + dd.month)\n.groupby(['sample_group_label', 'sample_mode', 'Genus'])\n.aggregate({'value': 'mean'})\n.reset_index()\n.query('value &gt; 0')\n.assign(value=lambda dd: np.where(dd.value &lt; treshold, treshold, dd.value))\n.assign(sample_group_label=lambda dd: pd.Categorical(dd.sample_group_label,\n        categories=['Flight Blanks', 'Ground Blanks', 'Flight February', 'Ground February',\n                    'Flight April', 'Ground April'], ordered=True))\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('sample_group_label', 'Genus', size='value', fill='sample_mode')\n       + p9.geom_point(alpha=.8, stroke=0)\n       + p9.scale_size_continuous(trans='log10',\n                                  range=(1, 9),\n                                  labels=percent_format(), \n                                  limits=(treshold - 1e-5, .9),\n                                  breaks=[.001, .01, .05, .5])\n       + p9.scale_y_discrete(expand=(.035, .035))\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.guides(size=p9.guide_legend(ncol=4))\n       + p9.labs(x='', y='', size='Relative Abundance', color='Class',\n                 title='Relative Abundance of Top 30 Genera in Samples',\n                 fill=''\n                 )\n                  )\n       + p9.annotate(geom='vline', linetype='dashed', xintercept=2.5, color='grey')\n       + p9.theme(figure_size=(3, 7.5),\n                  strip_text=p9.element_text(size=12),\n                  axis_text=p9.element_text(size=10),\n                  legend_position='bottom',\n                  title=p9.element_text(ha='center'),\n                  legend_title=p9.element_text(x=300),\n                  axis_text_x=p9.element_text(angle=90),\n       )\n )\n\n\n\n\n\n\n\n\n\nfull_long_df = (full_matrix_bac\n                .reset_index()\n                .melt('sample_label', var_name='Genus', value_name='value')\n)\n\n\ntop_30_genera_blanks = (\n    full_long_df\n    .query('Genus!=\"unknown\"')\n    .query('sample_label.str.contains(\"Pool\")')\n    .groupby('Genus')\n    ['value']\n    .sum()\n    .sort_values(ascending=True)\n    .tail(30)\n    .index\n    .values\n)\n\ntop_30_genera_samples_april = (\n    full_long_df\n    .query('Genus!=\"unknown\"')\n    .query('sample_label.str.startswith(\"S\")')\n    .assign(sample_id=lambda dd: dd.sample_label.str.split('\\n').str[0])\n    .merge(samples_info, how='left')\n    .assign(month=lambda dd: pd.to_datetime(dd.date).dt.month_name().fillna('Blanks'))\n    .query('month==\"April\"')\n    .groupby('Genus')\n    ['value']\n    .sum()\n    .sort_values(ascending=True)\n    .tail(30)\n    .index\n    .values\n)\n\ntop_30_genera_samples_february = (\n    full_long_df\n    .query('Genus!=\"unknown\"')\n    .query('sample_label.str.startswith(\"S\")')\n    .assign(sample_id=lambda dd: dd.sample_label.str.split('\\n').str[0])\n    .merge(samples_info, how='left')\n    .assign(month=lambda dd: pd.to_datetime(dd.date).dt.month_name().fillna('Blanks'))\n    .query('month==\"February\"')\n    .groupby('Genus')\n    ['value']\n    .sum()\n    .sort_values(ascending=True)\n    .tail(30)\n    .index\n    .values\n)\n\n\nf = (full_long_df \n .query('Genus.notna()')\n.assign(Genus=lambda dd: \n        pd.Categorical(dd.Genus, categories=top_30_genera_samples_february, ordered=True))\n.dropna()\n.assign(sample_id=lambda dd: dd.sample_label.str.split('\\n').str[0])\n.merge(samples_info, how='left')\n.assign(month=lambda dd: pd.to_datetime(dd.date).dt.month_name().fillna('Blanks'))\n.assign(sample_mode=lambda dd: \n        np.where(dd.sample_mode.isna, \n                 dd.sample_label.str.split('(').str[-1].str[:-1], \n                 dd.sample_mode))\n.assign(sample_group_label=lambda dd: dd.sample_mode + ' ' + dd.month)\n.groupby(['sample_group_label', 'sample_mode', 'Genus'])\n.aggregate({'value': 'mean'})\n.reset_index()\n.query('value &gt; 0')\n.assign(value=lambda dd: np.where(dd.value &lt; treshold, treshold, dd.value))\n.assign(sample_group_label=lambda dd: pd.Categorical(dd.sample_group_label,\n        categories=['Flight Blanks', 'Ground Blanks', 'Flight February', 'Ground February',\n                    'Flight April', 'Ground April'], ordered=True))\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('sample_group_label', 'Genus', size='value', fill='sample_mode')\n       + p9.geom_point(alpha=.8, stroke=0)\n       + p9.scale_size_continuous(trans='log10',\n                                  range=(1, 9),\n                                  labels=percent_format(), \n                                  limits=(treshold - 1e-5, .9),\n                                  breaks=[.001, .01, .05, .5])\n       + p9.scale_y_discrete(expand=(.035, .035))\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.guides(size=False)\n       + p9.labs(x='', y='', size='Relative Abundance', color='Class',\n                 title='',\n                 fill=''\n                 )\n                  )\n       + p9.annotate(geom='vline', linetype='dashed', xintercept=2.5, color='grey')\n       + p9.theme(figure_size=(3, 7.5),\n                  strip_text=p9.element_text(size=12),\n                  axis_text=p9.element_text(size=10),\n                  legend_position='bottom',\n                  title=p9.element_text(ha='center'),\n                  legend_title=p9.element_text(x=300),\n                  axis_text_x=p9.element_text(angle=90),\n       )\n )\n\nf.save('../output/figures/feb_top_30_genera.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\nf = (full_long_df \n .query('Genus.notna()')\n.assign(Genus=lambda dd: \n        pd.Categorical(dd.Genus, categories=top_30_genera_samples_april, ordered=True))\n.dropna()\n.assign(sample_id=lambda dd: dd.sample_label.str.split('\\n').str[0])\n.merge(samples_info, how='left')\n.assign(month=lambda dd: pd.to_datetime(dd.date).dt.month_name().fillna('Blanks'))\n.assign(sample_mode=lambda dd: \n        np.where(dd.sample_mode.isna, \n                 dd.sample_label.str.split('(').str[-1].str[:-1], \n                 dd.sample_mode))\n.assign(sample_group_label=lambda dd: dd.sample_mode + ' ' + dd.month)\n.groupby(['sample_group_label', 'sample_mode', 'Genus'])\n.aggregate({'value': 'mean'})\n.reset_index()\n.query('value &gt; 0')\n.assign(value=lambda dd: np.where(dd.value &lt; treshold, treshold, dd.value))\n.assign(sample_group_label=lambda dd: pd.Categorical(dd.sample_group_label,\n        categories=['Flight Blanks', 'Ground Blanks', 'Flight February', 'Ground February',\n                    'Flight April', 'Ground April'], ordered=True))\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('sample_group_label', 'Genus', size='value', fill='sample_mode')\n       + p9.geom_point(alpha=.8, stroke=0)\n       + p9.scale_size_continuous(trans='log10',\n                                  range=(1, 9),\n                                  labels=percent_format(), \n                                  limits=(treshold - 1e-5, .9),\n                                  breaks=[.001, .01, .05, .5])\n       + p9.scale_y_discrete(expand=(.035, .035))\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.guides(size=False)\n       + p9.labs(x='', y='', size='Relative Abundance', color='Class',\n                 title='',\n                 fill=''\n                 )\n                  )\n       + p9.annotate(geom='vline', linetype='dashed', xintercept=2.5, color='grey')\n       + p9.theme(figure_size=(5, 7.5),\n                  strip_text=p9.element_text(size=12),\n                  axis_text=p9.element_text(size=10),\n                  legend_position='bottom',\n                  title=p9.element_text(ha='center'),\n                  legend_title=p9.element_text(x=300),\n                  axis_text_x=p9.element_text(angle=90),\n       )\n )\nf.save('../output/figures/apr_top_30_genera.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\nf = (full_long_df \n .query('Genus.notna()')\n.assign(Genus=lambda dd: \n        pd.Categorical(dd.Genus, categories=top_30_genera_blanks, ordered=True))\n.dropna()\n.assign(sample_id=lambda dd: dd.sample_label.str.split('\\n').str[0])\n.merge(samples_info, how='left')\n.assign(month=lambda dd: pd.to_datetime(dd.date).dt.month_name().fillna('Blanks'))\n.assign(sample_mode=lambda dd: \n        np.where(dd.sample_mode.isna, \n                 dd.sample_label.str.split('(').str[-1].str[:-1], \n                 dd.sample_mode))\n.assign(sample_group_label=lambda dd: dd.sample_mode + ' ' + dd.month)\n.groupby(['sample_group_label', 'sample_mode', 'Genus'])\n.aggregate({'value': 'mean'})\n.reset_index()\n.query('value &gt; 0')\n.assign(value=lambda dd: np.where(dd.value &lt; treshold, treshold, dd.value))\n.assign(sample_group_label=lambda dd: pd.Categorical(dd.sample_group_label,\n        categories=['Flight Blanks', 'Ground Blanks', 'Flight February', 'Ground February',\n                    'Flight April', 'Ground April'], ordered=True))\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('sample_group_label', 'Genus', size='value', fill='sample_mode')\n       + p9.geom_point(alpha=.8, stroke=0)\n       + p9.scale_size_continuous(trans='log10',\n                                  range=(1, 9),\n                                  labels=percent_format(), \n                                  limits=(treshold - 1e-5, .9),\n                                  breaks=[.001, .01, .05, .5])\n       + p9.scale_y_discrete(expand=(.035, .035))\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.guides(size=False)\n       + p9.labs(x='', y='', size='Relative Abundance', color='Class',\n                 title='',\n                 fill=''\n                 )\n                  )\n       + p9.annotate(geom='vline', linetype='dashed', xintercept=2.5, color='grey')\n       + p9.theme(figure_size=(5.5, 7.5),\n                  strip_text=p9.element_text(size=12),\n                  axis_text=p9.element_text(size=10),\n                  legend_position='bottom',\n                  title=p9.element_text(ha='center'),\n                  legend_title=p9.element_text(x=300),\n                  axis_text_x=p9.element_text(angle=90),\n       )\n )\nf.save('../output/figures/blanks_top_30_genera.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\nfull_long_df = (full_matrix_fun\n                .reset_index()\n                .melt('sample_label', var_name='Genus', value_name='value')\n)\n\n\ntop_30_genera_blanks = (\n    full_long_df\n    .query('Genus!=\"unknown\"')\n    .query('sample_label.str.contains(\"Pool\")')\n    .groupby('Genus')\n    ['value']\n    .sum()\n    .sort_values(ascending=True)\n    .tail(30)\n    .index\n    .values\n)\n\ntop_30_genera_samples_april = (\n    full_long_df\n    .query('Genus!=\"unknown\"')\n    .query('sample_label.str.startswith(\"S\")')\n    .assign(sample_id=lambda dd: dd.sample_label.str.split('\\n').str[0])\n    .merge(samples_info, how='left')\n    .assign(month=lambda dd: pd.to_datetime(dd.date).dt.month_name().fillna('Blanks'))\n    .query('month==\"April\"')\n    .groupby('Genus')\n    ['value']\n    .sum()\n    .sort_values(ascending=True)\n    .tail(30)\n    .index\n    .values\n)\n\ntop_30_genera_samples_february = (\n    full_long_df\n    .query('Genus!=\"unknown\"')\n    .query('sample_label.str.startswith(\"S\")')\n    .assign(sample_id=lambda dd: dd.sample_label.str.split('\\n').str[0])\n    .merge(samples_info, how='left')\n    .assign(month=lambda dd: pd.to_datetime(dd.date).dt.month_name().fillna('Blanks'))\n    .query('month==\"February\"')\n    .groupby('Genus')\n    ['value']\n    .sum()\n    .sort_values(ascending=True)\n    .tail(30)\n    .index\n    .values\n)\n\n\nf = (full_long_df \n .query('Genus.notna()')\n.assign(Genus=lambda dd: \n        pd.Categorical(dd.Genus, categories=top_30_genera_samples_february, ordered=True))\n.dropna()\n.assign(sample_id=lambda dd: dd.sample_label.str.split('\\n').str[0])\n.merge(samples_info, how='left')\n.assign(month=lambda dd: pd.to_datetime(dd.date).dt.month_name().fillna('Blanks'))\n.assign(sample_mode=lambda dd: \n        np.where(dd.sample_mode.isna, \n                 dd.sample_label.str.split('(').str[-1].str[:-1], \n                 dd.sample_mode))\n.assign(sample_group_label=lambda dd: dd.sample_mode + ' ' + dd.month)\n.groupby(['sample_group_label', 'sample_mode', 'Genus'])\n.aggregate({'value': 'mean'})\n.reset_index()\n.query('value &gt; 0')\n.assign(value=lambda dd: np.where(dd.value &lt; treshold, treshold, dd.value))\n.assign(sample_group_label=lambda dd: pd.Categorical(dd.sample_group_label,\n        categories=['Flight Blanks', 'Ground Blanks', 'Flight February', 'Ground February',\n                    'Flight April', 'Ground April'], ordered=True))\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('sample_group_label', 'Genus', size='value', fill='sample_mode')\n       + p9.geom_point(alpha=.8, stroke=0)\n       + p9.scale_size_continuous(trans='log10',\n                                  range=(1, 9),\n                                  labels=percent_format(), \n                                  limits=(treshold - 1e-5, .9),\n                                  breaks=[.001, .01, .05, .5])\n       + p9.scale_y_discrete(expand=(.035, .035))\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.guides(size=False)\n       + p9.labs(x='', y='', size='Relative Abundance', color='Class',\n                 title='',\n                 fill=''\n                 )\n                  )\n       + p9.annotate(geom='vline', linetype='dashed', xintercept=2.5, color='grey')\n       + p9.theme(figure_size=(3.75, 7.5),\n                  strip_text=p9.element_text(size=12),\n                  axis_text=p9.element_text(size=10),\n                  legend_position='bottom',\n                  title=p9.element_text(ha='center'),\n                  legend_title=p9.element_text(x=300),\n                  axis_text_x=p9.element_text(angle=90),\n       )\n )\n\nf.save('../output/figures/feb_top_30_genera_fun.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\nf = (full_long_df \n .query('Genus.notna()')\n.assign(Genus=lambda dd: \n        pd.Categorical(dd.Genus, categories=top_30_genera_samples_april, ordered=True))\n.dropna()\n.assign(sample_id=lambda dd: dd.sample_label.str.split('\\n').str[0])\n.merge(samples_info, how='left')\n.assign(month=lambda dd: pd.to_datetime(dd.date).dt.month_name().fillna('Blanks'))\n.assign(sample_mode=lambda dd: \n        np.where(dd.sample_mode.isna, \n                 dd.sample_label.str.split('(').str[-1].str[:-1], \n                 dd.sample_mode))\n.assign(sample_group_label=lambda dd: dd.sample_mode + ' ' + dd.month)\n.groupby(['sample_group_label', 'sample_mode', 'Genus'])\n.aggregate({'value': 'mean'})\n.reset_index()\n.query('value &gt; 0')\n.assign(value=lambda dd: np.where(dd.value &lt; treshold, treshold, dd.value))\n.assign(sample_group_label=lambda dd: pd.Categorical(dd.sample_group_label,\n        categories=['Flight Blanks', 'Ground Blanks', 'Flight February', 'Ground February',\n                    'Flight April', 'Ground April'], ordered=True))\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('sample_group_label', 'Genus', size='value', fill='sample_mode')\n       + p9.geom_point(alpha=.8, stroke=0)\n       + p9.scale_size_continuous(trans='log10',\n                                  range=(1, 9),\n                                  labels=percent_format(), \n                                  limits=(treshold - 1e-5, .9),\n                                  breaks=[.001, .01, .05, .5])\n       + p9.scale_y_discrete(expand=(.035, .035))\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.guides(size=False)\n       + p9.labs(x='', y='', size='Relative Abundance', color='Class',\n                 title='',\n                 fill=''\n                 )\n                  )\n       + p9.annotate(geom='vline', linetype='dashed', xintercept=2.5, color='grey')\n       + p9.theme(figure_size=(3.75, 7.5),\n                  strip_text=p9.element_text(size=12),\n                  axis_text=p9.element_text(size=10),\n                  legend_position='bottom',\n                  title=p9.element_text(ha='center'),\n                  legend_title=p9.element_text(x=300),\n                  axis_text_x=p9.element_text(angle=90),\n       )\n )\nf.save('../output/figures/apr_top_30_genera_fun.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\npathogenic_bacteria_df = (\n    pd.read_excel('../data/Species 2023_final.xlsx',\n                  sheet_name='JV analysis_Bacteria')\n                  [['Genus', 'Species']]\n    .assign(label='Bacterial Potential Human Pathogens')\n)\n\npathogenic_fungi_df = (pd.read_excel('../data/Species 2023_final.xlsx',\n                                     sheet_name='JV analysis_Fungi', \n                                     skiprows=1)\n                       [['Genus', 'Species']]\n                       .dropna()\n    .assign(label='Fungal Potential Human Pathogens') \n)\n\n\npathogenic_fungi_df\n\n\n\n\n\n\n\n\nGenus\nSpecies\nlabel\n\n\n\n\n0\nAcremonium\ncavaraeanum\nFungal Potential Human Pathogens\n\n\n1\nAcremonium\nfusidioides\nFungal Potential Human Pathogens\n\n\n2\nAcremonium\nhyalinulum\nFungal Potential Human Pathogens\n\n\n3\nAlternaria\nmetachromatica\nFungal Potential Human Pathogens\n\n\n4\nAlternaria\nrosae\nFungal Potential Human Pathogens\n\n\n5\nAlternaria\nsonchi\nFungal Potential Human Pathogens\n\n\n6\nAspergillus\nintermedius\nFungal Potential Human Pathogens\n\n\n7\nAspergillus\npenicillioides\nFungal Potential Human Pathogens\n\n\n8\nAspergillus\nunguis\nFungal Potential Human Pathogens\n\n\n9\nAureobasidium\npullulans\nFungal Potential Human Pathogens\n\n\n10\nBeauveria\nbassiana\nFungal Potential Human Pathogens\n\n\n11\nCandida\nparapsilosis\nFungal Potential Human Pathogens\n\n\n12\nCandida\nzeylanoides\nFungal Potential Human Pathogens\n\n\n13\nCladosporium\naphidis\nFungal Potential Human Pathogens\n\n\n14\nCladosporium\ndomesticum\nFungal Potential Human Pathogens\n\n\n15\nCladosporium\nhalotolerans\nFungal Potential Human Pathogens\n\n\n16\nCladosporium\nherbarum\nFungal Potential Human Pathogens\n\n\n17\nCladosporium\nsphaerospermum\nFungal Potential Human Pathogens\n\n\n18\nCladosporium\nvelox\nFungal Potential Human Pathogens\n\n\n19\nCutaneotrichosporon\ndebeurmannianum\nFungal Potential Human Pathogens\n\n\n20\nEpicoccum\nitalicum\nFungal Potential Human Pathogens\n\n\n21\nExophiala\noligosperma\nFungal Potential Human Pathogens\n\n\n22\nMalassezia\nglobosa\nFungal Potential Human Pathogens\n\n\n23\nMalassezia\nrestricta\nFungal Potential Human Pathogens\n\n\n24\nMalassezia\nsympodialis\nFungal Potential Human Pathogens\n\n\n25\nSaccharomyces\ncerevisiae\nFungal Potential Human Pathogens\n\n\n26\nSarocladium\nkiliense\nFungal Potential Human Pathogens\n\n\n27\nSarocladium\nsubulatum\nFungal Potential Human Pathogens\n\n\n28\nSarocladium\nzeae\nFungal Potential Human Pathogens\n\n\n29\nTrichosporon\nasahii\nFungal Potential Human Pathogens\n\n\n\n\n\n\n\n\nbac_pathogens_df = pathogenic_bacteria_df\nfungi_pathogens_df = pathogenic_fungi_df\n\n\nf = (full_long_df \n .query('Genus.notna()')\n.assign(Genus=lambda dd: \n        pd.Categorical(dd.Genus, categories=top_30_genera_blanks, ordered=True))\n.dropna()\n.assign(sample_id=lambda dd: dd.sample_label.str.split('\\n').str[0])\n.merge(samples_info, how='left')\n .replace({'Genus': {'Malasseziaceae_gen_Incertae_sedis': 'Malasseziaceae'}})\n.assign(month=lambda dd: pd.to_datetime(dd.date).dt.month_name().fillna('Blanks'))\n.assign(sample_mode=lambda dd: \n        np.where(dd.sample_mode.isna, \n                 dd.sample_label.str.split('(').str[-1].str[:-1], \n                 dd.sample_mode))\n.assign(sample_group_label=lambda dd: dd.sample_mode + ' ' + dd.month)\n.groupby(['sample_group_label', 'sample_mode', 'Genus'])\n.aggregate({'value': 'mean'})\n.reset_index()\n.query('value &gt; 0')\n.assign(value=lambda dd: np.where(dd.value &lt; treshold, treshold, dd.value))\n.assign(sample_group_label=lambda dd: pd.Categorical(dd.sample_group_label,\n        categories=['Flight Blanks', 'Ground Blanks', 'Flight February', 'Ground February',\n                    'Flight April', 'Ground April'], ordered=True))\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('sample_group_label', 'Genus', size='value', fill='sample_mode')\n       + p9.geom_point(alpha=.8, stroke=0)\n       + p9.scale_size_continuous(trans='log10',\n                                  range=(1, 9),\n                                  labels=percent_format(), \n                                  limits=(treshold - 1e-5, .9),\n                                  breaks=[.001, .01, .05, .5])\n       + p9.scale_y_discrete(expand=(.035, .035))\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.labs(x='', y='', size='Relative Abundance', color='Class',\n                 title='',\n                 fill=''\n                 )\n                  )\n       + p9.annotate(geom='vline', linetype='dashed', xintercept=2.5, color='grey')\n       + p9.theme(figure_size=(3.75, 7.5),\n                  strip_text=p9.element_text(size=12),\n                  axis_text=p9.element_text(size=10),\n                  legend_position='bottom',\n                  title=p9.element_text(ha='center'),\n                  legend_title=p9.element_text(x=300),\n                  axis_text_x=p9.element_text(angle=90),\n       )\n )\nf.save('../output/figures/blanks_top_30_genera_fun.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\nfull_long_df = (full_matrix_bac\n                .reset_index()\n                .melt('sample_label', var_name='Genus', value_name='value')\n)\n\n\ntop_30_genera_blanks = (\n    full_long_df\n    .query('Genus!=\"unknown\"')\n    .query('sample_label.str.contains(\"Pool\")')\n    .groupby('Genus')\n    ['value']\n    .sum()\n    .sort_values(ascending=True)\n    .tail(30)\n    .index\n    .values\n)\n\ntop_30_genera_samples = (\n    full_long_df\n    .query('Genus!=\"unknown\"')\n    .query('sample_label.str.startswith(\"S\")')\n    .groupby('Genus')\n    ['value']\n    .sum()\n    .sort_values(ascending=True)\n    .tail(30)\n    .index\n    .values\n)\ntreshold = .0005\nf = (full_long_df \n .query('Genus.notna()')\n.assign(Genus=lambda dd: \n        pd.Categorical(dd.Genus, categories=top_30_genera_samples, ordered=True))\n.dropna()\n.replace({'Allorhizobium-Neorhizobium-Pararhizobium-Rhizobium': 'Rhizobium'})\n.assign(sample_mode=lambda dd: np.where(dd.sample_label.str.contains('Flight'), 'Flight', 'Ground'))\n.assign(sample_label=lambda dd: dd.sample_label.str.replace('\\n', ' '))\n.query('value &gt; 0')\n.assign(value=lambda dd: np.where(dd.value &lt; treshold, treshold, dd.value))\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('sample_label', 'Genus', size='value', fill='sample_mode')\n       + p9.geom_point(alpha=.8, stroke=0)\n       + p9.scale_size_continuous(trans='log10',\n                                  range=(1, 9),\n                                  labels=percent_format(), \n                                  limits=(treshold - 1e-5, .9),\n                                  breaks=[.001, .01, .05, .5])\n       + p9.scale_y_discrete(expand=(.035, .035))\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.guides(size=p9.guide_legend(ncol=4))\n       + p9.labs(x='', y='', size='Relative Abundance', color='Class',\n                 title='Relative Abundance of Top 30 Genera in Samples',\n                 fill=''\n                 )\n                  )\n       + p9.annotate(geom='vline', linetype='dashed', xintercept=2.5, color='grey')\n       + p9.theme(figure_size=(7.5, 7.5),\n                  strip_text=p9.element_text(size=12),\n                  axis_text=p9.element_text(size=10),\n                  legend_position='bottom',\n                  title=p9.element_text(ha='center'),\n                  legend_title=p9.element_text(x=300),\n                  axis_text_x=p9.element_text(angle=90),\n       )\n )\nf.save('../output/figures/top_genera_samples.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\n\ng = (full_long_df \n .query('Genus.notna()')\n.assign(Genus=lambda dd: \n        pd.Categorical(dd.Genus, categories=top_30_genera_blanks, ordered=True))\n.dropna()\n.replace({'Burkholderia-Caballeronia-Paraburkholderia': 'Burkholderia-Caballeronia'})\n.assign(sample_mode=lambda dd: np.where(dd.sample_label.str.contains('Flight'), 'Flight', 'Ground'))\n.assign(sample_label=lambda dd: dd.sample_label.str.replace('\\n', ' '))\n.assign(value=lambda dd: np.where(dd.value &lt; treshold, treshold, dd.value))\n\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('sample_label', 'Genus', size='value', fill='sample_mode')\n       + p9.geom_point(alpha=.8, stroke=0)\n       + p9.scale_size_continuous(trans='log10', range=(1, 9),\n                                  labels=percent_format(), \n                                  limits=(treshold - 1e-5, .9),\n                                  breaks=[.001, .01, .05, .5])\n       + p9.scale_y_discrete(expand=(.035, .035))\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.guides(size=p9.guide_legend(ncol=4))\n       + p9.labs(x='', y='', size='Relative Abundance', color='Class',\n                 title='Relative Abundance of Top 30 Genera in Blanks',\n                 fill=''\n                 )\n                  )\n       + p9.annotate(geom='vline', linetype='dashed', xintercept=2.5, color='grey')\n       + p9.theme(figure_size=(6.75, 7.5),\n                  strip_text=p9.element_text(size=12),\n                  axis_text=p9.element_text(size=10),\n                  legend_position='bottom',\n                  title=p9.element_text(ha='center'),\n                  legend_title=p9.element_text(x=300),\n                  axis_text_x=p9element_text(angle=90),\n       )\n )\ng.save('../output/figures/top_genera_blanks.svg')\ng.draw()\n\n\n\n\n\n\n\n\n\nfull_long_df = (full_matrix_fun\n                .reset_index()\n                .melt('sample_label', var_name='Genus', value_name='value')\n)\n\n\ntop_30_genera_blanks = (\n    full_long_df\n    .query('Genus!=\"unknown\"')\n    .query('sample_label.str.contains(\"Pool\")')\n    .groupby('Genus')\n    ['value']\n    .sum()\n    .sort_values(ascending=True)\n    .tail(30)\n    .index\n    .values\n)\n\ntop_30_genera_samples = (\n    full_long_df\n    .query('Genus!=\"unknown\"')\n    .query('sample_label.str.startswith(\"S\")')\n    .groupby('Genus')\n    ['value']\n    .sum()\n    .sort_values(ascending=True)\n    .tail(30)\n    .index\n    .values\n)\n\n\n(full_long_df \n .query('Genus.notna()')\n.assign(Genus=lambda dd: \n        pd.Categorical(dd.Genus, categories=top_30_genera_samples[10:], ordered=True))\n.dropna()\n.replace({'Allorhizobium-Neorhizobium-Pararhizobium-Rhizobium': 'Rhizobium'})\n.assign(sample_mode=lambda dd: np.where(dd.sample_label.str.contains('Flight'), 'Flight', 'Ground'))\n.assign(sample_label=lambda dd: dd.sample_label.str.replace('\\n', ' '))\n.query('value &gt; 0')\n.assign(value=lambda dd: np.where(dd.value &lt; treshold, treshold, dd.value))\n.assign(sample_label=lambda dd: dd.sample_label.str.split(' ').str[0])\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('sample_label', 'Genus', size='value', fill='sample_mode')\n       + p9.geom_point(alpha=.8, stroke=0)\n       + p9.scale_size_continuous(trans='log10',\n                                  range=(1, 9),\n                                  labels=percent_format(), \n                                  limits=(treshold - 1e-5, .9),\n                                  breaks=[.001, .01, .05, .5])\n       + p9.scale_y_discrete(expand=(.035, .035))\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.guides(size=False, color=False, fill=False)\n       + p9.labs(x='', y='', size='Relative Abundance', color='Class',\n                 title='',\n                 fill=''\n                 )\n                  )\n       + p9.annotate(geom='vline', linetype='dashed', xintercept=2.5, color='grey')\n       + p9.theme(figure_size=(5, 3),\n                  strip_text=p9.element_text(size=12),\n                  axis_text=p9.element_text(size=10),\n                  legend_position='bottom',\n                  title=p9.element_text(ha='center'),\n                  legend_title=p9.element_text(x=300),\n                  axis_text_x=p9.element_text(angle=90),\n       )\n )\n\n\n\n\n\n\n\n\n\nf = (full_long_df \n .query('Genus.notna()')\n.assign(Genus=lambda dd: \n        pd.Categorical(dd.Genus, categories=top_30_genera_samples, ordered=True))\n.dropna()\n.replace({'Allorhizobium-Neorhizobium-Pararhizobium-Rhizobium': 'Rhizobium'})\n.assign(sample_mode=lambda dd: np.where(dd.sample_label.str.contains('Flight'), 'Flight', 'Ground'))\n.assign(sample_label=lambda dd: dd.sample_label.str.replace('\\n', ' '))\n.query('value &gt; 0')\n.assign(value=lambda dd: np.where(dd.value &lt; treshold, treshold, dd.value))\n .pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('sample_label', 'Genus', size='value', fill='sample_mode')\n       + p9.geom_point(alpha=.8, stroke=0)\n       + p9.scale_size_continuous(trans='log10',\n                                  range=(1, 9),\n                                  labels=percent_format(), \n                                  limits=(treshold - 1e-5, .9),\n                                  breaks=[.001, .01, .05, .5])\n       + p9.scale_y_discrete(expand=(.035, .035))\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.guides(size=p9.guide_legend(ncol=4))\n       + p9.labs(x='', y='', size='Relative Abundance', color='Class',\n                 title='Relative Abundance of Top 30 Genera in Samples',\n                 fill=''\n                 )\n                  )\n       + p9.annotate(geom='vline', linetype='dashed', xintercept=2.5, color='grey')\n       + p9.theme(figure_size=(6.25, 7.5),\n                  strip_text=p9.element_text(size=12),\n                  axis_text=p9.element_text(size=10),\n                  legend_position='bottom',\n                  title=p9.element_text(ha='center'),\n                  legend_title=p9.element_text(x=300),\n                  axis_text_x=p9.element_text(angle=90),\n       )\n )\nf.save('../output/figures/top_genera_samples_fun.svg')\nf.draw()\n\n\n\n\n\n\n\n\n\ng = (full_long_df \n .query('Genus.notna()')\n.assign(Genus=lambda dd: \n        pd.Categorical(dd.Genus, categories=top_30_genera_blanks, ordered=True))\n.dropna()\n.replace({'Genus': {'Malasseziaceae_gen_Incertae_sedis': 'Malasseziaceae'}})\n.assign(sample_mode=lambda dd: np.where(dd.sample_label.str.contains('Flight'), 'Flight', 'Ground'))\n.assign(sample_label=lambda dd: dd.sample_label.str.replace('\\n', ' '))\n.assign(value=lambda dd: np.where(dd.value &lt; treshold, treshold, dd.value))\n.pipe(lambda dd: p9.ggplot(dd)\n       + p9.aes('sample_label', 'Genus', size='value', fill='sample_mode')\n       + p9.geom_point(alpha=.8, stroke=0)\n       + p9.scale_size_continuous(trans='log10', range=(1, 9),\n                                  labels=percent_format(), \n                                  limits=(treshold - 1e-5, .9),\n                                  breaks=[.001, .01, .05, .5])\n       + p9.scale_y_discrete(expand=(.035, .035))\n       + p9.scale_fill_manual(values=['#D3894C', '#435B97'])\n       + p9.guides(size=p9.guide_legend(ncol=4))\n       + p9.labs(x='', y='', size='Relative Abundance', color='Class',\n                 title='Relative Abundance of Top 30 Genera in Blanks',\n                 fill=''\n                 )\n                  )\n       + p9.annotate(geom='vline', linetype='dashed', xintercept=2.5, color='grey')\n       + p9.theme(figure_size=(6.25, 7.5),\n                  strip_text=p9.element_text(size=12),\n                  axis_text=p9.element_text(size=10),\n                  legend_position='bottom',\n                  title=p9.element_text(ha='center'),\n                  legend_title=p9.element_text(x=300),\n                  axis_text_x=p9.element_text(angle=90),\n       )\n )\ng.save('../output/figures/top_genera_blanks_fun.svg')\ng.draw()"
  }
]